<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sn_sec_cmn_ci_lookup_rule">
<sn_sec_cmn_ci_lookup_rule action="INSERT_OR_UPDATE">
<active>true</active>
<condition/>
<description>IBM Guardium data is added to the source_data field of a Discovered Item as JSON.  This rule will find a match of the source_data with Database Instance and Database Catalog entries.  To guarantee a match, the correlation_id of any CMDB_CI item can be set to the Guardium Data source name.</description>
<lookup_script display_value=""/>
<method>script</method>
<name>IBM Guardium - Reference Lookup</name>
<order>200</order>
<reapply>true</reapply>
<reapply_version>5</reapply_version>
<script><![CDATA[var IBMGuardiumRefRule = Class.create();
var LOGGER = x_ibmrt_gdpva.GuardiumLog;

IBMGuardiumRefRule.prototype = {
	initialize: function (sourceValue, sourcePayload) {
		// Ensure JSON data is passed
		try {
			if (!sourcePayload) sourcePayload = sourceValue;
			if ("string" == typeof (sourcePayload)) sourcePayload = JSON.parse(sourceValue);
			this.payload = sourcePayload;
		} catch (e) {
			var errMsg = 'Unable to parse Discovered Item payload.';
			LOGGER.error(errMsg, this.type, e);
		}
	},

	generateQuery: function () {
		var isFQDN = !x_ibmrt_gdpva.GuardiumAPI.ipv4or6.test(this.payload['fqdn']);
		var oMetadata = {
			target_fqdn: isFQDN ? 'fqdn' : 'ip_address',
			target_service_name: this.payload['target_service_name'],
			target_database_name: this.payload['target_database_name']
		};
		var oQuery = { 
			'sys_class_name': this.payload['database_instance_class'] || this.payload['target_class'] || 'cmdb_ci_db_instance',
			'tcp_port': this.payload['tcp_port']
		};
		oQuery[oMetadata['target_fqdn']] = { value: this.payload['fqdn'], operator: isFQDN ? 'STARTSWITH' : '=' };
		if (this.payload['service_name'] && this.payload['target_service_name']) {
			oQuery[this.payload['target_service_name']] = this.payload['service_name'];
		}
		if (this.payload['database_name'] && this.payload['target_database_name']) {
			oQuery[this.payload['target_database_name']] = this.payload['database_name'];
		}
		oMetadata['query'] = oQuery;
		return oMetadata;
	},

	findMatchingCI: function (oQuery, asQueryProps) {
		var aoJson = [];
		var asInfo = [
			'sys_class_name=' + oQuery.sys_class_name
		];
		var gr;
		try {
			gr = new GlideRecord(oQuery.sys_class_name);
		} catch (e) {
			GuardiumLog.warn('No authorization to query table: ' + oQuery.sys_class_name);
			gr = new GlideRecord('cmdb_ci_db_instance');
		}
		if (!gr) return {};
		
		for (var i = 0; i < asQueryProps.length; i++) {
			var prop = asQueryProps[i];
			var qOperator = '=';
			var qValue = oQuery[prop];
			if ("object" == typeof (oQuery[prop])) {
				qOperator = oQuery[prop].operator || '=';
				qValue = oQuery[prop].value || '';
			}
			gr.addQuery(prop, qOperator, qValue);
			asInfo.push(prop + qOperator + qValue);
		}
		gr.query();
		while (gr.next()) {
			aoJson.push({
				name: gr.getDisplayValue(),
				sys_id: gr.getUniqueValue(),
				sys_class_name: gr.getTableName()
			});
		}
		// return result
		return {
			entries: aoJson,
			query: asInfo.join(' AND ')
		};
	},

	getCatalogReference: function (di_sys_id, database_name) {
		// It is assumed that Discovery will create a catalog item for every database type
		if (database_name) {
			var gr_dc = new GlideRecord('cmdb_ci_db_catalog');
			if (gr_dc) {
				gr_dc.addQuery('database_instance', '=', di_sys_id);
				gr_dc.addQuery('name', '=', database_name);
				gr_dc.setLimit(1);
				gr_dc.query();
				if (gr_dc.next()) {
					return gr_dc.getUniqueValue();
				}
			}
		}
		return null;
	},

	getRelationships: function (returnAttr, oQuery) {
		var aoJson = [];

		// Find relationships
		// ServiceNow reverses the expected parent::child relationship
		// * (parent) Database Instance RunsOn (child) Server
		var gr_rel = new GlideRecord('cmdb_rel_ci');
		for (var p in oQuery) {
			gr_rel.addQuery(p, '=', oQuery[p]);
		}
		gr_rel.query();
		while (gr_rel.next()) {
			LOGGER.debug(IBMGuardiumRelatedRule.prefix + 'Relationship' +
				'\nParent: ' + gr_rel.getDisplayValue('parent') +
				'\nType: ' + gr_rel.getDisplayValue('type') +
				'\nChild: ' + gr_rel.getDisplayValue('child'),
				this.type
			);

			// Get more information about the related record
			var gr = new GlideRecord('cmdb_ci');
			if (gr.get(gr_rel.getValue(returnAttr))) {
				aoJson.push({
					name: gr.getDisplayValue(),
					sys_id: gr.getUniqueValue(),
					sys_class_name: gr.getTableName()
				});
			}
		}

		// return result
		return aoJson;
	},

	run: function () {
		if (!this.payload) {
			LOGGER.error('Payload is empty. Exiting.' + '\n' + this.payload, this.type);
			return null;
		}

		// Check for direct matches to correlation_id
		try {
			var gr_ci = new GlideRecord('cmdb_ci');
			gr_ci.addQuery('correlation_id', '=', this.payload['name']);
			gr_ci.setLimit(1);
			gr_ci.query();
			if (gr_ci.next()) {
				return gr_ci.getUniqueValue();
			}
		} catch (e) {}
		
		// Display Query
		var oQuery = this.generateQuery();
		//LOGGER.debug('Find Database Instance or Catalog:\n' + JSON.stringify(oQuery.query), this.type);

		// Check for direct matches to Database Instance
		var result = {};
		try {
			result = this.findMatchingCI(oQuery.query, [oQuery.target_fqdn, 'tcp_port', oQuery.target_service_name]);
		} catch (e) {
			LOGGER.error('', this.type, e);
			return '';
		}

		// Final Step: find the linked catalog entry
		var aoJsonCI = result.entries;
		if (this.payload['database_name']) {
			for (var j = 0; j < aoJsonCI.length; j++) {
				var dc_sys_id = this.getCatalogReference(aoJsonCI[j].sys_id, this.payload['database_name']);
				if (!dc_sys_id) {
					// Find related records (hopefully Database Catalogs)
					var aoRelatedDC = 
						this.getRelationships(
							'child',
							{ parent: aoJsonCI[j].sys_id, type: '55c95bf6c0a8010e0118ec7056ebc54d' } // Contains::ContainedBy
						);
					LOGGER.debug('Number of related (catalogs): ' + aoRelatedDC.length, this.type);
					for (var dc=0; dc < aoRelatedDC.length; dc++) {
						// find first matching name
						if (this.payload['database_name'] == aoRelatedDC[dc].name) {
							dc_sys_id = aoRelatedDC[dc].sys_id;
							break;
						}
					}
				}
				if (dc_sys_id) {
					var oInfo = {
						database_instance: aoJsonCI[j],
						name: this.payload['database_name'],
						sys_id: dc_sys_id,
					};
					LOGGER.info('Matched Database Catalog\n' + JSON.stringify(oInfo), this.type);
					return dc_sys_id;
				}
			}

			// if this point is reached, there is no matching catalog, try matching with DI catalog field
			for (var jj = 0; jj < aoJsonCI.length; jj++) {
				var gr_di;
				try {
					gr_di = new GlideRecord(aoJsonCI[jj].sys_class_name);
				} catch (e) {
					GuardiumLog.warn('No authorization to query table: ' + aoJsonCI[jj].sys_class_name);
					return null;
				}
				if (gr_di.get(aoJsonCI[jj].sys_id)) {
					if (this.payload['database_name'] == gr_di.getValue(oQuery.target_database_name)) {
						LOGGER.info('Matched Database Instance\n' + JSON.stringify(aoJsonCI[jj]), this.type);
						return gr_di.getUniqueValue();
					}
				}
			}
		}

		// assume the first one matches FQDN, PORT, DB_TYPE, and SERVICE_NAME
		//  since there is no value for DATABASE_NAME
		if (aoJsonCI.length > 0) {
			LOGGER.info('Possible Matched Database Instances:\n' + JSON.stringify(aoJsonCI), this.type);
			return aoJsonCI[0].sys_id;
		}

		LOGGER.warn('Unmatched Database Instance or Catalog:\n' + JSON.stringify(oQuery), this.type);
		return null;
	},

	type: 'IBMGuardiumReferenceRule'
};

(function process(rule, sourceValue, sourcePayload) {
	/*********************************
	 * CI Lookup Rule Script
	 * 
	 * Available variables:
	 * - rule:          Reference to the lookup rule that is being evaluated
	 * - sourceValue:   The value of the source field from incoming data that is used for lookup
	 * - sourcePayload: All the fields from incoming data that can be used for matching CI 
	 *
	 * Return either:
	 * - the sysid of the CI that was matched by the rule
	 * - null if there were no CI records that matched
	 **********************************/

	var result = null;
	try {
		// Find cmdb_ci record by matching: FQDN, TCP_PORT, DB_TYPE, DB_NAME, SERVICE_NAME
		result = new IBMGuardiumRefRule(sourceValue, sourcePayload).run();
	} catch (e) {
		LOGGER.error('', 'IBMGuardiumReferenceRule', e);
	}
	return result;

})(rule, sourceValue, sourcePayload);]]></script>
<source display_value="IBM Guardium Integration">24f0f5c687744d10387c64280cbb350c</source>
<source_field>source_data</source_field>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-11-16 21:16:37</sys_created_on>
<sys_domain>global</sys_domain>
<sys_domain_path>/</sys_domain_path>
<sys_id>ce5b53cc9797551022fa1c800153afc3</sys_id>
<sys_mod_count>5</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2023-04-29 14:13:04</sys_updated_on>
<table/>
<target_field/>
<target_table/>
<type>custom</type>
</sn_sec_cmn_ci_lookup_rule>
<sn_sec_cmn_ci_lookup_rule action="INSERT_OR_UPDATE">
<active>true</active>
<condition/>
<description>IBM Guardium data is added to the source_data field of a Discovered Item as JSON.  This JSON can be used to match with Database Instance and Database Catalog entries.</description>
<lookup_script display_value=""/>
<method>script</method>
<name>IBM Guardium - Related Lookup</name>
<order>218</order>
<reapply>true</reapply>
<reapply_version>9</reapply_version>
<script><![CDATA[var IBMGuardiumRelatedRule = Class.create();
var LOGGER = x_ibmrt_gdpva.GuardiumLog;

IBMGuardiumRelatedRule.prototype = {
	initialize: function (sourceValue, sourcePayload) {
		// Ensure JSON data is passed
		try {
			if (!sourcePayload) sourcePayload = sourceValue;
			if ("string" == typeof (sourcePayload)) sourcePayload = JSON.parse(sourceValue);
			this.payload = sourcePayload;
		} catch (e) {
			var errMsg = 'Unable to parse Discovered Item payload.';
			LOGGER.error(errMsg, this.type, e);
		}
	},

	generateQuery: function () {
		var isFQDN = !x_ibmrt_gdpva.GuardiumAPI.ipv4or6.test(this.payload['fqdn']);
		var oMetadata = {
			target_fqdn: isFQDN ? 'fqdn' : 'ip_address',
			target_service_name: this.payload['target_service_name'],
			target_database_name: this.payload['target_database_name']
		};
		var oQuery = {
			'sys_class_name': this.payload['database_instance_class'] || this.payload['target_class'] || 'cmdb_ci_db_instance',
			'tcp_port': this.payload['tcp_port']
		};
		oQuery[oMetadata['target_fqdn']] = { value: this.payload['fqdn'], operator: isFQDN ? 'STARTSWITH' : '=' };
		if (this.payload['service_name'] && this.payload['target_service_name']) {
			oQuery[this.payload['target_service_name']] = this.payload['service_name'];
		}
		if (this.payload['database_name'] && this.payload['target_database_name']) {
			oQuery[this.payload['target_database_name']] = this.payload['database_name'];
		}
		oMetadata['query'] = oQuery;
		return oMetadata;
	},

	findMatchingCI: function (oQuery, asQueryProps) {
		var aoJson = [];
		var asInfo = [
			'sys_class_name=' + oQuery.sys_class_name
		];
		var gr;
		try {
			gr = new GlideRecord(oQuery.sys_class_name);
		} catch (e) {
			GuardiumLog.warn('No authorization to query table: ' + oQuery.sys_class_name);
			return {};
		}
		for (var i = 0; i < asQueryProps.length; i++) {
			var prop = asQueryProps[i];
			var qOperator = '=';
			var qValue = oQuery[prop];
			if ("object" == typeof (oQuery[prop])) {
				qOperator = oQuery[prop].operator || '=';
				qValue = oQuery[prop].value || '';
			}
			gr.addQuery(prop, qOperator, qValue);
			asInfo.push(prop + qOperator + qValue);
		}
		gr.query();
		while (gr.next()) {
			aoJson.push({
				name: gr.getDisplayValue(),
				sys_id: gr.getUniqueValue(),
				sys_class_name: gr.getTableName()
			});
		}
		// return result
		return {
			entries: aoJson,
			query: asInfo.join(' AND ')
		};
	},

	getCatalogReference: function (di_sys_id, database_name) {
		// It is assumed that Discovery will create a catalog item for every database type
		if (database_name) {
			var gr_dc = new GlideRecord('cmdb_ci_db_catalog');
			if (gr_dc) {
				gr_dc.addQuery('database_instance', '=', di_sys_id);
				gr_dc.addQuery('name', '=', database_name);
				gr_dc.setLimit(1);
				gr_dc.query();
				if (gr_dc.next()) {
					return gr_dc.getUniqueValue();
				}
			}
		}
		return null;
	},

	getRelationships: function (returnAttr, oQuery) {
		var aoJson = [];

		// Find relationships
		// ServiceNow reverses the expected parent::child relationship
		// * (parent) Database Instance RunsOn (child) Server
		var gr_rel = new GlideRecord('cmdb_rel_ci');
		for (var p in oQuery) {
			gr_rel.addQuery(p, '=', oQuery[p]);
		}
		gr_rel.query();
		while (gr_rel.next()) {
			LOGGER.debug('Relationship' +
				'\nParent: ' + gr_rel.getDisplayValue('parent') +
				'\nType: ' + gr_rel.getDisplayValue('type') +
				'\nChild: ' + gr_rel.getDisplayValue('child'),
				this.type
			);

			// Get more information about the related record
			var gr = new GlideRecord('cmdb_ci');
			if (gr.get(gr_rel.getValue(returnAttr))) {
				aoJson.push({
					name: gr.getDisplayValue(),
					sys_id: gr.getUniqueValue(),
					sys_class_name: gr.getTableName()
				});
			}
		}

		// return result
		return aoJson;
	},

	run: function () {
		if (!this.payload) {
			LOGGER.error('Payload is empty. Exiting.' + '\n' + this.payload, this.type);
			return null;
		}

		// Display Query
		var oQuery = this.generateQuery();
		//LOGGER.debug('Find Database Instance or Catalog:\n' + JSON.stringify(oQuery.query), this.type);

		var result = {};
		// Example: 
		// * There are 5 Oracle and 5 MySQL Database Instances running on Server X
		// * Get Server X by FQDN
		// * Get Related DI
		// * Filter DI by Class and Service Name
		try {
			// Find server records matching given FQDN
			var oCmdbQuery = { 'sys_class_name': 'cmdb_ci' };
			oCmdbQuery[oQuery.target_fqdn] = oQuery.query[oQuery.target_fqdn];
			result = this.findMatchingCI(oCmdbQuery, [oQuery.target_fqdn]);
			if (!result || 0 == result.entries.length) {
				LOGGER.warn(
					'No records found where: ' + (result ? result.query : JSON.stringify(oQuery.query)),
					this.type
				);
				return '';
			}
			LOGGER.debug('Number of cmdb_ci: ' + result.entries.length, this.type);

			// Find related records (hopefully Database Instances)
			var aoRelated = [];
			for (var cc = 0; cc < result.entries.length; cc++) {
				var entry = result.entries[cc];
				aoRelated = aoRelated.concat(
					this.getRelationships(
						'parent',
						{ child: entry.sys_id, type: '60bc4e22c0a8010e01f074cbe6bd73c3' } // RunsOn::Runs
					)
				);
			}
			LOGGER.debug('Number of related (instances): ' + aoRelated.length, this.type);

			// Filter related records by class
			var aoClassMatch = [];
			for (var r = 0; r < aoRelated.length; r++) {
				if (oQuery.sys_class_name == aoRelated[r].sys_class_name) {
					aoClassMatch.push(aoRelated[r]);
				}
			}
			LOGGER.debug('Number of class match: ' + aoClassMatch.length, this.type);

			// Filter remaining records by service_name
			var aoServiceMatch = [];
			for (var cm = 0; cm < aoClassMatch.length; cm++) {
				var gr_cm = new GlideRecord(aoClassMatch[cm].sys_class_name);
				if (gr_cm.get(aoClassMatch[cm].sys_id)) {
					if (this.payload['service_name']) {
						if (this.payload['service_name'] == gr_cm.getValue(oQuery.target_service_name)) {
							aoServiceMatch.push(aoClassMatch[cm]);
						}
					} else {
						if (oQuery.query.tcp_port == gr_cm.getValue('tcp_port')) {
							aoServiceMatch.push(aoClassMatch[cm]);
						}
					}
				}
			}
			LOGGER.debug('Number of service match: ' + aoServiceMatch.length, this.type);

			// Process filtered collection below
			result.entries = aoServiceMatch.length > 0 ? aoServiceMatch : aoClassMatch;

		} catch (e) {
			LOGGER.error('', this.type, e);
			return '';
		}

		// Final Step: find the linked catalog entry
		var aoJsonCI = result.entries;
		if (this.payload['database_name']) {
			for (var j = 0; j < aoJsonCI.length; j++) {
				var dc_sys_id = this.getCatalogReference(aoJsonCI[j].sys_id, this.payload['database_name']);
				if (!dc_sys_id) {
					// Find related records (hopefully Database Catalogs)
					var aoRelatedDC = 
						this.getRelationships(
							'child',
							{ parent: aoJsonCI[j].sys_id, type: '55c95bf6c0a8010e0118ec7056ebc54d' } // Contains::ContainedBy
						);
					LOGGER.debug('Number of related (catalogs): ' + aoRelatedDC.length, this.type);
					for (var dc=0; dc < aoRelatedDC.length; dc++) {
						// find first matching name
						if (this.payload['database_name'] == aoRelatedDC[dc].name) {
							dc_sys_id = aoRelatedDC[dc].sys_id;
							break;
						}
					}
				}
				if (dc_sys_id) {
					var oInfo = {
						database_instance: aoJsonCI[j],
						name: this.payload['database_name'],
						sys_id: dc_sys_id,
					};
					LOGGER.info(
						'Matched Database Catalog\n' + JSON.stringify(oInfo), this.type
					);
					return dc_sys_id;
				}
			}

			// if this point is reached, there is no matching catalog, try matching with DI catalog field
			for (var jj = 0; jj < aoJsonCI.length; jj++) {
				var gr_di = new GlideRecord(aoJsonCI[jj].sys_class_name);
				if (gr_di.get(aoJsonCI[jj].sys_id)) {
					if (this.payload['database_name'] == gr_di.getValue(oQuery.target_database_name)) {
						LOGGER.info(
							'Matched Database Instance\n' + JSON.stringify(aoJsonCI[jj]), this.type
						);
						return gr_di.getUniqueValue();
					}
				}
			}
		}

		// assume the first one matches FQDN, PORT, DB_TYPE, and SERVICE_NAME
		//  since there is no value for DATABASE_NAME
		if (aoJsonCI.length > 0) {
			LOGGER.info(
				'Possible Matched Database Instances:\n' + JSON.stringify(aoJsonCI), this.type
			);
			return aoJsonCI[0].sys_id;
		}

		LOGGER.warn('Unmatched Database Instance or Catalog:\n' + JSON.stringify(oQuery), this.type);
		return null;
	},

	type: 'IBMGuardiumRelatedRule'
};

(function process(rule, sourceValue, sourcePayload) {
	/*********************************
	 * CI Lookup Rule Script
	 * 
	 * Available variables:
	 * - rule:          Reference to the lookup rule that is being evaluated
	 * - sourceValue:   The value of the source field from incoming data that is used for lookup
	 * - sourcePayload: All the fields from incoming data that can be used for matching CI 
	 *
	 * Return either:
	 * - the sysid of the CI that was matched by the rule
	 * - null if there were no CI records that matched
	 **********************************/

	var result = null;
	try {
		// Find cmdb_ci record by matching: FQDN, TCP_PORT, DB_TYPE, DB_NAME, SERVICE_NAME
		result = new IBMGuardiumRelatedRule(sourceValue, sourcePayload).run();
	} catch (e) {
		LOGGER.error('', 'IBMGuardiumRelatedRule', e);
	}
	return result;

})(rule, sourceValue, sourcePayload);]]></script>
<source display_value="IBM Guardium Integration">24f0f5c687744d10387c64280cbb350c</source>
<source_field>source_data</source_field>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2022-09-28 13:43:30</sys_created_on>
<sys_domain>global</sys_domain>
<sys_domain_path>/</sys_domain_path>
<sys_id>4919d5989792155022fa1c800153af56</sys_id>
<sys_mod_count>11</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2023-04-29 14:12:36</sys_updated_on>
<table/>
<target_field/>
<target_table/>
<type>custom</type>
</sn_sec_cmn_ci_lookup_rule>
</record_update>
