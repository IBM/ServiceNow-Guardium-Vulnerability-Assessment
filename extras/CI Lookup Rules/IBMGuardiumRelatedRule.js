try {
    var IBMGuardiumRelatedRule = Class.create();
    var LOGGER = {
        error: function(sText, sType, e) {
            var aMsg = sText ? [sText] : [];
            if (sType) aMsg.push(sType);
            if (e && e.message) aMsg.push(e.message);
            if (e && e.stack) aMsg.push(e.stack);
            try {
                gs.error(aMsg.join('\n'));
            } catch (e1) {}
        },
        warn: function(sText, sType, obj) {
            var aMsg = sText ? [sText] : [];
            if (sType) aMsg.push(sType);
            if (obj) aMsg.push(JSON.stringify(obj));
            try {
                gs.warn(aMsg.join('\n'));
            } catch (e1) {}
        },
        info: function(sText, sType, obj) {
            var aMsg = sText ? [sText] : [];
            if (sType) aMsg.push(sType);
            if (obj) aMsg.push(JSON.stringify(obj));
            try {
                gs.debug(aMsg.join('\n'));
            } catch (e1) {
                gs.error('IBMGuardiumRelatedRule Error: ' + (e1.message || e1));
            }
        }
    };
    var REGEX_ipv4or6 = /((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))/;

    IBMGuardiumRelatedRule.prototype = {
        initialize: function(sourceValue, sourcePayload) {
            // Ensure JSON data is passed
            try {
                if (!sourcePayload) sourcePayload = sourceValue;
                if ("string" == typeof(sourcePayload)) sourcePayload = JSON.parse(sourceValue);
                this.payload = sourcePayload;
            } catch (e) {
                var errMsg = 'Unable to parse Discovered Item payload.';
                LOGGER.error(errMsg, this.type, e);
            }
        },

        generateQuery: function() {
            var isFQDN = !REGEX_ipv4or6.test(this.payload['fqdn']);
            var oMetadata = {
                target_fqdn: isFQDN ? 'fqdn' : 'ip_address',
                target_service_name: this.payload['target_service_name'],
                target_database_name: this.payload['target_database_name']
            };
            var oQuery = {
                'sys_class_name': this.payload['database_instance_class'] || this.payload['target_class'] || 'cmdb_ci_db_instance',
                'tcp_port': this.payload['tcp_port']
            };
            oQuery[oMetadata['target_fqdn']] = {
                value: this.payload['fqdn'],
                operator: isFQDN ? 'STARTSWITH' : '='
            };
            if (this.payload['service_name'] && this.payload['target_service_name']) {
                oQuery[this.payload['target_service_name']] = this.payload['service_name'];
            }
            if (this.payload['database_name'] && this.payload['target_database_name']) {
                oQuery[this.payload['target_database_name']] = this.payload['database_name'];
            }
            oMetadata['query'] = oQuery;
            return oMetadata;
        },

        findMatchingCI: function(oQuery, asQueryProps) {
            var aoJson = [];
            var asInfo = [
                'sys_class_name=' + oQuery.sys_class_name
            ];
            var gr;
            try {
                gr = new GlideRecord(oQuery.sys_class_name);
            } catch (e) {
                GuardiumLog.warn('No authorization to query table: ' + oQuery.sys_class_name);
                return {};
            }
            for (var i = 0; i < asQueryProps.length; i++) {
                var prop = asQueryProps[i];
                var qOperator = '=';
                var qValue = oQuery[prop];
                if ("object" == typeof(oQuery[prop])) {
                    qOperator = oQuery[prop].operator || '=';
                    qValue = oQuery[prop].value || '';
                }
                gr.addQuery(prop, qOperator, qValue);
                asInfo.push(prop + qOperator + qValue);
            }
            gr.query();
            while (gr.next()) {
                aoJson.push({
                    name: gr.getDisplayValue(),
                    sys_id: gr.getUniqueValue(),
                    sys_class_name: gr.getRecordClassName()
                });
            }
            // return result
            return {
                entries: aoJson,
                query: asInfo.join(' AND ')
            };
        },

        getCatalogReference: function(di_sys_id, database_name) {
            // It is assumed that Discovery will create a catalog item for every database type
            if (database_name) {
                var gr_dc = new GlideRecord('cmdb_ci_db_catalog');
                if (gr_dc) {
                    gr_dc.addQuery('database_instance', '=', di_sys_id);
                    gr_dc.addQuery('name', '=', database_name);
                    gr_dc.setLimit(1);
                    gr_dc.query();
                    if (gr_dc.next()) {
                        return gr_dc.getUniqueValue();
                    }
                }
            }
            return null;
        },

        getRelationships: function(returnAttr, oQuery, sClassName) {
            var aoJson = [];

            // Find relationships
            // ServiceNow reverses the expected parent::child relationship
            // * (parent) Database Instance RunsOn (child) Server
            var gr_rel = new GlideRecord('cmdb_rel_ci');
            for (var p in oQuery) {
                gr_rel.addQuery(p, '=', oQuery[p]);
            }
            gr_rel.query();
            while (gr_rel.next()) {
                // Get more information about the related record
                var gr = new GlideRecord('cmdb_ci');
                if (gr.get(gr_rel.getValue(returnAttr))) {
                    if (!sClassName || sClassName == gr.getRecordClassName()) {
                        aoJson.push({
                            name: gr.getDisplayValue(),
                            sys_id: gr.getUniqueValue(),
                            sys_class_name: gr.getRecordClassName()
                        });
                        LOGGER.info('Relationship' +
                            '\nParent: ' + gr_rel.getDisplayValue('parent') +
                            '\nType: ' + gr_rel.getDisplayValue('type') +
                            '\nChild: ' + gr_rel.getDisplayValue('child') +
                            '\nClass: ' + gr.getRecordClassName(),
                            this.type
                        );
                    }
                }
            }

            // return result
            return aoJson;
        },

        run: function() {
            if (!this.payload) {
                LOGGER.error('Payload is empty. Exiting.' + '\n' + this.payload, this.type);
                return null;
            }

            // Display Query
            var oQuery = this.generateQuery();
            LOGGER.info('Find Database Instance or Catalog:\n' + JSON.stringify(oQuery.query), this.type);

            var result = {};
            // Example: 
            // * There are 5 Oracle and 5 MySQL Database Instances running on Server X
            // * Get Server X by FQDN
            // * Get Related DI
            // * Filter DI by Class and Service Name
            try {
                // Find server records matching given FQDN
                var oCmdbQuery = {
                    'sys_class_name': 'cmdb_ci'
                };
                oCmdbQuery[oQuery.target_fqdn] = oQuery.query[oQuery.target_fqdn];
                result = this.findMatchingCI(oCmdbQuery, [oQuery.target_fqdn]);
                if (!result || 0 == result.entries.length) {
                    LOGGER.warn(
                        'No records found where: ' + (result ? result.query : JSON.stringify(oQuery.query)),
                        this.type
                    );
                    return '';
                }

                // Filter out Unmatched CI
                var aoFQDN = [];
                for (var ne = 0; ne < result.entries.length; ne++) {
                    switch (result.entries[ne].sys_class_name) {
                        case 'sn_sec_cmn_unmatched_ci':
                        case 'cmdb_ci_unclassed_hardware':
                            // ignore these classes
                            continue;
                    }
                    aoFQDN.push(result.entries[ne]);
                }
                LOGGER.info('Number of FQDN matches: ' + aoFQDN.length, this.type);

                // Find related records (hopefully Database Instances)
                var aoRelated = [];
                for (var cc = 0; cc < aoFQDN.length; cc++) {
                    var entry = aoFQDN[cc];
                    aoRelated = aoRelated.concat(
                        this.getRelationships(
                            'parent', {
                                child: entry.sys_id,
                                type: '60bc4e22c0a8010e01f074cbe6bd73c3' // RunsOn::Runs
                            },
                            oQuery.query.sys_class_name
                        )
                    );
                }
                LOGGER.info('Number of related (instances): ' + aoRelated.length, this.type);

                // Append FQDN in case there is a tcp_port within the record
                aoRelated = aoRelated.concat(aoFQDN);

                // Filter by port
                var aoPortMatch = [];
                for (var rm = 0; rm < aoRelated.length; rm++) {
                    var gr_pm = new GlideRecord(aoRelated[rm].sys_class_name);
                    if (gr_pm.get(aoRelated[rm].sys_id)) {
                        if (oQuery.query.tcp_port == gr_pm.getValue('tcp_port') || oQuery.query.tcp_port == gr_pm.getValue('jdbc_port')) {
                            aoPortMatch.push(aoRelated[rm]);
                        }
                    }
                }
                LOGGER.info('Number of TCP port matches: ' + aoPortMatch.length, this.type);

                // Filter remaining records by service_name
                var aoServiceMatch = [];
                if (this.payload['service_name']) {
                    for (var pm = 0; pm < aoPortMatch.length; pm++) {
                        var gr_cm = new GlideRecord(aoPortMatch[pm].sys_class_name);
                        if (gr_cm.get(aoPortMatch[pm].sys_id) &&
                            this.payload['service_name'] == gr_cm.getValue(oQuery.target_service_name)) {
                            aoServiceMatch.push(aoPortMatch[pm]);
                        }
                    }
                    LOGGER.info('Number of service matches: ' + aoServiceMatch.length, this.type);
                } else {
                    aoServiceMatch.concat(aoPortMatch);
                }

                // Process filtered collection below
                result.entries = aoServiceMatch.length > 0 ? aoServiceMatch : aoPortMatch;

            } catch (e) {
                LOGGER.error('', this.type, e);
                return '';
            }

            // Final Step: find the linked catalog entry
            var aoJsonCI = result.entries;
            if (this.payload['database_name']) {
                for (var j = 0; j < aoJsonCI.length; j++) {
                    var dc_sys_id = this.getCatalogReference(aoJsonCI[j].sys_id, this.payload['database_name']);
                    if (!dc_sys_id) {
                        // Find related records (hopefully Database Catalogs)
                        var aoRelatedDC =
                            this.getRelationships(
                                'child', {
                                    parent: aoJsonCI[j].sys_id,
                                    type: '55c95bf6c0a8010e0118ec7056ebc54d'
                                } // Contains::ContainedBy
                            );
                        LOGGER.info('Number of related (catalogs): ' + aoRelatedDC.length, this.type);
                        for (var dc = 0; dc < aoRelatedDC.length; dc++) {
                            // find first matching name
                            if (this.payload['database_name'] == aoRelatedDC[dc].name) {
                                dc_sys_id = aoRelatedDC[dc].sys_id;
                                break;
                            }
                        }
                    }
                    if (dc_sys_id) {
                        var oInfo = {
                            database_instance: aoJsonCI[j],
                            name: this.payload['database_name'],
                            sys_id: dc_sys_id,
                        };
                        LOGGER.info(
                            'Matched Database Catalog\n' + JSON.stringify(oInfo), this.type
                        );
                        return dc_sys_id;
                    }
                }

                // if this point is reached, there is no matching catalog, try matching with DI catalog field
                for (var jj = 0; jj < aoJsonCI.length; jj++) {
                    var gr_di = new GlideRecord(aoJsonCI[jj].sys_class_name);
                    if (gr_di.get(aoJsonCI[jj].sys_id)) {
                        if (this.payload['database_name'] == gr_di.getValue(oQuery.target_database_name)) {
                            LOGGER.info(
                                'Matched Database Instance\n' + JSON.stringify(aoJsonCI[jj]), this.type
                            );
                            return gr_di.getUniqueValue();
                        }
                    }
                }
            }

            // assume the first one matches FQDN, PORT, DB_TYPE, and SERVICE_NAME
            //  since there is no value for DATABASE_NAME
            if (aoJsonCI.length > 0) {
                LOGGER.info(
                    'Possible Matched Database Instances:\n' + JSON.stringify(aoJsonCI), this.type
                );
                return aoJsonCI[0].sys_id;
            }

            // Return default, if provided
            if (this.payload['ci_sys_id']) {
                return this.payload['ci_sys_id'];
            }

            LOGGER.warn('Unmatched Database Instance or Catalog:\n' + JSON.stringify(oQuery.query), this.type);
            return null;
        },

        type: 'IBMGuardiumRelatedRule'
    };

    (function process(rule, sourceValue, sourcePayload) {
        /*********************************
         * CI Lookup Rule Script
         * 
         * Available variables:
         * - rule:          Reference to the lookup rule that is being evaluated
         * - sourceValue:   The value of the source field from incoming data that is used for lookup
         * - sourcePayload: All the fields from incoming data that can be used for matching CI 
         *
         * Return either:
         * - the sysid of the CI that was matched by the rule
         * - null if there were no CI records that matched
         **********************************/

        var result = null;
        try {
            // Find cmdb_ci record by matching: FQDN, TCP_PORT, DB_TYPE, DB_NAME, SERVICE_NAME
            result = new IBMGuardiumRelatedRule(sourceValue, sourcePayload).run();
        } catch (e) {
            LOGGER.error('', 'IBMGuardiumRelatedRule', e);
        }
        return result;

    })(rule, sourceValue, sourcePayload);
} catch (outer) {
    gs.error('IBMGuardiumRelatedRule Error: ' + (outer.message || outer));
}
