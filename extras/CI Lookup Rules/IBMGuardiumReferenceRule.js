try {
    var IBMGuardiumReferenceRule = Class.create();
    var LOGGER = {
        error: function(sText, sType, e) {
            var aMsg = sText ? [sText] : [];
            if (sType) aMsg.push(sType);
            if (e && e.message) aMsg.push(e.message);
            if (e && e.stack) aMsg.push(e.stack);
            try {
                gs.error(aMsg.join('\n'));
            } catch (e1) {}
        },
        warn: function(sText, sType, obj) {
            var aMsg = sText ? [sText] : [];
            if (sType) aMsg.push(sType);
            if (obj) aMsg.push(JSON.stringify(obj));
            try {
                gs.warn(aMsg.join('\n'));
            } catch (e1) {}
        },
        info: function(sText, sType, obj) {
            var aMsg = sText ? [sText] : [];
            if (sType) aMsg.push(sType);
            if (obj) aMsg.push(JSON.stringify(obj));
            try {
                gs.info(aMsg.join('\n'));
            } catch (e1) {
                gs.error('IBMGuardiumReferenceRule Error' + e1.message);
            }
        }
    };

    IBMGuardiumReferenceRule.prototype = {
        initialize: function(sourceValue, sourcePayload) {
            // Ensure JSON data is passed
            try {
                if (!sourcePayload) sourcePayload = sourceValue;
                if ("string" == typeof(sourcePayload)) sourcePayload = JSON.parse(sourceValue);
                this.payload = sourcePayload;
            } catch (e) {
                var errMsg = 'Unable to parse Discovered Item payload.';
                LOGGER.error(errMsg, this.type, e);
            }
        },

        run: function() {
            if (!this.payload) {
                LOGGER.error('Payload is empty. Exiting.' + '\n' + JSON.stringify(this.payload), this.type);
                return null;
            }

            var result = {};
            try {
                var gr_ci = new GlideRecord('cmdb_ci');
                gr_ci.addQuery('correlation_id', '=', this.payload['name']);
                gr_ci.query();

                LOGGER.info('Number of matches for database "' + this.payload['name'] + '": ' + gr_ci.getRowCount(), this.type);

                if (gr_ci.next()) {
                    return gr_ci.getUniqueValue();
                }


            } catch (e) {
                LOGGER.error('', this.type, e);
            }

            return null;
        },

        type: 'IBMGuardiumReferenceRule'
    };

    (function process(rule, sourceValue, sourcePayload) {
        /*********************************
         * CI Lookup Rule Script
         * 
         * Available variables:
         * - rule:          Reference to the lookup rule that is being evaluated
         * - sourceValue:   The value of the source field from incoming data that is used for lookup
         * - sourcePayload: All the fields from incoming data that can be used for matching CI 
         *
         * Return either:
         * - the sysid of the CI that was matched by the rule
         * - null if there were no CI records that matched
         **********************************/

        var result = null;
        try {
            // Find cmdb_ci record by matching: FQDN, TCP_PORT, DB_TYPE, DB_NAME, SERVICE_NAME
            result = new IBMGuardiumReferenceRule(sourceValue, sourcePayload).run();
        } catch (e) {
            LOGGER.error('', 'IBMGuardiumReferenceRule', e);
        }
        return result;

    })(rule, sourceValue, sourcePayload);
} catch (outer) {
    gs.error('IBMGuardiumReferenceRule Error' + outer.message);
}
