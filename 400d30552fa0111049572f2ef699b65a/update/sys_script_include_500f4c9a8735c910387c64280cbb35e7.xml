<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumTransformMap</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Refresh and restore the database map entries</description>
        <name>GuardiumTransformMap</name>
        <script><![CDATA[var GuardiumTransformMap = Class.create();
GuardiumTransformMap.prototype = {
    initialize: function() {
        this._initializeMapsDI();
        this._initializeMapsDC();
    },

    createOrUpdateTransformRule: function(cm_sys_id, cm_name) {
        if (!cm_sys_id) {
            throw new Error("Invalid cm_sys_id value");
        }
        var hasActiveRules = false;
        var gr_rule = new GlideRecord(GuardiumAPI.TABLE_EXP_TARGET);
        gr_rule.orderBy('order');
        gr_rule.query();
        while (gr_rule.next()) {
            if ('1' == gr_rule.getValue('active')) {
                hasActiveRules = true;
            }
            if (cm_sys_id == gr_rule.getValue('fqdn_cm')) {
                // an export rule is already defined for this cm
                return;
            }
        }
        gr_rule.initialize();
        gr_rule.setValue('fqdn_cm', cm_sys_id);
        gr_rule.setValue('active', !hasActiveRules);
        gr_rule.setValue('name', 'Default export rule: ' + cm_name);
        gr_rule.insert();
    },

    hasMaps: function() {
        var hasDI = false;
        var di_map = new GlideRecord(GuardiumAPI.TABLE_DB_MAP);
		di_map.setLimit(1);
        di_map.query();
        if (di_map.next()) {
            hasDI = true;
        }

        var hasDC = false;
        var dc_map = new GlideRecord(GuardiumAPI.TABLE_DC_MAP);
		dc_map.setLimit(1);
        dc_map.query();
        if (dc_map.next()) {
            hasDC = true;
        }

        var hasTech = false;
        try {
            var gr_tech = new GlideRecord('sn_vulc_technology');
            gr_tech.addQuery('source', '=', GuardiumAPI.TITLE);
			gr_tech.setLimit(1);
            gr_tech.query();
            if (gr_tech.next()) {
                hasTech = true;
            }
        } catch (e) {
            hasTech = true;
        }

        return hasDI && hasDC && hasTech;
    },

    restoreMaps: function(force) {
        if (!force && this.hasMaps()) return;
        this.restoreMapsDI();
        this.restoreMapsDC();
        this.restoreTechnology();
    },

    restoreTechnology: function() {
        try {
            for (var db_type in this._maps_di) {
                var gr_tech = new GlideRecord('sn_vulc_technology');
                gr_tech.addQuery('source', '=', GuardiumAPI.TITLE);
                gr_tech.addQuery('source_id', '=', db_type);
				gr_tech.setLimit(1);
                gr_tech.query();
                if (gr_tech.next()) {
                    // exists
                    continue;
                }
                // insert new
                gr_tech.initialize();
                gr_tech.setValue('name', this._maps_di[db_type].name);
                gr_tech.setValue('source', GuardiumAPI.TITLE);
                gr_tech.setValue('source_id', db_type);
                gr_tech.setValue('source_id_int', this.generateHash(db_type));
                gr_tech.insert();
            }
        } catch (e) {
            return;
        }
    },

    generateHash: function(str) {
        var hash = 0;
        if (str.length === 0) return hash;
        for (var i = 0; i < str.length; i++) {
            var chr = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + chr;
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    },

    restoreMapsDI: function() {
        for (var db_type in this._maps_di) {
            var db = this._maps_di[db_type];
            var exists = false;
            var doUpdate = false;

            if (!db.database_type) continue;

            var gr_map = new GlideRecord(GuardiumAPI.TABLE_DB_MAP);
            gr_map.addQuery('database_type', '=', db.database_type);
			gr_map.setLimit(1);
            gr_map.query();
            if (gr_map.next()) {
                exists = true;
            }
            if (!exists) {
                gr_map.initialize();
            }

            for (var p in db) {
                if (!gr_map.getValue(p)) {
                    gr_map.setValue(p, db[p]);
                    doUpdate = true;
                }
            }

            if (!exists) {
                gr_map.insert();
            } else {
                gr_map.update();
            }
        }
    },

    restoreMapsDC: function() {
        for (var db_type in this._maps_dc) {
            var db = this._maps_dc[db_type];
            var exists = false;
            var doUpdate = false;

            if (!db.database_type) continue;

            var gr_map = new GlideRecord(GuardiumAPI.TABLE_DC_MAP);
            gr_map.addQuery('class_name', '=', db.class_name);
			gr_map.setLimit(1);
            gr_map.query();
            if (gr_map.next()) {
                exists = true;
            }
            if (!exists) {
                gr_map.initialize();
            }

            for (var p in db) {
                if (!gr_map.getValue(p)) {
                    gr_map.setValue(p, db[p]);
                    doUpdate = true;
                }
            }

            if (!exists) {
                gr_map.insert();
            } else {
                gr_map.update();
            }
        }
    },

    getMapDC: function() {
        // merge records and defaults
        var fields = {
            sys_id: true,
            database_type: true,
            name: true,
            class_name: true,
            database_name: true,
            service_name: true
        };

        var dc_map = new GlideRecord(GuardiumAPI.TABLE_DC_MAP);
        dc_map.orderBy('sys_created_on');
        dc_map.query();
        while (dc_map.next()) {
            var db_type = dc_map.getValue('database_type');
            if (this._maps_dc[db_type] && this._maps_dc[db_type].sys_id) continue;

            var entry = {};
            for (var p in fields) {
                var v = dc_map.getValue(p) || '';
                entry[p] = v.toString();
            }
            this._maps_dc[db_type] = entry;
        }
        return this._maps_dc;
    },

    _initializeMapsDC: function() {
        var map = [{
                database_type: "*",
                name: 'Database Catalog',
                class_name: 'cmdb_ci_db_catalog',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "COUCHBASE",
                name: 'Couchbase Bucket',
                class_name: 'cmdb_ci_couchbase_bucket',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "CASSANDRA",
                name: 'Cassandra Keyspace',
                class_name: 'cmdb_ci_cassandra_keyspace',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "DATASTAX CASSANDRA",
                name: 'Cassandra Keyspace',
                class_name: 'cmdb_ci_cassandra_keyspace',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "DB2",
                name: 'DB2 Catalog',
                class_name: 'cmdb_ci_db_db2_catalog',
                database_name: '',
                service_name: 'name'
            },
            {
                database_type: "DB2 FOR i",
                name: 'DB2 Catalog for i',
                class_name: 'cmdb_ci_db_db2_catalog',
                database_name: '',
                service_name: 'name'
            },
            {
                database_type: "DB2 z/OS",
                name: 'DB2 Catalog z/OS',
                class_name: 'cmdb_ci_db_db2_catalog',
                database_name: '',
                service_name: 'name'
            },
            {
                database_type: "MONGODB",
                name: 'Mongo Database',
                class_name: 'cmdb_ci_mongo_database',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "MS SQL SERVER",
                name: 'MSFT SQL Catalog',
                class_name: 'cmdb_ci_db_mssql_catalog',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "MYSQL",
                name: 'MySQL Catalog',
                class_name: 'cmdb_ci_db_mysql_catalog',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "ORACLE",
                name: 'Oracle Catalog',
                class_name: 'cmdb_ci_db_ora_catalog',
                database_name: 'name',
                service_name: 'schema'
            },
            {
                database_type: "PERCONA MYSQL",
                name: 'Percona MySQL Catalog',
                class_name: 'cmdb_ci_db_mysql_catalog',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "POSTGRESQL",
                name: 'PostgreSQL Schema',
                class_name: 'cmdb_ci_postgresql_schema',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "SYBASE",
                name: 'Sybase Catalog',
                class_name: 'cmdb_ci_db_syb_catalog',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "SYBASE IQ",
                name: 'Sybase IQ Catalog',
                class_name: 'cmdb_ci_db_syb_catalog',
                database_name: 'name',
                service_name: ''
            },
            {
                database_type: "_NOT_USED_",
                name: 'Oracle Database',
                class_name: 'cmdb_ci_oracle_database',
                database_name: 'name',
                service_name: ''
            }
        ];

        this._maps_dc = {};
        for (var i = 0; i < map.length; i++) {
            this._maps_dc[map[i].database_type] = map[i];
        }
    },

    getMapDI: function() {
        // merge records and defaults
        var fields = {
            sys_id: true,
            tcp_port: true,
            database_type: true,
            database_type_override: true,
            database_instance_class: true,
            database_name: true,
            service_name: true
        };

        var di_map = new GlideRecord(GuardiumAPI.TABLE_DB_MAP);
        di_map.orderBy('sys_created_on');
        di_map.query();
        while (di_map.next()) {
            var db_type = di_map.getValue('database_type');
            if (this._maps_di[db_type] && this._maps_di[db_type].sys_id) continue;

            var entry = {};
            for (var p in fields) {
                var v = di_map.getValue(p) || '';
                entry[p] = v.toString();
            }
            this._maps_di[db_type] = entry;
        }
        return this._maps_di;
    },

    // collection of known Guardium supported databases
    _initializeMapsDI: function() {
        if (this._maps_di) return;

        var map = [{
                tcp_port: '2406',
                database_type: "ASTER"
            },
            {
                tcp_port: '7180',
                database_type: "CLOUDERA MANAGER",
                database_name: "object_id",
                database_instance_class: 'cmdb_ci_cloud_database'
            },
            {
                tcp_port: '8091',
                database_type: "COUCHBASE"
            },
            {
                tcp_port: '9042',
                database_type: "DATASTAX CASSANDRA",
                database_type_override: "DATASTAX CASSANDRA (DataDirect)",
                database_instance_class: 'cmdb_ci_cassandra_instance'
            },
            {
                tcp_port: '50000',
                name: 'IBM DB2',
                database_type: "DB2",
                service_name: "db_name",
                database_instance_class: 'cmdb_ci_db_db2_instance'
            },
            {
                tcp_port: '446',
                name: 'IBM DB2 for i',
                database_type: "DB2 FOR i",
                service_name: "db_name",
                database_instance_class: 'cmdb_ci_db_db2_instance'
            },
            {
                tcp_port: '446',
                name: 'IBM DB2 z/OS',
                database_type: "DB2 z/OS",
                service_name: "db_name",
                database_instance_class: 'cmdb_ci_db_db2_instance'
            },
            {
                tcp_port: '27117',
                name: "GBDI",
                database_type: "GBDI"
            },
            {
                tcp_port: '5432',
                name: "Greenplumb DB",
                database_type: "GREENPLUMDB",
                database_name: "instance",
                database_instance_class: 'cmdb_ci_db_postgresql_instance'
            },
            {
                tcp_port: '10000',
                database_type: "HIVE"
            },
            {
                tcp_port: '21000',
                database_type: "IMPALA"
            },
            {
                tcp_port: '1526',
                database_type: "INFORMIX",
                database_name: "database",
                database_instance_class: "cmdb_ci_db_informix_instance"
            },
            {
                tcp_port: '3306',
                name: "MariaDB",
                database_type: "MARIADB",
                database_name: "database",
                service_name: "instance_name",
                database_instance_class: 'cmdb_ci_db_mssql_instance'
            },
            {
                tcp_port: '27017',
                database_type: "MONGODB",
                database_instance_class: 'cmdb_ci_db_mongodb_instance'
            },
            {
                tcp_port: '1433',
                name: "Microsoft SQL Server",
                database_type: "MS SQL SERVER",
                database_type_override: "MS SQL Server",
                database_name: "database",
                service_name: "instance_name",
                database_instance_class: 'cmdb_ci_db_mssql_instance'
            },
            {
                tcp_port: '3306',
                name: "MySQL",
                database_type: "MYSQL",
                database_name: 'data_directory',
                database_instance_class: 'cmdb_ci_db_mysql_instance'
            },
            {
                tcp_port: '7687',
                database_type: "NEO4J"
            },
            {
                tcp_port: '5480',
                database_type: "NETEZZA"
            },
            {
                tcp_port: '1521',
                database_type: "ORACLE",
                database_type_override: "Oracle (DataDirect - Service Name)",
                database_name: "database_name",
                service_name: "sid",
                database_instance_class: 'cmdb_ci_db_ora_instance'
            },
            {
                tcp_port: '3306',
                name: "Percona MySQL",
                database_type: "PERCONA MYSQL",
                database_name: 'data_directory',
                database_instance_class: 'cmdb_ci_db_mysql_instance'
            },
            {
                tcp_port: '5432',
                name: "PostgreSQL",
                database_type: "POSTGRESQL",
                database_name: "instance",
                database_instance_class: 'cmdb_ci_db_postgresql_instance'
            },
            {
                tcp_port: '5439',
                name: "Amazon Redshift",
                database_type: "REDSHIFT"
            },
            {
                tcp_port: '30015',
                name: "SAP HANA",
                database_type: "SAP HANA"
            },
            {
                tcp_port: '443',
                name: "Snowflake Data Cloud",
                database_type: "SNOWFLAKE"
            },
            {
                tcp_port: '1433',
                name: "Azure SQL Database",
                database_type: "SQL DB Azure"
            },
            {
                tcp_port: '4100',
                database_type: "SYBASE",
                database_name: "instance",
                database_instance_class: 'cmdb_ci_db_syb_instance'
            },
            {
                tcp_port: '2638',
                name: "Sybase IQ",
                database_type: "SYBASE IQ",
                database_name: "instance",
                database_instance_class: 'cmdb_ci_db_syb_instance'
            },
            {
                tcp_port: '1025',
                database_type: "TERADATA"
            },
            {
                database_type: "TEXT"
            },
            {
                tcp_port: '20',
                database_type: "TEXT:FTP"
            },
            {
                tcp_port: '80',
                database_type: "TEXT:HTTP"
            },
            {
                tcp_port: '443',
                database_type: "TEXT:HTTPS"
            },
            {
                tcp_port: '445',
                database_type: "TEXT:SAMBA"
            }
        ];

        this._maps_di = {};
        for (var i = 0; i < map.length; i++) {
            var entry = map[i];
            var db_type = entry.database_type;
            if (!entry.database_type_override) {
                entry.database_type_override = db_type;
            }
            if (!entry.database_instance_class) {
                entry.database_instance_class = GuardiumAPI.TABLE_DB;
            }
            if (!entry.name) {
                var arr = entry.database_type.trim().split(' ');
                for (var a = 0; a < arr.length; a++) {
                    arr[a] = arr[a].charAt(0).toUpperCase() + arr[a].substr(1).toLowerCase();
                }
                entry.name = arr.join(' ');
            }
            if (!this._maps_di[db_type]) {
                this._maps_di[db_type] = entry;
            }
        }
    },


    type: 'GuardiumTransformMap'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-22 20:43:44</sys_created_on>
        <sys_id>500f4c9a8735c910387c64280cbb35e7</sys_id>
        <sys_mod_count>31</sys_mod_count>
        <sys_name>GuardiumTransformMap</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_500f4c9a8735c910387c64280cbb35e7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-05 18:01:45</sys_updated_on>
    </sys_script_include>
</record_update>
