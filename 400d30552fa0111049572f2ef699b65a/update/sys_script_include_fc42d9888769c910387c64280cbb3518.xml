<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumExportDatasource</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GuardiumExportDatasource</name>
        <script><![CDATA[var GuardiumExportDatasource = Class.create();
GuardiumExportDatasource.PREFIX = "Export to Guardium: ";

GuardiumExportDatasource.prototype = {
    initialize: function() {
        this.GuardTransform = new GuardiumTransformMap();
        this._initializeTransformCacheDI();
        this._initializeTransformCacheDC();
        this.cleanupRules();
    },

    cleanupRules: function() {
        try {
            // delete all export rules
            g_resp = new GlideRecord(GuardiumAPI.TABLE_EXP_TARGET);
            g_resp.addQuery('fqdn_cm', "=", "");
            g_resp.query();
            while (g_resp.next()) {
                g_resp.setWorkflow(false);
                g_resp.deleteRecord();
                deleted.rule++;
            }
        } catch (e) {}
    },

    /**
     * export database instances and catalogs that match the given rule
     */
    runRule: function(gr_rule) {
        if (!gr_rule || "1" != gr_rule.getValue('active')) {
            GuardiumLog.error(gr_rule ?
                "Selected rule is inactive: " + gr_rule.getValue('name') :
                "Selected rule has been deleted",
                this.type
            );
        }

        // build response
        var response = {};
        var cm_fqdn = gr_rule.getDisplayValue('fqdn_cm');
        // Find matching databases and run
        response[cm_fqdn] = this.exportAllMatchingInstances(gr_rule);
        // Return
        return response;
    },

    /**
     * run on all matching database instance records
     */
    run: function() {
        var total = 0;
        var exported = {};
        var hasRules = false;

        var gr_rule = new GlideRecord(GuardiumAPI.TABLE_EXP_TARGET);
        gr_rule.addActiveQuery();
        gr_rule.orderBy('order');
        gr_rule.query();
        while (gr_rule.next()) {
            hasRules = true;

            // build response
            var cm_fqdn = gr_rule.getDisplayValue('fqdn_cm');
            exported[cm_fqdn] = this.exportAllMatchingInstances(gr_rule);
            total += exported[cm_fqdn];
        }

        if (!total) {
            var msg = hasRules ?
                '\nNo databases matched any "Database Export Targets"' :
                '\nNo conditions defined in "Database Export Targets"';
            GuardiumLog.warn("No databases exported to IBM Guardium." + msg, this.type);
        }

        return exported;
    },

    /**
     * run on single database instance
     */
    runOnce: function(gr_db, isCatalog, action) {
        var cm_sys_id;
        var gr_rule;

        if ('delete' == action && !gr_db) {
            // Not much we can do here ... the database is gone
            return;
        }

        // is this Database Instance already linked to a Guardium data source?
        var gr_ds = this.getGuardiumRecord(gr_db);
        if (gr_ds) {
            cm_sys_id = gr_ds.getValue('fqdn_cm');
        }

        if ('delete' == action) {
            try {
                gr_ds.deleteDatasource();
                return true;
            } catch (e) {
                GuardiumLog.error('', this.type, e);
            }
            return;
        }

        // is this a Catalog?
        if (isCatalog) {
            var db_sys_id = gr_db.getValue('database_instance');
            if (!db_sys_id) {
                var name = gr_db.getDisplayValue(gr_db.getDisplayName());
                throw new Error('Catalog, "' + name + '", is not linked to a database instance.');
            }

            // Catalog will be synched as part of scanning the parent database instance
            gr_db = new GlideRecord('cmdb_ci_db_instance');
            gr_db.get(db_sys_id);
        }

        // match conditions in order to get the rule and export script
        gr_rule = this.matchesCondition(gr_db, cm_sys_id);
        if (gr_rule && !cm_sys_id) {
            cm_sys_id = gr_rule.getValue('fqdn_cm');
        }

        if (gr_rule && cm_sys_id) {
            var gAPI = this._initAPI(cm_sys_id);
            if (!gAPI) return;
            var oSysID = this.exportInstance(gAPI, gr_db, gr_ds, gr_rule);
            return Object.keys(oSysID).length;
        }

        var msg = 'Cancelled due to no matching export conditions.';
        GuardiumLog.warn(msg, this.type);
        return;
    },

    exportAllMatchingInstances: function(gr_rule) {
        var cm_sys_id = gr_rule.getValue('fqdn_cm');
        var exported = 0;
        var matched = {};

        var gAPI = this._initAPI(cm_sys_id);
        if (!gAPI) return exported;

        // run condition rule to see if it matches any database
        GuardiumLog.debug(
            GuardiumExportDatasource.PREFIX +
            gr_rule.getDisplayValue('fqdn_cm') +
            "\n condition: " + gr_rule.getValue('condition_rules'),
            this.type
        );

        var gr_db = new GlideRecord('cmdb_ci_db_instance');
        gr_db.addEncodedQuery(gr_rule.getValue('condition_rules'));
        gr_db.query();
        while (gr_db.next()) {
            var db_sys_id = gr_db.getUniqueValue();

            // do not export the same DB to two or more CM's
            if (matched[db_sys_id]) {
                continue;
            }
            // keep track of exported DBs
            matched[db_sys_id] = true;

            var oSysID = this.exportInstance(gAPI, gr_db, this.getGuardiumRecord(gr_db), gr_rule);
            exported += Object.keys(oSysID).length;
        }
        return exported;
    },

    exportInstance: function(gAPI, gr_di, gr_ds, gr_rule) {
        var isUpdate = !!gr_ds;
        var response = {};

        // open record with actual table to get all the necessary fields
        var gr_db = gr_di;
        var table = gr_di.getRecordClassName();
        if ('cmdb_ci_db_instance' != table) {
            try {
                gr_db = new GlideRecord(table);
                if (!gr_db.get(gr_di.getUniqueValue())) {
                    gr_db = gr_di;
                }
            } catch (errDi) {
                GuardiumLog.warn('Table access error: ' + table, this.type, errDi);
            }
        }

        // Transform to Guardium Datasource
        var ds_array = this.transformInstance(gr_db, gr_ds, false);
        if (!ds_array || 0 == ds_array.length) return {};

        for (var d = 0; d < ds_array.length; d++) {
            var ds_orig = ds_array[d];

            // Let customer modify the record before exporting to Guardium
            var ds_custom = this.runScript(gr_db, ds_orig, gr_rule);
            ds_orig = ds_custom || ds_orig;

            // Process Database Catalogs even if Database Instance fails
            var oSysID = this.exportCatalogs(gAPI, gr_db, ds_orig, gr_rule);

            if (!Object.keys(oSysID).length) {
                // create linked ServiceNow record 
                gr_ds = this.createOrUpdateGuardiumRecord(
                    gAPI, gr_db.getTableName(), gr_db.getUniqueValue(), ds_orig, gr_ds);

                if (gr_ds) {
                    oSysID = {};
                    oSysID[gr_ds.getUniqueValue()] = true;

                    // send to Guardium by queuing the DS
                    GuardiumLog.debug(GuardiumExportDatasource.PREFIX +
                        'Queue Database Instance "' + gr_db.getDisplayValue() + '"', this.type);
                }
            }

            // collect all datasources created in one response object
            for (var id in oSysID) {
                response[id] = oSysID[id];
            }
        }
        return response;
    },

    exportCatalogs: function(gAPI, gr_db, ds_db, gr_rule) {
        var oSysID = {};
        var oInfo = {
            di_name: gr_db.getDisplayValue(),
            di_sys_id: gr_db.getUniqueValue()
        };
        var gr_dc = new GlideRecord('cmdb_ci_db_catalog');
        gr_dc.addQuery('database_instance', '=', gr_db.getUniqueValue());
        gr_dc.query();
        while (gr_dc.next()) {
            // Get the record with its specified table to get all the extra fields
            var gr_actual = gr_dc;
            var table = gr_dc.getRecordClassName();
            var dc_sys_id = gr_dc.getUniqueValue();
            oInfo['dc_name'] = gr_dc.getDisplayValue();
            oInfo['dc_sys_id'] = dc_sys_id;

            GuardiumLog.debug(GuardiumExportDatasource.PREFIX +
                'Queue Database Catalog "' + gr_dc.getDisplayValue() + '"', this.type, oInfo);

            if ('cmdb_ci_db_catalog' != table) {
                try {
                    gr_actual = new GlideRecord(table);
                    if (!gr_actual.get(dc_sys_id)) {
                        gr_actual = gr_dc;
                    }
                } catch (errDc) {
                    GuardiumLog.warn('Table access error: ' + table, this.type, errDc);
                }
            }
            var ds_sys_id = this.exportCatalog(gAPI, gr_db, ds_db, gr_actual, gr_rule);
            if (ds_sys_id) {
                oSysID[ds_sys_id] = true;
            }
        }
        return oSysID;
    },

    exportCatalog: function(gAPI, gr_db, ds_db, gr_dc, gr_rule) {
        // check for presence of Guardium record
        var gr_ds = this.getGuardiumRecord(gr_dc);
        var isUpdate = !!gr_ds;

        var ds_orig = this.transformCatalog(gr_db, ds_db, gr_dc, gr_ds, true);
        if (!ds_orig) return '';

        // Let customer modify the record before exporting to Guardium
        var ds_custom = this.runScript(gr_dc, ds_orig, gr_rule);
        ds_orig = ds_custom || ds_orig;

        // create linked ServiceNow record 
        gr_ds = this.createOrUpdateGuardiumRecord(
            gAPI, gr_db.getTableName(), gr_dc.getUniqueValue(), ds_orig, gr_ds);

        // send to Guardium by queuing the DS
        return gr_ds.getUniqueValue();
    },

    process: function(gr_ds, cm_sys_id, isDelete) {
        if (!cm_sys_id) {
            cm_sys_id = gr_ds.getValue('fqdn_cm');
        }
        if (!cm_sys_id) {
            throw new Error('Invalid central manager');
        }

        var gAPI = this._connectToCM(cm_sys_id);
        if (!gAPI) return;

        if (isDelete) {
            return this.deleteDatasource(gAPI, gr_ds);
        }

        var sys_id = gr_ds.getValue('database_instance');
        if (!sys_id) {
            // Data source is not linked to ServiceNow, ignore
            gr_ds.setValue('action', 'synchronized');
            gr_ds.setWorkflow(false);
            gr_ds.update();
            return false;
        }

        var ds_json = this.transformDatasource(gr_ds);
        var ds_id = this.exportDatasource(
            gAPI, ds_json, gr_ds.getValue('custom_fields'));
        // update ServiceNow record 
        gr_ds.setValue('datasource_id', (ds_json.id || ds_id).toFixed(0));
        gr_ds.setValue('source_id', this.getUniqueID(ds_json, gAPI.cm.sys_id));
        gr_ds.setValue('action', 'synchronized');
        gr_ds.setWorkflow(false);
        gr_ds.update();
        return ds_id;
    },

    deleteDatasource: function(gAPI, gr_ds) {
        // Delete the record
        gAPI.del('delete_datasource_by_id', {
            id: gr_ds.getValue('datasource_id')
        });

        // Success!
        GuardiumLog.debug(GuardiumExportDatasource.PREFIX +
            'Deleted Data Source "' +
            gr_ds.getDisplayValue(gr_ds.getDisplayName()) + '" from ' + gAPI.cm.name, this.type);

        // Delete datasource from ServiceNow
        gr_ds.setValue('status', 'Deprecated');
        gr_ds.deleteRecord();
        return true;
    },

    exportDatasource: function(gAPI, ds_orig, custom_fields) {
        var isUpdate = !!ds_orig.id; // true if record has an id
        var response = null;
        var err = null;

        // Fix up user, password, and other properties if necessary
        var ds = this.postTransform(ds_orig, isUpdate);

        // export to Guardium
        GuardiumLog.debug(GuardiumExportDatasource.PREFIX +
            (isUpdate ? 'Update' : 'Create') +
            ' Data Source "' + (ds['name'] || ds['newName']) + '" on ' + gAPI.cm.name,
            this.type, this.scrubDatasource(ds)
        );

        try {
            response = isUpdate ?
                gAPI.put(ds.id ? 'update_datasource_by_id' : 'update_datasource_by_name', ds) :
                gAPI.post('datasource', ds);
        } catch (e) {
            if (isUpdate && e.code && (e.message || e).includes("doesn't exist")) {
                // Record might have been deleted on Guardium, try POST
                isUpdate = false;
                ds = this.postTransform(ds_orig, isUpdate);
                GuardiumLog.debug(GuardiumExportDatasource.PREFIX +
                    'Error: ' + e.message + '\nTry: ' +
                    (isUpdate ? 'Update' : 'Create') +
                    ' Data Source "' + (ds['name'] || ds['newName']) + '" on ' + gAPI.cm.name,
                    this.type, this.scrubDatasource(ds)
                );
                try {
                    response = gAPI.post('datasource', ds);
                } catch (e1) {
                    err = e1;
                }
            } else
            if (!isUpdate && e.code && (e.message || e).includes("already exists")) {
                // Record might have been deleted in ServiceNow, try PUT
                isUpdate = true;
                ds = this.postTransform(ds_orig, isUpdate);
                GuardiumLog.debug(GuardiumExportDatasource.PREFIX +
                    'Error: ' + e.message + '\nTry: ' +
                    (isUpdate ? 'Update' : 'Create') +
                    ' Data Source "' + (ds['name'] || ds['newName']) + '" on ' + gAPI.cm.name,
                    this.type, this.scrubDatasource(ds)
                );
                try {
                    delete ds.id;
                } catch (e3) {}
                try {
                    response = gAPI.put('update_datasource_by_name', ds);
                } catch (e2) {
                    err = e2;
                }
            } else {
                err = e;
            }
        }

        if (response && response.data) {
            // Success
            ds_orig.id = this.toInteger(response.data['ID'] || ds_orig.id);
            if (!ds_orig.id) {
                GuardiumLog.warn(
                    'Invalid response saving datasource - "' + gr_db.getValue('name') + '"',
                    this.type,
                    response.body
                );
            }

            // synchronize custom_fields
            this.synchronizeCustomFields(gAPI, ds_orig.name, custom_fields);

            return ds_orig.id;

        } else {
            // Error from Guardium
            var errMsg = 'Error "' + ds_orig['name'] + '"' + (response ? "\n" + response.body : '');
            GuardiumLog.error(errMsg, this.type, err);
            throw new Error(errMsg + '\n' + err.message);
        }
    },

    transformDatasource: function(gr_ds, class_name, tcp_port) {
        if (!gr_ds) return {};
        var props = this.getTransformProperties(
            gr_ds.getValue('datasource_type'), class_name, gr_ds.getValue('tcp_port') || tcp_port);

        var dbType = props['database_type'] || '';
        var dbTypeExport = props['database_type_override'] || dbType;
        if (!dbType) {
            throw new Error(
                'Invalid record\nData Source Type: ' + gr_ds.getValue('database_type') +
                '\nData Source Name: ' + gr_ds.getDisplayValue()
            );
        }

        var ds_id = gr_ds.getValue('datasource_id') || '';
        if (this.isEmpty(ds_id)) ds_id = '';

        var ds = {
            "conProperty": gr_ds.getValue('attributes') || '',
            "customProps": gr_ds.getValue('custom_fields') || '',
            "customURL": gr_ds.getValue('custom_url') || '',
            "dbName": gr_ds.getValue('database_name') || '',
            "description": gr_ds.getValue('datasource_description') || '',
            "host": gr_ds.getValue('fqdn') || '',
            "id": this.toInteger(ds_id),
            "name": gr_ds.getValue('name') || '',
            "newName": gr_ds.getValue('name') || '',
            "password": gr_ds.getValue('password') || '',
            "port": gr_ds.getValue('tcp_port') || '',
            "serviceName": gr_ds.getValue('service_name') || '',
            "type": dbTypeExport,
            "user": gr_ds.getValue('user_name') || ''
        };

        var extra = gr_ds.getValue('extra_fields') || '';
        if (extra) {
            try {
                // add properties saved in protected field
                var oJson = JSON.parse(extra);
                for (var f in oJson) {
                    ds[f] = oJson[f];
                }
            } catch (e) {
                extra = '';
            }

        }
        if (!extra) {
            // initialize
            for (var p in GuardiumAPI.DS_EXTRA_FIELDS_POST) {
                ds[p] = GuardiumAPI.DS_EXTRA_FIELDS_POST[p];
            }
        }
        return ds;
    },

    scrubDatasource: function(ds_orig) {
        // hide sensitive fields
        var ds = {};
        var sensitive = GuardiumAPI.DS_SENSITIVE_FIELDS.join(',');
        for (var p in ds_orig) {
            if (sensitive.includes(p)) {
                // not sure if String.padStart() exists in ES5 ... use alternate solution
                ds[p] = '****************************************'.substring(0, ds_orig[p].length);
            } else {
                ds[p] = ds_orig[p];
            }
        }
        return ds;
    },

    synchronizeCustomFields: function(gAPI, ds_name, custom_fields) {
        if (!custom_fields) return;
        if (custom_fields) return;
        try {
            gAPI.post('datasource_custom_prop_add', {
                name: ds_name,
                customProps: custom_fields
            });
        } catch (e) {
            GuardiumLog.error('Synchronize Custom Fields', this.type, e);
        }
    },

    hasGuardiumRecord: function(gr_db) {
        return !!this.getGuardiumRecord(gr_db);
    },

    getGuardiumRecord: function(gr_db) {
        if (gr_db) {
            var gr_gdp = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
            gr_gdp.addQuery('database_instance', '=', gr_db.getUniqueValue());
            gr_gdp.addQuery('status', '!=', 'Deprecated');
            gr_gdp.orderBy('sys_created_on'); // oldest first
            gr_gdp.setLimit(1);
            gr_gdp.query();
            if (gr_gdp.next()) {
                return gr_gdp;
            }
        }
        return null;
    },

    toInteger: function(n) {
        return (n - 0).toFixed(0) - 0;
    },

    getUniqueID: function(rec, cm_sys_id) {
        return [
            cm_sys_id, rec.host,
            rec.port, rec.serviceName,
            rec.dbName, rec.user
        ].join(':');
    },

    createOrUpdateGuardiumRecord: function(gAPI, ci_table, ci_sys_id, ds, gr_ds) {
        var props = this.getTransformProperties(null, ci_table, ds.port);
        var isNew = false;
        var gr_gdp = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
        if (!gr_ds || !gr_gdp.get(gr_ds.getUniqueValue())) {
            gr_gdp.initialize();
            isNew = true;
        }

        // ServiceNow is source of truth
        gr_gdp.setValue('fqdn_cm', gAPI.cm.sys_id);
        gr_gdp.setValue('name', ds.name);
        gr_gdp.setValue('fqdn', ds.host);
        gr_gdp.setValue('tcp_port', ds.port);
        gr_gdp.setValue('datasource_description', ds.description);
        gr_gdp.setValue('datasource_id', '' + (ds.id || ''));
        gr_gdp.setValue('datasource_type', (props['database_type'] || '').trim());
        gr_gdp.setValue('database_instance', ci_sys_id);
        gr_gdp.setValue('database_instance_class', (props['database_instance_class'] || 'cmdb_ci_db_instance'));
        gr_gdp.setValue('database_name', ds.dbName);
        gr_gdp.setValue('service_name', ds.serviceName);
        gr_gdp.setValue('custom_fields', ds.customProps);
        gr_gdp.setValue('custom_url', ds.customURL);
        gr_gdp.setValue('user_name', ds.user);
        gr_gdp.setValue('password', ds.password);
        gr_gdp.setValue('action', 'export');
        gr_gdp.setValue('source_id', this.getUniqueID(ds, gAPI.cm.sys_id));

        // add other fields to protected extra_fields 
        var oJson = {};
        for (var p in GuardiumAPI.DS_EXTRA_FIELDS_POST) {
            oJson[p] = ds[p] || '';
        }
        gr_gdp.setValue('extra_fields', JSON.stringify(oJson));

        if (isNew) {
            gr_gdp.insert();
        } else {
            gr_gdp.update();
        }
        return gr_gdp;
    },

    matchesCondition: function(gr_db, cm_sys_id) {
        // returns the rule that matches
        var gr_rule = new GlideRecord(GuardiumAPI.TABLE_EXP_TARGET);
        gr_rule.addActiveQuery();
        if (cm_sys_id) {
            gr_rule.addQuery('fqdn_cm', '=', cm_sys_id);
        }
        gr_rule.orderBy('order');
        gr_rule.query();
        while (gr_rule.next()) {
            // run condition rule to see if it matches the database
            var gr_rec = new GlideRecord('cmdb_ci_db_instance');
            gr_rec.addQuery('sys_id', '=', gr_db.getUniqueValue());
            gr_rec.addEncodedQuery(gr_rule.getValue('condition_rules'));
            gr_rec.setLimit(1);
            gr_rec.query();
            if (gr_rec.next()) {
                GuardiumLog.debug(GuardiumExportDatasource.PREFIX +
                    'Found database export rule for ' + gr_db.getDisplayValue(gr_db.getDisplayName()),
                    this.type,
                    gr_rule.getDisplayValue(gr_rule.getDisplayName())
                );
                return gr_rule;
            }
        }

        // no matching rule
        GuardiumLog.debug(GuardiumExportDatasource.PREFIX +
            'Could not find a database export rule for ' + gr_db.getDisplayValue(gr_db.getDisplayName()),
            this.type,
            'No matching rule!'
        );
        return null;
    },

    runScript: function(gr_db, ds, gr_rule) {
        // Run any scripts created by the customer
        try {
            var returnObj = {};
            var evaluator = new GlideScopedEvaluator();
            evaluator.putVariable("database", gr_db);
            evaluator.putVariable("guardium_export", ds);
            evaluator.putVariable("returnObj", returnObj);
            return evaluator.evaluateScript(gr_rule, "database_export_script");
        } catch (e) {
            GuardiumLog.error('', this.type, e);
        }
        return ds;
    },

    postTransform: function(ds_orig, isUpdate) {
        // Check for empty user and password ... The Guardium API requires a value
        if (this.isFalse(ds_orig['useExternalPassword']) &&
            this.isFalse(ds_orig['useKerberos']) &&
            this.isFalse(ds_orig['useLDAP']) && !ds_orig['password']) {
            ds_orig['password'] = '*empty*';
        }
        if (this.isFalse(ds_orig['useExternalPassword']) &&
            this.isFalse(ds_orig['useKerberos']) &&
            this.isFalse(ds_orig['useLDAP']) && !ds_orig['user']) {
            ds_orig['user'] = '*empty*';
        }

        // Make sure id is an integer, not a string
        if (ds_orig['id']) {
            ds_orig.id = this.toInteger(ds_orig.id);
        }

        var ds = {}; // create a new copy before deleting anything

        // Do not pass NULL, pass EMPTY string instead
        for (var p in ds_orig) {
            ds[p] = ds_orig[p] || '';
        }

        // delete customProps as an error will occur if passed to create or update datasource
        try {
            delete ds.customProps;
        } catch (e) {}

        if (isUpdate) {
            // delete anything that hasn't changed from default
            for (var f in GuardiumAPI.DS_EXTRA_FIELDS_POST) {
                if (ds[f] == GuardiumAPI.DS_EXTRA_FIELDS_POST[f]) {
                    try {
                        delete ds[f];
                    } catch (e) {}
                }
            }

            // remove any members that cannot be in "update"
            try {
                delete ds["application"];
            } catch (e) {}
            try {
                delete ds["compatibilityMode"];
            } catch (e) {}
            try {
                delete ds["type"];
            } catch (e) {}
            try {
                if (ds["id"]) {
                    if (!ds["newName"]) ds["newName"] = ds["name"];
                    delete ds["name"];
                } else {
                    delete ds["id"]; // cannot be 0 or empty
                }
            } catch (e) {}

            // Remove any empty user/password on update
            if (this.isEmpty(ds['user'])) {
                try {
                    delete ds['user'];
                } catch (e) {}
            }
            if (this.isEmpty(ds['password'])) {
                try {
                    delete ds['password'];
                } catch (e) {}
            }

        } else {
            // remove any members that cannot be in "insert"
            try {
                delete ds["id"];
            } catch (e) {}
            try {
                delete ds["newName"];
            } catch (e) {}
        }
        return ds;
    },

    isFalse: function(val) {
        return (!val || "0" == val || "false" == val.toLowerCase());
    },

    isEmpty: function(val) {
        return (!val || "0" == val || "undefined" == val.toLowerCase() ||
            "null" == val.toLowerCase() || '*empty*' == val.toLowerCase());
    },

    getHostFromRelated: function(di_sys_id) {
        var gr_rel = new GlideRecord('cmdb_rel_ci');
        gr_rel.addQuery('parent', '=', di_sys_id);
        gr_rel.addQuery('type', '=', '60bc4e22c0a8010e01f074cbe6bd73c3'); // RunsOn::Runs
        gr_rel.setLimit(1);
        gr_rel.query();
        if (gr_rel.next()) {
            var gr_srv = new GlideRecord('cmdb_ci');
            if (gr_srv.get(gr_rel.getValue('child'))) {
                return gr_srv.getValue('fqdn') || gr_srv.getValue('ip_address') || '';
            }
        }
        return '';
    },

    transformInstance: function(gr_db, gr_gdp, generateUniqueName) {
        var response = [];
        // since there is no Guardium API to find a db by fqdn and port,
        //  assume that the Guardium DB's have already been pushed to ServiceNow
        var class_name = gr_db.getValue('sys_class_name');
        // there could be multiple ports specified on the database instance record
        var tcp_ports = (gr_db.getValue('tcp_port') || '').split(',');

        for (var t = 0; t < tcp_ports.length; t++) {
            var tcp_port = tcp_ports[t];

            // get the Guardium Datasource record associated with the instance
            //  returns {} if gr_gdp is null
            var ds = this.transformDatasource(gr_gdp, class_name, tcp_port);

            // A database that might be able to export to Guardium
            var props = this.getTransformProperties(ds.type, class_name, tcp_port);

            // create in Guardium
            ds.conProperty = gr_db.getValue('running_process_key_parameters') || ds.conProperty || '';
            ds.customProps = gr_db.getValue('attributes') || ds.customProps || '';
            ds.customURL = gr_db.getValue('running_process_command') || ds.customURL || '';
            ds.dbName = (props['database_name'] ? gr_db.getValue(props['database_name']) : '') || ds.dbName || '';
            ds.description = gr_db.getValue('short_description') || ds.description || '';
            ds.host = gr_db.getValue('fqdn') || gr_db.getValue('ip_address') ||
                ds.host || this.getHostFromRelated(gr_db.getUniqueValue());
            ds.name = ds.name || gr_db.getValue('name') || '';
            ds.password = ds.password || '';
            ds.port = tcp_port || props['tcp_port'] || '';
            ds.serviceName =
                (props['service_name'] ? gr_db.getValue(props['service_name']) : '') || ds.serviceName || '';
            ds.type = ds.type || props['database_type_override'] || props['database_type'] || '';
            ds.user = ds.user || '';

            // add all other default properties
            for (var p in GuardiumAPI.DS_EXTRA_FIELDS_POST) {
                ds[p] = GuardiumAPI.DS_EXTRA_FIELDS_POST[p];
            }

            // Build unique name
            var asName = [];
            if (ds['host']) asName.push(ds['host']);
            if (ds['port']) asName.push(ds['port']);
            if (ds['dbName']) asName.push(ds['dbName']);
            if (ds['serviceName']) asName.push(ds['serviceName']);
            if (ds['user']) asName.push(ds['user']);

            // Unique name
            if (generateUniqueName || !ds["name"]) {
                var title = '';
                for (var i = 0; i < asName.length; i++) {
                    if (title.toLowerCase().includes(asName[i].toLowerCase())) {
                        continue;
                    }
                    title = title + '-' + asName[i];
                }
                if (0 == title.indexOf('-')) {
                    title = title.substring(1);
                }
                ds['newName'] = title;
            }
            ds['name'] = ds['name'] || ds['newName'];

            // push new ds
            response.push(ds);
        }

        // Return formatted JSON object
        return response;
    },

    transformCatalog: function(gr_db, ds_db, gr_dc, gr_gdp, generateUniqueName) {
        // base the Guardium datasource on the ServiceNow Database Instance
        var ds = {};
        for (var p in ds_db) {
            ds[p] = ds_db[p];
        }

        // update Guardium datasource with ServiceNow Database Catalog values
        ds["conProperty"] = gr_dc.getValue('running_process_key_parameters');
        ds["customProps"] = gr_dc.getValue('attributes');
        ds["customURL"] = gr_dc.getValue('running_process_command');
        ds["description"] = gr_dc.getValue('description');

        if (ds.id) {
            generateUniqueName = false;
        }

        // Database name is the Catalog name
        ds["dbName"] = gr_dc.getValue('name') || '';

        // Restore the name assigned by Guardium
        if (gr_gdp) {
            ds['name'] = gr_gdp.getValue('name');
        } else {
            ds['name'] = '';
        }

        // Build a unique name
        var asName = [];
        if (ds['host']) asName.push(ds['host']);
        if (ds['port']) asName.push(ds['port']);
        if (ds['dbName']) asName.push(ds['dbName']);
        if (ds['serviceName']) asName.push(ds['serviceName']);
        if (ds['user']) asName.push(ds['user']);

        // Unique name
        if (generateUniqueName || !ds['name']) {
            var title = '';
            for (var i = 0; i < asName.length; i++) {
                if (title.toLowerCase().includes(asName[i].toLowerCase())) {
                    continue;
                }
                title = title + '-' + asName[i];
            }
            if (0 == title.indexOf('-')) {
                title = title.substring(1);
            }
            ds['newName'] = title;
        }
        ds['name'] = ds['name'] || ds['newName'];

        // Return formatted JSON object
        return ds;
    },

    _initAPI: function(cm_sys_id) {
        if (!cm_sys_id) {
            // get first active CM
            var gr_cm = GuardiumAPI.getFirstActiveCM();
            if (gr_cm) {
                cm_sys_id = gr_cm.getUniqueValue();
            }
        }
        if (!cm_sys_id) {
            GuardiumLog.error("No active Central Manager defined", this.type);
            return null;
        }

        return new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm_sys_id, true));
    },

    _connectToCM: function(cm_sys_id) {
        var gAPI;
        try {
            // establish connection to the chosen CM
            gAPI = this._initAPI(cm_sys_id);
            gAPI.authenticate();
            return gAPI;
        } catch (errAuth) {
            throw new Error(
                "Unable to authenticate with " + (gAPI ? gAPI.cm.name : cm_sys_id) + '\n' + errAuth.message
            );
        }
    },

    getTransformProperties: function(ds_type, class_name, tcp_port) {
        var props;
        if (ds_type) {
            props = this._lookupByType[ds_type];
        }
        if (!props && '' != class_name) {
            props = this._lookupByClass[class_name];
        }
        if (!props || 'cmdb_ci_db_instance' == props['database_instance_class']) {
            props = this._lookupByPort[tcp_port];
        }
        return props || {};
    },

    _initializeTransformCacheDI: function() {
        this._lookupByClass = {};
        this._lookupByType = {};
        this._lookupByPort = {};

        var map = this.GuardTransform.getMapDI();
        for (var db_type in map) {
            var db_type_lower = db_type.toLowerCase();
            var entry = map[db_type_lower];
            var class_name = entry['database_instance_class'];
            var tcp_port = entry['tcp_port'] || '';

            if (!this._lookupByClass[class_name] || entry.order < this._lookupByClass[class_name].order) {
                this._lookupByClass[class_name] = entry;
            }
            if (!this._lookupByType[db_type_lower] || entry.order < this._lookupByType[db_type_lower].order) {
                this._lookupByType[db_type_lower] = entry;
            }
            if (!this._lookupByPort[tcp_port] || entry.order < this._lookupByPort[tcp_port].order) {
                this._lookupByPort[tcp_port] = entry;
            }
        }
    },

    getCatalogFieldMap: function(dbType) {
        return this._catalogByType[dbType] || this._catalogByType['*'];
    },

    _initializeTransformCacheDC: function() {
        this._catalogByType = this.GuardTransform.getMapDC();
    },

    type: 'GuardiumExportDatasource'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-03 18:14:34</sys_created_on>
        <sys_id>fc42d9888769c910387c64280cbb3518</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>GuardiumExportDatasource</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_fc42d9888769c910387c64280cbb3518</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-04 16:41:41</sys_updated_on>
    </sys_script_include>
</record_update>
