<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4919d5989792155022fa1c800153af56</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sn_sec_cmn_ci_lookup_rule"&gt;
    &lt;sn_sec_cmn_ci_lookup_rule action="INSERT_OR_UPDATE"&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;condition/&gt;
        &lt;description&gt;IBM Guardium data is added to the source_data field of a Discovered Item as JSON.  This JSON can be used to match with Database Instance and Database Catalog entries.&lt;/description&gt;
        &lt;lookup_script/&gt;
        &lt;method&gt;script&lt;/method&gt;
        &lt;name&gt;IBM Guardium Lookup Rule&lt;/name&gt;
        &lt;order&gt;216&lt;/order&gt;
        &lt;reapply&gt;false&lt;/reapply&gt;
        &lt;reapply_version&gt;0&lt;/reapply_version&gt;
        &lt;script&gt;&lt;![CDATA[var IBMGuardiumCILookupRule = Class.create();

IBMGuardiumCILookupRule.ipv4or6 = /((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))/;
IBMGuardiumCILookupRule.ipv4 = /^((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])$/;
IBMGuardiumCILookupRule.prefix = 'IBM Guardium: ';

IBMGuardiumCILookupRule.prototype = {
    initialize: function(sourceValue, sourcePayload) {
        // Ensure JSON data is passed
        try {
            if (!sourcePayload) sourcePayload = sourceValue;
            if ("string" == typeof(sourcePayload)) sourcePayload = JSON.parse(sourceValue);
            this.payload = sourcePayload;
        } catch (e) {
            var errMsg = 'Unable to parse Discovered Item payload.';
            gs.error(IBMGuardiumCILookupRule.prefix + errMsg, sourceValue);
        }
    },

    generateQuery: function() {
        var oMetadata = {
            target_fqdn: IBMGuardiumCILookupRule.ipv4or6.test(this.payload['fqdn']) ? 'ip_address' : 'fqdn',
            target_service_name: this.payload['target_service_name'],
            target_database_name: this.payload['target_database_name']
        };

        var sys_class_name = this.payload['database_instance_class'] || this.payload['target_class'] || 'cmdb_ci_db_instance';
        var oQuery = {
            'sys_class_name': sys_class_name
        };
        oQuery[oMetadata['target_fqdn']] = this.payload['fqdn'];
        oQuery['tcp_port'] = this.payload['tcp_port'];
        if (this.payload['service_name'] &amp;&amp; this.payload['target_service_name']) {
            oQuery[this.payload['target_service_name']] = this.payload['service_name'];
        }
        if (this.payload['database_name'] &amp;&amp; this.payload['target_database_name']) {
            oQuery[this.payload['target_database_name']] = this.payload['database_name'];
        }
        oMetadata['query'] = oQuery;
        return oMetadata;
    },

    findMatchingCI: function(oQuery, asQueryProps) {
        var aoJson = [];
        var asInfo = [
            'sys_class_name=' + oQuery.sys_class_name
        ];
        var gr = new GlideRecord(oQuery.sys_class_name);
        for (var i = 0; i &lt; asQueryProps.length; i++) {
            var prop = asQueryProps[i];
            gr.addQuery(prop, oQuery[prop]);
            asInfo.push(prop + '=' + oQuery[prop]);
        }
        gr.setLimit(1);
        gr.query();
        if (gr.next()) {
            aoJson.push({
                name: gr.getDisplayValue(),
                sys_id: gr.getUniqueValue(),
                sys_class_name: gr.getTableName()
            });
        }

        // validate
        if (0 == aoJson.length) {
            gs.info(IBMGuardiumCILookupRule.prefix +
                'No records found where: ' + asInfo.join(' AND ')
            );
        }

        // return result
        return aoJson;
    },

    findMatchingCatalog: function(di_sys_id, database_name) {
        // It is assumed that Discovery will create a catalog item for every database type
        if (database_name) {
            var gr_dc = new GlideRecord('cmdb_ci_db_catalog');
            if (gr_dc) {
                gr_dc.addQuery('database_instance', '=', di_sys_id);
                gr_dc.addQuery('name', '=', database_name);
                gr_dc.setLimit(1);
                gr_dc.query();
                if (gr_dc.next()) {
                    return gr_dc;
                }
            }
        }
        return null;
    },

    getRelationships: function(returnAttr, oQuery) {
        var aoJson = [];

        // Find relationships
        // ServiceNow reverses the expected parent::child relationship
        // * (parent) Database Instance RunsOn (child) Server
        var gr_rel = new GlideRecord('cmdb_rel_ci');
        for (var p in oQuery) {
            gr_rel.addQuery(p, '=', oQuery[p]);
        }
        gr_rel.query();
        while (gr_rel.next()) {
            gs.info(IBMGuardiumCILookupRule.prefix + 'Relationship' +
                '\nParent: ' + gr_rel.getDisplayValue('parent') +
                '\nType: ' + gr_rel.getDisplayValue('type') +
                '\nChild: ' + gr_rel.getDisplayValue('child')
            );

            // Get more information about the related record
            var gr = new GlideRecord('cmdb_ci');
            if (gr.get(gr_rel.getValue(returnAttr))) {
                aoJson.push({
                    name: gr.getDisplayValue(),
                    sys_id: gr.getUniqueValue(),
                    sys_class_name: gr.getTableName()
                });
            }
        }

        // return result
        return aoJson;
    },

    run: function() {
        if (!this.payload) {
            gs.error(IBMGuardiumCILookupRule.prefix + 'Payload is empty. Exiting.' + '\n' + this.payload);
            return null;
        }

        // Display Query
        var oQuery = this.generateQuery();
        gs.info(IBMGuardiumCILookupRule.prefix + 'Find Database Instance or Catalog:\n' + JSON.stringify(oQuery.query));

        // First see if there are any direct matchines to Database Instance
        var aoJsonCI = [];
        try {
            aoJsonCI = this.findMatchingCI(oQuery.query, [oQuery.target_fqdn, 'tcp_port', oQuery.target_service_name]);
        } catch (e) {
            gs.error(IBMGuardiumCILookupRule.prefix + e.message + '\n' + e.stack);
        }

        if (0 == aoJsonCI.length) {
            // Example: 
            // * There are 5 Oracle and 5 MySQL Database Instances running on Server X
            // * Get Server X by FQDN
            // * Get Related DI
            // * Filter DI by Class and Service Name
            try {
                // Find server records matching given FQDN
                var oCmdbQuery = {
                    'sys_class_name': 'cmdb_ci'
                };
                oCmdbQuery[oQuery.target_fqdn] = this.payload['fqdn'];
                var aoCmdbCI = this.findMatchingCI(oCmdbQuery, [oQuery.target_fqdn]);

                // Find related records (hopefully Database Instances)
                var aoRelated = [];
                for (var cc = 0; cc &lt; aoCmdbCI.length; cc++) {
                    aoRelated = aoRelated.concat(
                        this.getRelationships(
                            'parent', {
                                child: aoCmdbCI[cc].sys_id,
                                type: '60bc4e22c0a8010e01f074cbe6bd73c3'
                            } // RunsOn::Runs
                        )
                    );
                }

                // Filter related records by class
                var aoClassMatch = [];
                for (var r = 0; r &lt; aoRelated.length; r++) {
                    if (oQuery.sys_class_name == aoRelated[r].sys_class_name) {
                        aoClassMatch.push(aoRelated[r]);
                    }
                }

                // Filter remaining records by service_name
                var aoServiceMatch = [];
                for (var cm = 0; cm &lt; aoClassMatch.length; cm++) {
                    var gr_cm = new GlideRecord(aoClassMatch[cm].sys_class_name);
                    if (gr_cm.get(aoClassMatch[cm].sys_id)) {
                        if (this.payload['service_name']) {
                            if (this.payload['service_name'] == gr_cm.getValue(oQuery.target_service_name)) {
                                aoServiceMatch.push(aoClassMatch[cm]);
                            }
                        } else {
                            if (oQuery.query.tcp_port == gr_cm.getValue('tcp_port')) {
                                aoServiceMatch.push(aoClassMatch[cm]);
                            }
                        }
                    }
                }

                // Process filtered collection below
                aoJsonCI = aoServiceMatch.length &gt; 0 ? aoServiceMatch : aoClassMatch;

            } catch (e) {
                gs.error(IBMGuardiumCILookupRule.prefix + e.message + '\n' + e.stack);
            }
        }

        // Final Step: find the linked catalog entry
        if (this.payload['database_name']) {
            for (var j = 0; j &lt; aoJsonCI.length; j++) {
                var gr_dc = this.findMatchingCatalog(aoJsonCI[j].sys_id, this.payload['database_name']);
                if (gr_dc) {
                    var oInfo = {
                        database_instance: aoJsonCI[j],
                        name: this.payload['database_name'],
                        sys_id: gr_dc.getUniqueValue(),
                    };
                    gs.info(
                        IBMGuardiumCILookupRule.prefix + 'Matched Database Catalog\n' + JSON.stringify(oInfo)
                    );
                    return gr_dc.getUniqueValue();
                }
            }

            // if this point is reached, there is no matching catalog, try matching with DI catalog field
            for (var jj = 0; jj &lt; aoJsonCI.length; jj++) {
                var gr_di = new GlideRecord(aoJsonCI[jj].sys_class_name);
                if (gr_di.get(aoJsonCI[jj].sys_id)) {
                    if (this.payload['database_name'] == gr_di.getValue(oQuery.target_database_name)) {
                        gs.info(
                            IBMGuardiumCILookupRule.prefix + 'Matched Database Instance\n' + JSON.stringify(aoJsonCI[jj])
                        );
                        return gr_di.getUniqueValue();
                    }
                }
            }
        }

        // assume the first one matches FQDN, PORT, DB_TYPE, and SERVICE_NAME
        //  since there is no value for DATABASE_NAME
        if (aoJsonCI.length &gt; 0) {
            gs.info(
                IBMGuardiumCILookupRule.prefix + 'Possible Matched Database Instances:\n' + JSON.stringify(aoJsonCI)
            );
            return aoJsonCI[0].sys_id;
        }

        gs.warn(IBMGuardiumCILookupRule.prefix + 'Unmatched Database Instance or Catalog:\n' + JSON.stringify(asQuery));
        return null;
    },

    type: 'IBMGuardiumCILookupRule'
};

(function process(rule, sourceValue, sourcePayload) {
    /*********************************
     * CI Lookup Rule Script
     * 
     * Available variables:
     * - rule:          Reference to the lookup rule that is being evaluated
     * - sourceValue:   The value of the source field from incoming data that is used for lookup
     * - sourcePayload: All the fields from incoming data that can be used for matching CI 
     *
     * Return either:
     * - the sysid of the CI that was matched by the rule
     * - null if there were no CI records that matched
     **********************************/

    var result = null;
    try {
        // Find cmdb_ci record by matching: FQDN, TCP_PORT, DB_TYPE, DB_NAME, SERVICE_NAME
        result = new IBMGuardiumCILookupRule(sourceValue, sourcePayload).run();
    } catch (e) {
        gs.error(IBMGuardiumCILookupRule.prefix + e.message + "\n" + e.stack);
    }
    return result;

})(rule, sourceValue, sourcePayload);]]&gt;&lt;/script&gt;
        &lt;source display_value="IBM Guardium Integration"&gt;24f0f5c687744d10387c64280cbb350c&lt;/source&gt;
        &lt;source_field&gt;source_data&lt;/source_field&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-28 13:43:30&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;4919d5989792155022fa1c800153af56&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-11-11 22:28:44&lt;/sys_updated_on&gt;
        &lt;table/&gt;
        &lt;target_field/&gt;
        &lt;target_table/&gt;
        &lt;type&gt;custom&lt;/type&gt;
    &lt;/sn_sec_cmn_ci_lookup_rule&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-02 20:35:14</sys_created_on>
        <sys_id>d79b0be79732d59022fa1c800153af54</sys_id>
        <sys_name>IBM Guardium Lookup Rule</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_metadata_link_d79b0be79732d59022fa1c800153af54</sys_update_name>
        <tablename>sn_sec_cmn_ci_lookup_rule</tablename>
    </sys_metadata_link>
</record_update>
