<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4919d5989792155022fa1c800153af56</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sn_sec_cmn_ci_lookup_rule"&gt;
    &lt;sn_sec_cmn_ci_lookup_rule action="INSERT_OR_UPDATE"&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;condition/&gt;
        &lt;description&gt;IBM Guardium data is added to the source_data field of a Discovered Item as JSON.  This JSON can be used to match with Database Instance and Database Catalog entries.&lt;/description&gt;
        &lt;lookup_script/&gt;
        &lt;method&gt;script&lt;/method&gt;
        &lt;name&gt;IBM Guardium Lookup Rule&lt;/name&gt;
        &lt;order&gt;216&lt;/order&gt;
        &lt;reapply&gt;false&lt;/reapply&gt;
        &lt;reapply_version&gt;0&lt;/reapply_version&gt;
        &lt;script&gt;&lt;![CDATA[var IBMGuardiumCILookupRule = Class.create();

IBMGuardiumCILookupRule.prototype = {
    initialize: function(sourceValue, sourcePayload) {
        // Ensure JSON data
        try {
            if (!sourcePayload) sourcePayload = sourceValue;
            if ("string" == typeof(sourcePayload)) sourcePayload = JSON.parse(sourceValue);
            this.payload = sourcePayload;
        } catch (e) {
            var errMsg = 'Unable to parse Discovered Item payload.';
            gs.error(errMsg, sourceValue);
        }
    },

    initializeGr: function(table_name, default_table_name) {
        var gr = null;
        try {
            gr = new GlideRecord(table_name);
        } catch (e) {
            errMsg = 'Unable to use table: ' + table_name;
            gs.error(errMsg + '\n' + e.stack);
            if (default_table_name) {
                try {
                    table_name = default_table_name;
                    gri = new GlideRecord(table_name);
                } catch (e1) {
                    errMsg = 'Unable to use table: ' + table_name;
                    gs.error(errMsg + '\n' + e1.stack);
                }
            }
        }
        return gr;
    },

    findMatchingCatalog: function(di_sys_id, database_name) {
        if (database_name) {
            var gr_dc = this.initializeGr('cmdb_ci_db_catalog');
            if (gr_dc) {
                gr_dc.addQuery('database_instance', '=', di_sys_id);
                gr_dc.addQuery('name', '=', database_name);
                gr_dc.setLimit(1);
                gr_dc.query();
                if (gr_dc.next()) {
                    return gr_dc;
                }
            }
        }
        return null;
    },

    findMatchingInstanceOrCatalog: function() {
        if (!this.payload) {
            gs.error('Payload is empty. Exiting.' + '\n' + this.payload);
            return null;
        }

        // Find matching Database Instance 
		var table_di = this.payload['database_instance_class'] || this.payload['target_class'] || 'cmdb_ci_db_instance';
        var gr_di = this.initializeGr(
            table_di, 'cmdb_ci_db_instance'
        );

        // Build query
        var asQuery = ["table=" + gr_di.getTableName()];

        // Add FQDN to query
        asQuery.push('fqdn=' + this.payload['fqdn']);
        gr_di.addQuery('fqdn', '=', this.payload['fqdn']);

        // Add PORT to query
        if (this.payload['tcp_port']) {
            asQuery.push('tcp_port=' + this.payload['tcp_port']);
            gr_di.addQuery('tcp_port', '=', this.payload['tcp_port']);
        }

        // Add optional service_name
        if (this.payload['service_name'] &amp;&amp; this.payload['target_service_name']) {
            asQuery.push(this.payload['target_service_name'] + '=' + this.payload['service_name']);
            gr_di.addQuery(this.payload['target_service_name'], '=', this.payload['service_name']);
        }

        // Log query
        gs.debug('Find Database Instance or Catalog:\n' + JSON.stringify(asQuery));
        gr_di.query();

        while (gr_di.next()) {
			var diData = {
				name: gr_di.getDisplayValue(gr_di.getDisplayName()),
				sys_id: gr_di.getUniqueValue()
			};
            // if db instance matches (including a blank db name), return it
            if (this.payload['database_name'] == (gr_di.getValue(this.payload['target_database_name']) || '')) {
                // Found matching db instance!
                diData[this.payload['target_database_name']] = this.payload['database_name'];
                gs.debug(
                    'Matched Database Instance:\n' + JSON.stringify(diData)
                );
                return gr_di.getUniqueValue();
            }

            // else try to match db catalog
            if (this.payload['database_name']) {
                var gr_dc = this.findMatchingCatalog(gr_di.getUniqueValue(), this.payload['database_name']);
                if (gr_dc) {
                    // Found matching db catalog!
                    var dcData = {
                        database_instance: diData,
                        name: this.payload['database_name'],
                        sys_id: gr_dc.getUniqueValue(),
                    };
                    gs.debug(
                        'Matched Database Catalog\n' + JSON.stringify(dcData)
                    );
                    return gr_dc.getUniqueValue();
                }
            }
			gs.debug('Unmatched Instance:\n' + JSON.stringify(diData));			
        }

        gs.debug('Unmatched Query:\n' + JSON.stringify(asQuery));
        return null;
    },
    type: 'IBMGuardiumCILookupRule'
};

(function process(rule, sourceValue, sourcePayload) {
    /*********************************
     * CI Lookup Rule Script
     * 
     * Available variables:
     * - rule:          Reference to the lookup rule that is being evaluated
     * - sourceValue:   The value of the source field from incoming data that is used for lookup
     * - sourcePayload: All the fields from incoming data that can be used for matching CI 
     *
     * Return either:
     * - the sysid of the CI that was matched by the rule
     * - null if there were no CI records that matched
     **********************************/

    var result;
	try{
		result = new IBMGuardiumCILookupRule(sourceValue, sourcePayload).findMatchingInstanceOrCatalog();
	} catch (e) {
		gs.error("IBMGuardiumCILookupRule Error:" + e.message + "\n" + e.stack);
	}
    if (result &amp;&amp; this.returnObj &amp;&amp; this.returnObj.ciIds) {
        // ServiceNow undocumented way to return result for CI Lookup Rule
        this.returnObj.ciIds.push(result);
    }
    return result;

})(rule, sourceValue, sourcePayload);]]&gt;&lt;/script&gt;
        &lt;source display_value="IBM Guardium Integration"&gt;24f0f5c687744d10387c64280cbb350c&lt;/source&gt;
        &lt;source_field&gt;source_data&lt;/source_field&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-28 13:43:30&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;4919d5989792155022fa1c800153af56&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-10-10 18:10:13&lt;/sys_updated_on&gt;
        &lt;table/&gt;
        &lt;target_field/&gt;
        &lt;target_table/&gt;
        &lt;type&gt;custom&lt;/type&gt;
    &lt;/sn_sec_cmn_ci_lookup_rule&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-02 20:35:14</sys_created_on>
        <sys_id>d79b0be79732d59022fa1c800153af54</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>IBM Guardium Lookup Rule</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_metadata_link_d79b0be79732d59022fa1c800153af54</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-02 20:35:14</sys_updated_on>
        <tablename>sn_sec_cmn_ci_lookup_rule</tablename>
    </sys_metadata_link>
</record_update>
