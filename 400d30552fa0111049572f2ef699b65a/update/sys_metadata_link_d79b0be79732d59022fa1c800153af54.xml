<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>4919d5989792155022fa1c800153af56</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sn_sec_cmn_ci_lookup_rule"&gt;
    &lt;sn_sec_cmn_ci_lookup_rule action="INSERT_OR_UPDATE"&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;condition/&gt;
        &lt;description&gt;IBM Guardium data is added to the source_data field of a Discovered Item as JSON.  This JSON can be used to match with Database Instance and Database Catalog entries.&lt;/description&gt;
        &lt;lookup_script/&gt;
        &lt;method&gt;script&lt;/method&gt;
        &lt;name&gt;IBM Guardium Lookup Rule&lt;/name&gt;
        &lt;order&gt;216&lt;/order&gt;
        &lt;reapply&gt;false&lt;/reapply&gt;
        &lt;reapply_version&gt;0&lt;/reapply_version&gt;
        &lt;script&gt;&lt;![CDATA[var IBMGuardiumCILookupRule = Class.create();

IBMGuardiumCILookupRule.ipv4or6 = /((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))/;
IBMGuardiumCILookupRule.ipv4 = /^((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])$/;
IBMGuardiumCILookupRule.prefix = 'IBM Guardium: ';

IBMGuardiumCILookupRule.prototype = {
    initialize: function(sourceValue, sourcePayload) {
        // Ensure JSON data is passed
        try {
            if (!sourcePayload) sourcePayload = sourceValue;
            if ("string" == typeof(sourcePayload)) sourcePayload = JSON.parse(sourceValue);
            this.payload = sourcePayload;
        } catch (e) {
            var errMsg = 'Unable to parse Discovered Item payload.';
            gs.error(IBMGuardiumCILookupRule.prefix + errMsg, sourceValue);
        }
    },

    getReferenceRecord: function(gr) {
        // Return parent GlideRecord if available
        var gr_ref = new GlideRecord('cmdb_ci');
        var tableName = gr.getTableName();
        switch (tableName) {
            case 'cmdb_ci_ip_address':
                // this record has a linked parent, get it
                if (gr_ref.get(gr.getValue('nic') || gr.getValue('owned_by_cmdb_ci'))) {
                    // recursively check the parent record
                    return this.getReferenceRecord(gr_ref);
                }
                break;
            case 'cmdb_ci_network_adaptor':
                // this record has a linked parent, get it
                if (gr_ref.get(gr.getValue('cmdb_ci'))) {
                    return gr_ref;
                }
                break;
        }
        return gr;
    },

    filterByFQDN: function(fqdn, port) {
        var oJson = {};
        var asQuery = [];
        var queryParam = IBMGuardiumCILookupRule.ipv4or6.test(fqdn) ? 'ip_address' : 'fqdn';

        // Filter on broadest class, cmdb_ci, first
        var gr = new GlideRecord('cmdb_ci');
        gr.addQuery(queryParam, '=', fqdn);
        asQuery.push(queryParam + '=' + fqdn);
        if (port) {
            gr.addQuery('tcp_port', '=', port);
            asQuery.push('tcp_port' + '=' + port);
        }
        gr.query();
        while (gr.next()) {
            // Now get more relevant parent records if available
            var gr_ref = this.getReferenceRecord(gr);
            if (gr_ref) {
                oJson[gr_ref.getUniqueValue()] = {
                    name: gr_ref.getDisplayValue(),
                    sys_id: gr_ref.getUniqueValue(),
                    sys_class_name: gr_ref.getTableName()
                };
            }
        }

        // validate
        if (0 == Object.keys(oJson).length) {
            throw new Error(
                'No CMDB_CI match for: ' + asQuery.join(' AND ')
            );
        }

        // return result
        return oJson;
    },

    getChildRelationships: function(oMapID, oQuery) {
        var oJson = {};
        // Find relationships
        for (var sys_id in oMapID) {
            var gr_rel = new GlideRecord('cmdb_rel_ci');
            gr_rel.addQuery('parent', '=', sys_id);
            if (rel_type_sys_id) {
                gr_rel.addQuery('type', '=', rel_type_sys_id);
            }
            gr_rel.query();
            while (gr_rel.next()) {
                gs.info(IBMGuardiumCILookupRule.prefix + 'Relationship' +
                    '\nChild: ' + gr_rel.getDisplayValue('child') +
                    '\nType: ' + gr_rel.getDisplayValue('type') +
                    '\nParent: ' + gr_rel.getDisplayValue('parent')
                )
                // filter by matching any query parameters and child sys_id
                var gr = new GlideRecord(oQuery['sys_class_name'] || 'cmdb_ci');
                gr.addQuery('sys_id', '=', gr_rel.getValue('child'));
                for (var p in oQuery) {
                    if ('sys_class_name' != p &amp;&amp; oQuery[p]) {
                        gr.addQuery(p, '=', oQuery[p]);
                    }
                }
                gr.query();
                while (gr.next()) {
                    oJson[gr.getUniqueValue()] = {
                        name: gr.getDisplayValue(),
                        sys_id: gr.getUniqueValue(),
                        sys_class_name: gr.getTableName()
                    }
                }
            }
        }

        // validate
        if (0 == Object.keys(oJson).length) {
            throw new Error(
                'No CMDB_CI related records where: tcp_port=' + this.payload['tcp_port']
            );
        }

        // return result
        return oJson;
    },

    findMatchingCatalog: function(di_sys_id, database_name) {
        // It is assumed that Discovery will create a catalog item for every database type
        if (database_name) {
            var gr_dc = new GlideRecord('cmdb_ci_db_catalog');
            if (gr_dc) {
                gr_dc.addQuery('database_instance', '=', di_sys_id);
                gr_dc.addQuery('name', '=', database_name);
                gr_dc.setLimit(1);
                gr_dc.query();
                if (gr_dc.next()) {
                    return gr_dc;
                }
            }
        }
        return null;
    },

    findMatchingCI: function() {
        if (!this.payload) {
            gs.error(IBMGuardiumCILookupRule.prefix + 'Payload is empty. Exiting.' + '\n' + this.payload);
            return null;
        }

        // Find any CI with given FQDN and PORT
        var oJsonCI = {};
        try {
            oJsonCI = this.filterByFQDN(this.payload['fqdn'], this.payload['tcp_port']);
        } catch (e) {
            // relax query if no match to both FQDN and Port
            if (0 == Object.keys(oJson).length) {
                // Since direct query failed, find records related to the FQDN
                oJsonCI = this.getChildRelationships(
                    this.filterByFQDN(fqdn), {
                        tcp_port: this.payload['tcp_port']
                    }
                );
            }
        }

        // Display overall query in the log
        var sys_class_name = this.payload['database_instance_class'] || this.payload['target_class'] || 'cmdb_ci_db_instance';
        var asQuery = [
            "sys_class_name=" + sys_class_name,
            IBMGuardiumCILookupRule.ipv4or6.test(this.payload['fqdn']) ? 'ip_address=' : 'fqdn=' + this.payload['fqdn'],
            'tcp_port=' + this.payload['tcp_port']
        ];
        if (this.payload['service_name'] &amp;&amp; this.payload['target_service_name']) {
            asQuery.push(this.payload['target_service_name'] + '=' + this.payload['service_name']);
        }
        if (this.payload['database_name'] &amp;&amp; this.payload['target_database_name']) {
            asQuery.push(this.payload['target_database_name'] + '=' + this.payload['database_name']);
        }

        // Log query
        gs.info(IBMGuardiumCILookupRule.prefix + 'Find Database Instance or Catalog:\n' + JSON.stringify(asQuery));

        // Find Database Instance relationships by DB_TYPE (sys_class_name)
        var oQuery = {
            sys_class_name: sys_class_name
        }
        // AND find by service_name if present on the Guardium DS entry
        if (this.payload['target_service_name']) {
            oQuery[this.payload['target_service_name']] = this.payload['service_name'];
        }
        // Database Instance does not have a reference property for a parent
        //  so we must find related records instead
        oJsonCI = this.getChildRelationships(
            oJsonCI, oQuery
        );

        // Finally, find the linked catalog entry
        var di_sys_id;
        if (this.payload['database_name']) {
            for (di_sys_id in oJsonCI) {
                var gr_dc = this.findMatchingCatalog(di_sys_id, this.payload['database_name']);
                if (gr_dc) {
                    var oInfo = {
                        database_instance: oJsonCI[di_sys_id],
                        name: this.payload['database_name'],
                        sys_id: gr_dc.getUniqueValue(),
                    };
                    gs.info(
                        IBMGuardiumCILookupRule.prefix + 'Matched Database Catalog\n' + JSON.stringify(oInfo)
                    );
                    return gr_dc.getUniqueValue();
                }
            }

            // if this point is reached, there is no matching catalog, try matching with DI catalog field
            for (di_sys_id in oJsonCI) {
                var gr_di = new GlideRecord(sys_class_name);
                if (gr_di.get(di_sys_id)) {
                    if (this.payload['database_name'] == gr_di.getValue(this.payload['target_database_name'])) {
                        gs.info(
                            IBMGuardiumCILookupRule.prefix + 'Matched Database Instance\n' + JSON.stringify(oJsonCI[di_sys_id])
                        );
                        return di_sys_id;
                    }
                }
            }

        } else {
            // assume the first one matches FQDN, PORT, DB_TYPE, and SERVICE_NAME
            //  since there is no value for DATABASE_NAME
            for (di_sys_id in oJsonCI) {
                gs.info(
                    IBMGuardiumCILookupRule.prefix + 'Matched Database Instance:\n' + JSON.stringify(oJsonCI[di_sys_id])
                );
                return di_sys_id;
            }
        }

        gs.warn(IBMGuardiumCILookupRule.prefix + 'Unmatched Database Instance or Catalog:\n' + JSON.stringify(asQuery));
        return null;
    },

    type: 'IBMGuardiumCILookupRule'
};

(function process(rule, sourceValue, sourcePayload) {
    /*********************************
     * CI Lookup Rule Script
     * 
     * Available variables:
     * - rule:          Reference to the lookup rule that is being evaluated
     * - sourceValue:   The value of the source field from incoming data that is used for lookup
     * - sourcePayload: All the fields from incoming data that can be used for matching CI 
     *
     * Return either:
     * - the sysid of the CI that was matched by the rule
     * - null if there were no CI records that matched
     **********************************/

    var result = null;
    try {
        // Find cmdb_ci record by matching: FQDN, TCP_PORT, DB_TYPE, DB_NAME, SERVICE_NAME
        result = new IBMGuardiumCILookupRule(sourceValue, sourcePayload).findMatchingCI();
    } catch (e) {
        gs.error(IBMGuardiumCILookupRule.prefix + e.message + "\n" + e.stack);
    }
    return result;

})(rule, sourceValue, sourcePayload);]]&gt;&lt;/script&gt;
        &lt;source display_value="IBM Guardium Integration"&gt;24f0f5c687744d10387c64280cbb350c&lt;/source&gt;
        &lt;source_field&gt;source_data&lt;/source_field&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-09-28 13:43:30&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;4919d5989792155022fa1c800153af56&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2022-11-11 16:06:00&lt;/sys_updated_on&gt;
        &lt;table/&gt;
        &lt;target_field/&gt;
        &lt;target_table/&gt;
        &lt;type&gt;custom&lt;/type&gt;
    &lt;/sn_sec_cmn_ci_lookup_rule&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-02 20:35:14</sys_created_on>
        <sys_id>d79b0be79732d59022fa1c800153af54</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>IBM Guardium Lookup Rule</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_metadata_link_d79b0be79732d59022fa1c800153af54</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-11 16:14:21</sys_updated_on>
        <tablename>sn_sec_cmn_ci_lookup_rule</tablename>
    </sys_metadata_link>
</record_update>
