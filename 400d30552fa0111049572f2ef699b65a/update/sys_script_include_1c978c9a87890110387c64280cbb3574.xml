<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorManagedUnit</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium managed unit processor script</description>
        <name>GuardiumProcessorManagedUnit</name>
        <script><![CDATA[var GuardiumProcessorManagedUnit = Class.create();
GuardiumProcessorManagedUnit.prototype =
    Object.extendsObject(GuardiumProcessorBase, {

        processEntry: function(datum, cm) {
            var exists = false;
            var grd_rec = this.transform(datum, cm);

            // Fetch all existing records and update or delete
            var sn_rec = new GlideRecord(GuardiumAPI.TABLE_MU);
            sn_rec.addQuery('fqdn_cm', '=', grd_rec.fqdn_cm);
            sn_rec.addQuery('fqdn', '=', grd_rec.fqdn);
			sn_rec.setLimit(1);
            sn_rec.query();
            if (sn_rec.next()) {
                exists = true;
            }

            if (!exists) {
                sn_rec.initialize();
            } else {
                // if no change, then skip
                var skip = true;
                for (var f in grd_rec) {
                    if (grd_rec[f] != sn_rec.getValue(f)) {
                        skip = false;
                    }
                }
                if (skip) {
                    this.skipped++;
                    return [cm.sys_id, sn_rec.getValue('fqdn')].join(':');
                }
            }

            // Map incoming fields to destination fields
            for (var p in grd_rec) {
                sn_rec.setValue(p, grd_rec[p]);
            }

			sn_rec.setWorkflow(false);
            if (!exists) {
                sn_rec.insert();
                this.inserted++;
            } else {
                sn_rec.update();
                this.updated++;
            }
			return [cm.sys_id, sn_rec.getValue('fqdn')].join(':');
        },
	
        afterCM: function(cm, entry_map) {
            // remove any deleted trim exceptions
            var sn_rec = new GlideRecord(GuardiumAPI.TABLE_MU);
            sn_rec.addQuery('fqdn_cm', '=', cm.sys_id);
            sn_rec.query();
            while (sn_rec.next()) {
                var _id = sn_rec.getValue('fqdn');
                var key = '';
                if (_id) {
                    key = cm.sys_id + ':' + _id;
                }
                // if the entry does not have an ID or has been removed, delete it
                if (!key || !entry_map[key]) {
                    try {
                        // entry was removed on Guardium, delete the ServiceNow record
                        sn_rec.setWorkflow(false);
                        sn_rec.deleteRecord();
                        this.deleted++;
                    } catch (errDel) {}
                }
            }
        },
	
        // convert managed_units response to ServiceNow table entry
        transform: function(record, cm) {
            var rec = {
                fqdn: record["Unit Host"],
                ip_address: record["IP"] || '',
                online: true == record["online"],
                name: record["Unit Host"],
                version: record["Version"] || '',
                unit_type: record['Type'] || '',
                ip_mode: record['IP Mode'] || '',
                fqdn_cm: cm.sys_id
            };

            var parsedType = this.parseType(record["Type"] || '');
            for (var p in parsedType) {
                rec[p] = parsedType[p];
            }
			
            return rec;
        },

        parseType: function(strType) {
            var resp = {};

            // Type contains multiple pieces of information
            var parts = strType.split(",");

            //  "Type": "ManagedCollector,  IPMode-IPv4",
            var type = parts[0].trim();
            if (type.startsWith('Managed')) {
                type = type.substr('Managed'.length);
                if ('Collector' != type && 'Aggregator' != type) {
                    type = 'Collector';
                }
            } else
            if (type.startsWith('Manager')) {
                type = 'Manager';
            } else
			if (type.startsWith('Standalone')) {
                type = 'Collector';
			}
            resp['unit_type'] = type;

            // Scan for ip mode
            for (var j = 1; j < parts.length; j++) {
                if (parts[j].includes("IPMode")) {
                    resp['ip_mode'] = parts[j].split("-")[1].trim();
                    break;
                }
            }

            return resp;
        },

        type: 'GuardiumProcessorManagedUnit'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-16 13:06:02</sys_created_on>
        <sys_id>1c978c9a87890110387c64280cbb3574</sys_id>
        <sys_mod_count>47</sys_mod_count>
        <sys_name>GuardiumProcessorManagedUnit</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_1c978c9a87890110387c64280cbb3574</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-05 17:52:19</sys_updated_on>
    </sys_script_include>
</record_update>
