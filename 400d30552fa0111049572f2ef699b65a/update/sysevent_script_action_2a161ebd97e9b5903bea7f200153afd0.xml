<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sysevent_script_action">
    <sysevent_script_action action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition_script/>
        <description/>
        <event_name>x_ibmrt_gdpva.DeleteCM</event_name>
        <name>EventHandler_DeleteCM</name>
        <order>100</order>
        <script><![CDATA[(function executeEventHandler(event, current) {
    if (!event) return;

    var name = '' + (event.parm1 || '');
    var cm_id = '' + (event.parm2 || '');

    if (!cm_id) {
        GuardiumLog.error('Cannot delete empty Guardium central manager');
        return;
    }

    GuardiumLog.debug('Deleting Guardium central manager: "' + name + '" ', "EventHandler_DeleteCM");

    var deleted = {
        mu: 0,
        test: 0,
        tex: 0,
        integ: 0,
        db: 0,
        grp: 0,
        rule: 0,
    };
    var g_resp;

    try {
        // delete all dependent assessment tests
        g_resp = new GlideRecord(GuardiumAPI.TABLE_AT);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.test++;
        }
    } catch (e) {}

    try {
        // delete all dependent test result summary entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_TR);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
        }
    } catch (e) {}

    try {
        // delete all test exception tests
        g_resp = new GlideRecord(GuardiumAPI.TABLE_TE);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.tex++;
        }
    } catch (e) {}

    try {
        // delete all dependent "Guardium machine" entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_MU);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.mu++;
        }
    } catch (e) {}

    try {
        // delete all dependent "Data Source" entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.db++;
        }
    } catch (e) {}

    try {
        // delete all dependent "Data Source Group Member" entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_GRP_MEMBER);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
        }
    } catch (e) {}

    try {
        // delete all dependent "Data Source Group" entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_GRP);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.grp++;
        }
    } catch (e) {}

    try {
        // delete all export rules
        g_resp = new GlideRecord(GuardiumAPI.TABLE_EXP_TARGET);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.rule++;
        }
    } catch (e) {}

    var msg = 'Guardium central manager: "' + name + '" ' +
        "\nNumber of IBM Guardium nodes removed: " + deleted.mu +
        "\nNumber of IBM Guardium export rules removed: " + deleted.rule +
        "\nNumber of IBM Guardium assessments removed: " + deleted.test +
        "\nNumber of IBM Guardium test exceptions removed: " + deleted.tex +
        "\nNumber of IBM Guardium data sources removed: " + deleted.db +
        "\nNumber of IBM Guardium data source groups removed: " + deleted.grp;
    gs.info(msg);
    GuardiumLog.info(msg, "EventHandler_DeleteCM");

})(event, current);]]></script>
        <synchronous>false</synchronous>
        <sys_class_name>sysevent_script_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-09-28 19:21:50</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2a161ebd97e9b5903bea7f200153afd0</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>EventHandler_DeleteCM</sys_name>
        <sys_overrides/>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sysevent_script_action_2a161ebd97e9b5903bea7f200153afd0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-26 19:17:46</sys_updated_on>
    </sysevent_script_action>
</record_update>
