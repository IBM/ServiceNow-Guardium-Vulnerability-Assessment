<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_ibmrt_gdpva_preference</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>preference_onUpdate</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    var oPropertyMap = {
        wait_for_running_jobs: {
			prop:'x_ibmrt_gdpva.queue.wait_for_running_jobs',
			def: true,
			msg: 'IBM Guardium: wait for assessment jobs to complete'
		},
        maxium_attempts: {
			prop: 'x_ibmrt_gdpva.queue.max_attempts',
			def: 200,
			msg: 'IBM Guardium: maximum number of times to wait for a dependency to complete'
		},
        max_timeout: {
			prop: 'glide.http.outbound.max_timeout',
			def: 30,
			msg: 'HTTP Outbound: maximum time to wait for a response'
		},
        max_timeout_enabled: {
			prop: 'glide.http.outbound.max_timeout.enabled',
			def: false,
			msg: 'HTTP Outbound: enable maximum timeout'
		}
    };

	// Save property if changed
	for (var pf in oPropertyMap) {
		var oProp = oPropertyMap[pf];
		if (!oProp.prop.startsWith('x_ibmrt_gdpva')) {
			// can only set scoped properties
			continue;
		}
		var pValue = gs.getProperty(oProp.prop);
		var cValue = current.getValue(pf);
		// take extra precaution to only set system property if changed
		if (cValue != pValue) {
			try {
				GuardiumLog.debug('Saving property: ' + 
					[oProp.prop, cValue].join(' | '), 'preference_onUpdate');
				gs.setProperty(oProp.prop, cValue, oProp.msg);
			} catch(e) {
				GuardiumLog.error('Error saving property: ' + oProp.prop, 'preference_onUpdate', e);
			}
		}
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-30 15:55:17</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e7b41aa8972fd95022fa1c800153afae</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>preference_onUpdate</sys_name>
        <sys_overrides/>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_e7b41aa8972fd95022fa1c800153afae</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-30 18:58:05</sys_updated_on>
        <template/>
        <when>async_always</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=e7b41aa8972fd95022fa1c800153afae"/>
</record_update>
