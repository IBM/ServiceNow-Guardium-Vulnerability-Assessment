<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sysevent_script_action">
    <sysevent_script_action action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition_script/>
        <description/>
        <event_name>x_ibmrt_gdpva.ReapplyLookupRules</event_name>
        <name>EventHandler_ReapplyLookupRules</name>
        <order>100</order>
        <script><![CDATA[(function executeEventHandler(event, current) {
    var this_type = 'Reapply Lookup Rules';
    if (!event || !current) return;

    var di_sys_id = current.getValue('discovered_item');
    if (!di_sys_id) {
        GuardiumLog.debug(
            current.getDisplayValue() + ': empty Discovered Item.  Re-import data sources.', this_type
        );
        return;
    }

    var gpds = new GuardiumProcessorDatasource();
    gpds.beforeProcessReport();

    var sn_dis = new GlideRecord('sn_sec_cmn_src_ci');
    if (sn_dis.get(di_sys_id)) {
        try {
            var asMsg = [];
            var payload = JSON.parse(sn_dis.getValue('source_data') || '{}');
            var oMatch = gpds.lookupByRuleCI(payload);
            if (oMatch && oMatch.ci_sys_id) {

                // Update Discovered Item
                if (oMatch.ci_sys_id != sn_dis.getValue('cmdb_ci')) {
                    // if matching CI Lookup rule, then say so
                    sn_dis.setValue('matching_type', oMatch.rule_sys_id ? 'matched_by_cilookup' : 'created_by_vr');
                    sn_dis.setValue('cmdb_ci', oMatch.ci_sys_id);
                    sn_dis.setValue('ci_lookup_rule', oMatch.rule_sys_id || '');
                    sn_dis.setValue('state', 'matched');
                    sn_dis.update();
                    asMsg.push('Updated Discovered Item: ' + sn_dis.getValue('number'));
                }

                // Update Guardium Datasource
                if (oMatch.ci_sys_id != current.getValue('database_instance')) {
                    current.setValue('database_instance', oMatch.ci_sys_id);
                    current.update();
                    asMsg.push('Updated Guardium Data Source: ' + sn_dis.getValue('name'));
                }

                // Update Vulnerable Items
                var gr_vit = new GlideRecord('sn_vul_vulnerable_item');
                gr_vit.addQuery('src_ci', '=', di_sys_id);
                gr_vit.addQuery('cmdb_ci', '!=', oMatch.ci_sys_id);
                gr_vit.query();
                if (gr_vit.hasNext()) {
                    gr_vit.setValue('cmdb_ci', oMatch.ci_sys_id);
                    gr_vit.updateMultiple();
                    asMsg.push('Number of updated Vulnerable Items: ' + gr_vit.getRowCount());
                }

                // Update Vulnerable Item Detections
                var gr_det = new GlideRecord('sn_vul_detection');
                gr_det.addQuery('src_ci', '=', di_sys_id);
                gr_det.addQuery('cmdb_ci', '!=', oMatch.ci_sys_id);
                gr_det.query();
                if (gr_det.hasNext()) {
                    gr_det.setValue('cmdb_ci', oMatch.ci_sys_id);
                    gr_det.updateMultiple();
                    asMsg.push('Number of updated Vulnerability Detections: ' + gr_det.getRowCount());
                }

                // Update Config Compliance if installed
                try {
                    if (gs.tableExists('sn_vulc_result')) {
                        var gr_cc = new GlideRecord('sn_vulc_result');
                        gr_cc.addQuery('src_ci', '=', di_sys_id);
                        gr_cc.addQuery('cmdb_ci', '!=', oMatch.ci_sys_id);
                        gr_cc.query();
                        if (gr_cc.hasNext()) {
                            gr_cc.setValue('cmdb_ci', oMatch.ci_sys_id);
                            gr_cc.updateMultiple();
                            asMsg.push('Number of updated Configuration Compliance Test Results: ' + gr_cc.getRowCount());
                        }
                    }
                } catch (e) {}
            } else {
                asMsg.push('No CMDB CI match found for: ' + current.getDisplayValue());
            }
			if (asMsg.length > 0) {
				GuardiumLog.info(asMsg.join('\n'), this_type);
			} else {
				GuardiumLog.info('No CMDB CI update for: ' + current.getDisplayValue(), this_type);
			}
        } catch (e) {
            GuardiumLog.error('', this_type, e);
        }
    }
})(event, current);]]></script>
        <synchronous>false</synchronous>
        <sys_class_name>sysevent_script_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-20 18:23:37</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>5875a55b970071503bea7f200153af08</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>EventHandler_ReapplyLookupRules</sys_name>
        <sys_overrides/>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sysevent_script_action_5875a55b970071503bea7f200153af08</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-09-13 17:27:30</sys_updated_on>
    </sysevent_script_action>
</record_update>
