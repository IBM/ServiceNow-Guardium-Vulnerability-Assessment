<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumIntegrationDaily</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GuardiumIntegrationDaily</name>
        <script><![CDATA[var GuardiumIntegrationDaily = Class.create();
GuardiumIntegrationDaily.prototype =
    Object.extendsObject(sn_vul.VulnerabilityIntegrationBase, {

        initialize: function() {},

        retrieveData: function() {
            var count = 0;
            var asError = [];

            // Show version information
            this.logVersion();
			
			// First time sync?
			var fullSync = this.hasPreviousRun(gr_cm.getUniqueValue()) ? '0' : '1';

            // For each active CM, create a sync record which will begin synchronization
            var gr_cm = new GlideRecord(GuardiumAPI.TABLE_CM);
            gr_cm.addActiveQuery();
            gr_cm.query();
            while (gr_cm.next()) {
                count++;
                try {
                    // Queue up data export
                    this.exportData &&
                        gs.eventQueue(
                            'x_ibmrt_gdpva.QueueDataExport',
                            gr_cm,
                            gr_cm.getDisplayValue(gr_cm.getDisplayName()),
                            gr_cm.getUniqueValue(),
                            ''
                        );

                    // Queue up data import
                    var gr_sync = new GlideRecord(GuardiumAPI.TABLE_CM_SYNC);
                    gr_sync.initialize();
                    gr_sync.setValue('fqdn_cm', gr_cm.getUniqueValue());
                    gr_sync.setValue('full_sync', fullSync);
                    gr_sync.insert();

                } catch (e) {
                    GuardiumLog.error('', this.type, e);
                    asError.push(e.message || e);
                }

            }

            var errMsg = "";
            if (asError.length) {
                errMsg = asError.join('\n');
            }
            if (!count) {
                errMsg = 'No active Central Managers';
            }

            // Update run record
            if (this.integrationProcessGr) {
                var util = new sn_vul.VulnerabilityIntegrationUtils();
                this.integrationRunGr = util.getIntegrationRunRecord(this.integrationProcessGr);
                if (this.integrationRunGr) {
                    this.integrationRunGr.setValue('source', GuardiumAPI.TITLE);
                    this.integrationRunGr.setValue('state', "complete");
                    this.integrationRunGr.setValue('substate', errMsg ? "failed" : "success");
                    this.integrationRunGr.setValue(
                        'notes', errMsg || 'See IBM Guardium Application Log for status of asynchronous integrations'
                    );
                    this.integrationRunGr.update();
                }
            }

            if (errMsg) {
                GuardiumLog.warn(errMsg, this.type);
                throw new Error(errMsg);
            }

            return null; // don't return any data
        },

        logVersion: function() {
            try {
                var gr = new GlideRecord('sys_app');
                if (gr.get('400d30552fa0111049572f2ef699b65a')) {
                    GuardiumLog.info([
                        'App:', gr.getValue('name'),
                        ', Version:', gr.getValue('version'),
                        ', Updated:', gr.getValue('sys_updated_on')
                    ].join(' '), this.type);
                }
            } catch (e) {
                GuardiumLog.error('Unable to get application version', this.type, e);
            }
        },

        hasPreviousRun: function(cm_sys_id) {
            var gr = new GlideRecord("sn_vul_integration_run");
            gr.addQuery("integration", '=', this.integrationGr.sys_id);
            gr.addQuery("state", '=', "complete");
            gr.addQuery("substate", "=", "success");
            if (cm_sys_id) {
                gr.addQuery("parameters", 'CONTAINS', cm_sys_id);
            }
            gr.orderByDesc('sys_created_on'); // newest first
            gr.setLimit(1);
            gr.query();
            return gr.hasNext();
        },

        type: 'GuardiumIntegrationDaily'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-14 17:11:43</sys_created_on>
        <sys_id>f902427b1b711d10e89f21be6e4bcb01</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>GuardiumIntegrationDaily</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_f902427b1b711d10e89f21be6e4bcb01</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-09 17:29:35</sys_updated_on>
    </sys_script_include>
</record_update>
