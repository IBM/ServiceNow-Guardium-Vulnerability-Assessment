<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorVulnerabilityTest</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium processor script for adding third party vulnerability entries</description>
        <name>GuardiumProcessorVulnerabilityTest</name>
        <script><![CDATA[var GuardiumProcessorVulnerabilityTest = Class.create();

GuardiumProcessorVulnerabilityTest.VUL_ENTRY_FIELDS = {
    id: true,
    category: true,
    classification: true,
    name: true,
    normalized_severity: true,
    source_severity: true,
    stig_severity: true,
    product: true,
    summary: true,
    source: true,
    source_instance: true
};
GuardiumProcessorVulnerabilityTest.CVE_REG_EX = /[CEVW]+-[0-9]+-?[0-9]*/g;

GuardiumProcessorVulnerabilityTest.prototype =
    Object.extendsObject(GuardiumProcessorBase, {

        beforeProcessReport: function(reportData) {
            this.TPVB = new sn_vul.ThirdPartyVulnerabilityBase(
                GuardiumAPI.TITLE,
                this.integrationGr.sys_id,
                this.integrationRunGr.sys_id
            );

            try {
                this.CTB = new sn_vulc.ComplianceTestBase(GuardiumAPI.TITLE);
            } catch (er) {}
        },

        beforeCM: function(cm, data) {
            this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm.sys_id, true));
			//this.gAPI.authenticate();
        },

        processEntry: function(datum, cm) {
            //- Add or update Compliance Test -//
            var ct_rec = this.transformCT(datum);
            if (ct_rec && this.CTB) {
				// create compliance test
				this.CTB.createOrUpdateTest(ct_rec);
            }

            //- Add or update Third Party Vulnerability Test -//
            var tpv_rec = this.transformVT(datum);

            // let script library find duplicate
            var tpe = this.TPVB.createOrUpdateVulnerability(tpv_rec);

            // if nothing created or updated, then create manually
            var sn_rec = new GlideRecord(GuardiumAPI.TABLE_TA);
            if (!tpe.sys_id) {
                sn_rec.initialize();
            } else {
				sn_rec.get(tpe.sys_id);
			}

			// Ensure fields are set!!
			for (var p in GuardiumProcessorVulnerabilityTest.VUL_ENTRY_FIELDS) {
				sn_rec.setValue(p, tpv_rec[p]);
			}

            // Insert or Update
			if (!tpe.sys_id) {
				sn_rec.insert();
			} else {
				sn_rec.update();
			}
            if (tpe.insert) {
                this.inserted_vi++;
            } else {
                this.updated_vi++;
            }
        },

        transformCT: function(datum) {
            if (this.CTB) {
				var test_date = this.gAPI.adjustTimeFromGuardium(datum['Timestamp']);
                var test_id = datum['Test Description'] ||
                    datum["External Reference"] ||
                    datum["STIG Reference"] ||
                    'Guardium Test ' + datum['Test ID'];

                var rec = this.CTB.newTest(test_id);
                rec.source = GuardiumAPI.TITLE;
                rec.source_id = datum['Test ID'] || '';
                rec.source_category = this.getLabel(datum['Category Name']);
                rec.source_sub_category = this.getLabel(datum['Test Type']);
                rec.short_description = test_id.substring(0,512);
                rec.description = datum['Short Description'];
                rec.source_criticality = this.getLabel(datum['Severity']);
                rec.source_created = test_date;
                rec.source_udpated = this.dt_now;

                return rec;
            }
            return null;
        },

        transformVT: function(datum) {
			var test_date = this.gAPI.adjustTimeFromGuardium(datum['Timestamp']);
            var test_id = datum['Test Description'] ||
                datum["External Reference"] ||
                datum["STIG Reference"] ||
                'Guardium Test ' + datum['Test ID'];

            var rec = this.TPVB.newVulnerability(test_id.substring(0, 255)); // limit ID to 255 chars
            rec.category = this.getLabel(datum['Category Name']);
            rec.classification = datum['Test Type'] || '';
            rec.name = test_id;
            rec.normalized_severity = rec.source_severity = this.convertSeverity(datum['Severity']);
            rec.stig_severity = this.getLabel(datum['STIG Severity']);
            rec.product = datum['Datasource Type'];
            rec.summary = datum['Short Description'];
            rec.source = GuardiumAPI.TITLE;
            rec.source_instance = this.integrationGr.sys_id;
			rec.date_published = test_date;
			rec.last_modified = this.dt_now;
			rec.v3_attack_vector = datum['CVSS Access Vector'] || '';
			rec.v3_base_score = (datum['CVSS Score'] || '0') - 0; // convert to decimal

            if (!rec.cves) rec.cves = [];

            var extRef = datum["External Reference"] ||
                datum["STIG Reference"] || datum['Test Description'] || '';

            // Find all references to CVE and CWE
            var keys = [];
            var match;
            if (extRef.indexOf('CVE-') >= 0 || extRef.indexOf('CWE-') >= 0) {
                match = extRef.match(GuardiumProcessorVulnerabilityTest.CVE_REG_EX);
                if (match.length > 0) {
                    keys = keys.concat(match);
                }
            }
            if (rec.summary.indexOf('CVE-') >= 0 || rec.summary.indexOf('CWE-') >= 0) {
                match = rec.summary.match(GuardiumProcessorVulnerabilityTest.CVE_REG_EX);
                if (match.length > 0) {
                    keys = keys.concat(match);
                }
            }
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key.startsWith('CVE')) {
                    rec.cves.push({
                        id: key,
                        url: 'https://nvd.nist.gov/vuln/detail/' + key,
                    });
                } else
                if (key.startsWith('CWE')) {
                    var a = key.split('-');
                    if (a.length > 1) {
                        rec.cves.push({
                            id: key,
                            url: 'https://cwe.mitre.org/data/definitions/' + a[1] + '.html',
                        });
                    }
                }
            }
            return rec;
        },

        convertSeverity: function(grd_severity) {
            // CRITICAL,MAJOR,MINOR,INFO,CAUTION,CAT I,CAT II,CAT III
            switch (grd_severity.toUpperCase()) {
                case 'CRITICAL':
                    return 1;
                case 'MAJOR':
                    return 2;
                case 'MINOR':
                    return 3;
                case 'CAUTION':
                    return 4;
                case 'INFO':
                    return 5;
            }
            return 5;
        },

        type: 'GuardiumProcessorVulnerabilityTest'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-14 16:22:58</sys_created_on>
        <sys_id>72716ae987094950387c64280cbb35b3</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>GuardiumProcessorVulnerabilityTest</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_72716ae987094950387c64280cbb35b3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-09-28 15:11:31</sys_updated_on>
    </sys_script_include>
</record_update>
