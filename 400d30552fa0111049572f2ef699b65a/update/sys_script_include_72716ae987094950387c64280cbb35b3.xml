<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorVulnerabilityTest</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium processor script for adding third party vulnerability entries</description>
        <name>GuardiumProcessorVulnerabilityTest</name>
        <script><![CDATA[var GuardiumProcessorVulnerabilityTest = Class.create();

GuardiumProcessorVulnerabilityTest.VUL_ENTRY_FIELDS = {
    id: true,
    //classification: true,
    category: true, // Category Name, Test Type
    product: true, // Database Type
    vendor: true, // User defined ref 1, User defined ref 2
    solution: true, // User defined notes
    name: true,
    normalized_severity: true,
    source_severity: true,
    stig_severity: true,
    summary: true,
    source: true,
    source_instance: true,
    date_published: true,
    last_modified: true,
    access_vector: true,
    score: true
};
GuardiumProcessorVulnerabilityTest.CVE_REG_EX = /[CEVW]+[- ][0-9]+[- ][0-9]*/g;

GuardiumProcessorVulnerabilityTest.prototype =
    Object.extendsObject(GuardiumProcessorBase, {

        beforeProcessReport: function(reportData) {
            this.sn_vul_tpv = new sn_vul.ThirdPartyVulnerability(
                GuardiumAPI.TITLE,
                this.integrationGr.sys_id,
                this.integrationRunGr.sys_id
            );

            try {
                this.sn_vulc_ct = new sn_vulc.ComplianceTest(GuardiumAPI.TITLE);
            } catch (er) {}

            this.failed_types = ',' + (this.preferences.getValue('test_failure_type') || '') + ',';
			this.user_def_sev = gs.getProperty('x_ibmrt_gdpva.user_defined.severity', '1');
        },

        beforeCM: function(cm, data) {
			if (!this.gAPI) {
				this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm.sys_id, true));
				//this.gAPI.authenticate();
			}
        },
	
        processEntry: function(datum, cm) {
            datum = this.createOrUpdateDefinition(datum);

            //- Add or update Compliance Test -//
            var ct_rec = this.transformCT(datum);
            if (ct_rec) {
                // create compliance test
                var ct_entry = this.sn_vulc_ct.createOrUpdateTest(ct_rec);
                if (ct_entry.inserted) {
                    this.inserted_cc++;
                } else
                if (ct_entry.updated) {
                    this.updated_cc++;
                } else {
                    this.skipped_cc++;
                }
                return ct_entry.sys_id;
            }

            //- Add or update Third Party Vulnerability Test -//
            var vt_rec = this.transformVT(datum);
            if (vt_rec) {

                // let script library find duplicate
                var vt_entry = this.sn_vul_tpv.createOrUpdateVulnerability(vt_rec);

                // if nothing created or updated, then create manually
                var sn_rec = new GlideRecord('sn_vul_third_party_entry');
                if (!vt_entry.sys_id) {
                    sn_rec.initialize();
                } else {
                    if (!sn_rec.get(vt_entry.sys_id)) {
                        this.skipped_vi++;
                        return vt_entry.sys_id;
                    }
                }

                // Ensure fields are set!!
                for (var p in GuardiumProcessorVulnerabilityTest.VUL_ENTRY_FIELDS) {
                    sn_rec.setValue(p, vt_rec[p]);
                }

                // Insert or Update
                if (vt_entry.insert || !vt_entry.sys_id) {
                    vt_entry.sys_id = sn_rec.insert();
                    this.inserted_vi++;
                } else {
                    vt_entry.sys_id = sn_rec.update();
                    this.updated_vi++;
                }

                // Make sure ref data is called
                try {
                    this.sn_vul_tpv._handleReferenceData(
                        vt_entry.sys_id, vt_entry.id, vt_rec.referenceData
                    );
                } catch (e) {}

                return vt_entry.sys_id;
            }
            return '';
        },

        generateTestID: function() {
            var gr = new GlideRecord('x_ibmrt_gdpva_test_definition');
			gr.orderByDesc('servicenow_id');
            gr.orderByDesc('timestamp'); // this assumes that the test created recently has the highest test_id value
            gr.setLimit(1);
            gr.query();
            if (gr.next()) {
                try {
                    var num = gr.getValue('test_id') - 0;
                    if (num > 19999) {
                        num++;
                    } else {
                        num += 20000;
                    }
                    return '' + num; // stringify					
                } catch (e) {}
            }
            return '20000'; // dummy value in case there are no entries
        },

        createOrUpdateDefinition: function(datum, useExisting) {
            try {
                var testName = (datum['Test Description'] || '').substring(0, 1000);
                var dsType = datum['Datasource Type'] || 'EMPTY';

                var sys_id = '';
                var gr = new GlideRecord('x_ibmrt_gdpva_test_definition');
                gr.addQuery('test_description', '=', testName);
                gr.query();
                while (gr.next()) {
                    if (dsType == 'EMPTY' || dsType == gr.getValue('datasource_type')) {
                        sys_id = gr.getUniqueValue();
                        break;
                    }
                    if ('EMPTY' == gr.getValue('datasource_type')) {
                        sys_id = gr.getUniqueValue();
                    }
                }
                if (sys_id) {
                    gr.get(sys_id);
                } else {
                    gr.initialize();
                    useExisting = false;
                }

                // Make sure there is a Test ID
                var testID = datum['Test ID'] || gr.getValue('test_id') || this.generateTestID();
                datum['Test ID'] = testID;
                gr.setValue('test_id', testID);

                // Set all other fields
                datum['Test Description'] = (useExisting ?
                    (gr.getValue('test_description') || testName) :
                    (testName || gr.getValue('test_description'))
                ) || '';
                gr.setValue('test_description', datum['Test Description']);

                // Short Description is actually saved to the Description field
                datum['Short Description'] = (useExisting ?
                    (gr.getValue('description') || datum['Short Description']) :
                    (datum['Short Description'] || gr.getValue('description'))
                ) || '';
                gr.setValue('description', datum['Short Description'].substring(0, 2000));

                datum['Test Type'] = (useExisting ?
                    (gr.getValue('test_type') || datum['Test Type'] || '') :
                    (datum['Test Type'] || gr.getValue('test_type') || '')
                ) || '';
                gr.setValue('test_type', datum['Test Type'].substring(0, 255));

                datum['Datasource Type'] = (useExisting ?
                    (gr.getValue('datasource_type') || dsType | '') :
                    (dsType || gr.getValue('datasource_type') || '')
                ) || '';
                gr.setValue('datasource_type', datum['Datasource Type']);

                datum['External Reference'] = (useExisting ?
                    (gr.getValue('external_reference') || datum['External Reference'] | '') :
                    (datum['External Reference'] || gr.getValue('external_reference') || '')
                ) || '';
                gr.setValue('external_reference', datum['External Reference']);

                datum['STIG Reference'] = (useExisting ?
                    (gr.getValue('stig_reference') || datum['STIG Reference'] | '') :
                    (datum['STIG Reference'] || gr.getValue('stig_reference') || '')
                ) || '';
                gr.setValue('stig_reference', datum['STIG Reference']);

                datum['STIG Severity'] = (useExisting ?
                    (gr.getValue('stig_severity') || datum['STIG Severity'] | '') :
                    (datum['STIG Severity'] || gr.getValue('stig_severity') || '')
                ) || '';
                gr.setValue('stig_severity', datum['STIG Severity']);

                datum['Severity'] = (useExisting ?
                    (gr.getValue('severity') || datum['Severity'] | '') :
                    (datum['Severity'] || gr.getValue('severity') || '')
                ) || '';
                gr.setValue('severity', datum['Severity']);

                datum['Category Name'] = (useExisting ?
                    (gr.getValue('category_name') || datum['Category Name'] | '') :
                    (datum['Category Name'] || gr.getValue('category_name') || '')
                ) || '';
                gr.setValue('category_name', datum['Category Name']);

                datum['User defined reference one'] = (useExisting ?
                    (gr.getValue('user_defined_reference_one') || datum['User defined reference one'] | '') :
                    (datum['User defined reference one'] || gr.getValue('user_defined_reference_one') || '')
                ) || '';
                gr.setValue('user_defined_reference_one', datum['User defined reference one']);

                datum['User defined reference two'] = (useExisting ?
                    (gr.getValue('user_defined_reference_two') || datum['User defined reference two'] | '') :
                    (datum['User defined reference two'] || gr.getValue('user_defined_reference_two') || '')
                ) || '';
                gr.setValue('user_defined_reference_two', datum['User defined reference two']);

                datum['User defined notes'] = (useExisting ?
                    (gr.getValue('user_defined_notes') || datum['User defined notes'] | '') :
                    (datum['User defined notes'] || gr.getValue('user_defined_notes') || '')
                ) || '';
                gr.setValue('user_defined_notes', datum['User defined notes']);

                var test_date = this.gAPI.adjustTimeFromGuardium(datum['Timestamp']);
                datum['Timestamp'] = (useExisting ?
                    gr.getValue('timestamp') :
                    test_date
                );
                gr.setValue('timestamp', datum['Timestamp']);

                // return a normalized test id
                if ('CVE' == datum['Test Type'] ||
                    0 == datum['Test Description'].indexOf('CVE') ||
                    0 == datum['Test Description'].indexOf('CWE')) {
                    datum['ServiceNow ID'] = datum['Test Description'].replaceAll(' ', '-');
                } else {
                    datum['ServiceNow ID'] = 'Guardium-' + this.normalizeId(datum['Test ID']);
                }
                gr.setValue('servicenow_id', datum['ServiceNow ID']);

                if (!sys_id) {
                    gr.insert();
                } else {
                    gr.update();
                }
            } catch (e) {
                GuardiumLog.error('Create Test Definition', this.type, e);
            }
            return datum;
        },

        normalizeId: function(id) {
            var s = '00000' + id;
            return s.substring(s.length - 5);
        },

        transformCT: function(datum) {
            // create test def if compliance is installed and this is not CVE
            if (this.sn_vulc_ct && this.failed_types.indexOf(',' + datum['Test Type'] + ',') < 0) {
                var test_date = this.gAPI.adjustTimeFromGuardium(datum['Timestamp']);
                var test_name_brief = datum['ServiceNow ID'] || 'Guardium-' + this.normalizeId(datum['Test ID']);
                var test_name = (
                    datum['Test Description'] ||
                    datum["External Reference"] ||
                    datum["STIG Reference"] ||
                    test_name_brief
                ).substring(0, 512);
                var test_id = test_name_brief.substring(0, 512);

                var rec = this.sn_vulc_ct.newTest(test_id);
                rec.source = GuardiumAPI.TITLE;
                rec.source_id = test_id;
                rec.source_category = this.getLabel(datum['Category Name']);
                rec.source_sub_category = this.getLabel(datum['Test Type']);
                rec.short_description = [datum['Datasource Type'] || 'EMPTY', test_name].join(' - ');
                rec.description = [
                    "* Description:\n" + (datum['Short Description'] || '').trim(),
                    "* Test Reference 1:\n" + (datum['User defined reference one'] || '').trim(),
                    "* Test Reference 2:\n" + (datum['User defined reference two'] || '').trim(),
                    "* Test Notes:\n" + (datum['User defined notes'] || '').trim()
                ].join('\n\n');
				var sev = this.convertSeverity((
					'1' == this.user_def_sev ? datum['User defined reference one'] :
					'2' == this.user_def_sev ? datum['User defined reference two'] : 
					'') || datum['Severity']
				);
				if (99 == sev) {
					// user defined value is not a priority value
					rec.source_criticality = this.getLabel(datum['Severity']);
				} else {
					rec.source_criticality = this.getLabel((
						'1' == this.user_def_sev ? datum['User defined reference one'] :
						'2' == this.user_def_sev ? datum['User defined reference two'] : 
						'') || datum['Severity']
					);
				}
                rec.source_created = test_date;
                rec.source_udpated = this.dt_now;

                return rec;
            }
            return null;
        },

        transformVT: function(datum) {
            // DO NOT create test def if compliance is installed and this is not CVE
            if (this.sn_vulc_ct && this.failed_types.indexOf(',' + datum['Test Type'] + ',') < 0) {
                return null;
            }
            var test_date = this.gAPI.adjustTimeFromGuardium(datum['Timestamp']);
            var test_name_brief = datum['ServiceNow ID'] || 'Guardium-' + this.normalizeId(datum['Test ID']);
            var test_name = (
                datum['Test Description'] ||
                datum["External Reference"] ||
                datum["STIG Reference"] ||
                test_name_brief
            ).substring(0, 512);
            var test_id = test_name_brief.substring(0, 255);

            var rec = this.sn_vul_tpv.newVulnerability(test_id); // limit ID to 255 chars
            rec.category = [this.getLabel(datum['Category Name']),
                this.getLabel(datum['Test Type'])
            ].join(', ');
			var v = [];
			if (datum['User defined reference one'] && '1'!=this.user_def_sev) {
				v.push(datum['User defined reference one']);
			}
			if (datum['User defined reference two'] && '2'!=this.user_def_sev) {
				v.push(datum['User defined reference two']);
			}
            rec.vendor = v.join(', ');
            rec.solution = [
				datum['User defined reference one'] ?
                '<h4>Test Reference 1</h4>' +
                datum['User defined reference one'].trim().replaceAll('\n', '<br/>') : '',
				datum['User defined reference two'] ?
                '<h4>Test Reference 2</h4>' +
                datum['User defined reference two'].trim().replaceAll('\n', '<br/>') : '',
				datum['User defined notes'] ?
                '<h4>Test Notes</h4>' +
                datum['User defined notes'].trim().replaceAll('\n', '<br/>') : ''
            ].join('<br/><br/>');

            rec.name = test_name;
			var sev = this.convertSeverity((
				'1' == this.user_def_sev ? datum['User defined reference one'] :
				'2' == this.user_def_sev ? datum['User defined reference two'] : 
				'') || datum['Severity']
			);
            rec.normalized_severity = rec.source_severity = 
				(99 == sev ? this.convertSeverity(datum['Severity']) : sev);
            rec.stig_severity = this.getLabel(datum['STIG Severity']);
            rec.product = datum['Datasource Type'] || 'EMPTY';
            rec.summary = datum['Short Description'];
            rec.source = GuardiumAPI.TITLE;
            rec.source_instance = this.integrationGr.sys_id;
            rec.date_published = test_date;
            rec.last_modified = this.dt_now;
            rec.access_vector = datum['CVSS Access Vector'] || ''; // v2 vector
            rec.score = (datum['CVSS Score'] || '0') - 0; // v2 score: convert to number

            if (!rec.cves) rec.cves = [];
            if (!rec.referenceData) rec.referenceData = [];

            var extRef = datum["External Reference"] ||
                datum["STIG Reference"] || datum['Test Description'] || '';

            // Find all references to CVE and CWE
            var keys = [];
            var match;
            if (extRef.indexOf('CVE') == 0 || extRef.indexOf('CWE') == 0) {
                match = extRef.match(GuardiumProcessorVulnerabilityTest.CVE_REG_EX);
                if (match && match.length > 0) {
                    keys = keys.concat(match);
                }
            }
            if (rec.summary.indexOf('CVE') >= 0 || rec.summary.indexOf('CWE') >= 0) {
                match = rec.summary.match(GuardiumProcessorVulnerabilityTest.CVE_REG_EX);
                if (match && match.length > 0) {
                    keys = keys.concat(match);
                }
            }
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i].replaceAll(' ', '-');
                if (0 == key.indexOf('CVE')) {
                    rec.cves.push({
                        id: key,
                        url: 'https://nvd.nist.gov/vuln/detail/' + key,
                    });
                    rec.referenceData.push({
                        name: 'NIST',
                        description: rec.product,
                        url: 'https://nvd.nist.gov/vuln/detail/' + key,
                    });
                } else
                if (0 == key.indexOf('CWE')) {
                    var a = key.split('-');
                    if (a.length > 1) {
                        rec.cves.push({
                            id: key,
                            url: 'https://cwe.mitre.org/data/definitions/' + a[1] + '.html',
                        });
                        rec.referenceData.push({
                            name: 'MITRE',
                            description: rec.product,
                            url: 'https://cwe.mitre.org/data/definitions/' + a[1] + '.html',
                        });
                    }
                }
            }
            return rec;
        },

        convertSeverity: function(grd_severity) {
            if (!grd_severity) return '';
            // CRITICAL,MAJOR,MINOR,INFO,CAUTION,CAT I,CAT II,CAT III
            switch (grd_severity.toUpperCase()) {
                case 'CRITICAL':
                   return 1;
                case 'MAJOR':
				case 'CAT I':
                    return 2;
                case 'MINOR':
				case 'CAT II':
                     return 3;
                case 'CAUTION':
				case 'CAT III':
                    return 4;
                case 'INFO':
                    return 5;
            }
            return 99;
        },

        type: 'GuardiumProcessorVulnerabilityTest'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-14 16:22:58</sys_created_on>
        <sys_id>72716ae987094950387c64280cbb35b3</sys_id>
        <sys_mod_count>88</sys_mod_count>
        <sys_name>GuardiumProcessorVulnerabilityTest</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_72716ae987094950387c64280cbb35b3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-22 20:03:22</sys_updated_on>
    </sys_script_include>
</record_update>
