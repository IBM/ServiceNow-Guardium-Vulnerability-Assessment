<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_guard.GuardiumExportDatasourceGroup</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GuardiumExportDatasourceGroup</name>
        <script><![CDATA[var GuardiumExportDatasourceGroup = Class.create();
GuardiumExportDatasourceGroup.PREFIX = "Export to Guardium group: ";

GuardiumExportDatasourceGroup.prototype = {
    initialize: function(gr_preferences) {
        this.preferences = gr_preferences || GuardiumAPI.getPreferences();
        this.log_level = this.preferences.getValue('log_level') - 0;
    },

    run: function() {
        var exported = 0;
        var gAPI = this._connectToCM();
        if (!gAPI) return exported;

        var gr_grp = new GlideRecord(GuardiumAPI.TABLE_GRP);
        gr_grp.query();

        // process the list of entries
        while (gr_grp.next()) {
            if (this.exportRecord(gAPI, gr_grp)) {
                exported++;
            }
        }
        return exported;
    },

    runOnce: function(gr_grp, cm_sys_id) {
        var gAPI = this._connectToCM(cm_sys_id);
        if (!gAPI) return;
        return this.exportRecord(gAPI, gr_grp);
    },

    exportRecord: function(gAPI, gr_grp) {
        // check for presence of CM reference
        var isUpdate =
            (gr_grp.getValue(GuardiumAPI.GRP_COL_NAME_ORIG) != gr_grp.getValue(GuardiumAPI.GRP_COL_NAME)) &&
            (gr_grp.getValue(GuardiumAPI.GRP_COL_NAME_ORIG) != "");

        var g_rec = this.transform(gr_grp, isUpdate);
        if (!g_rec) {
            throw GuardiumExportDatasourceGroup.PREFIX +
                gr_grp.getValue('name') +
                " - could not parse Data Source Group object";
        }

        var grp_sys_id = gr_grp.getValue('sys_id');
        var response = null;
        var errMsg = null;
        try {
            response = isUpdate ? gAPI.put('datasource_group', g_rec) : gAPI.post('datasource_group', g_rec);
        } catch (e) {
			if (isUpdate && (e.code || (e.message || e).contains("doesn't exist"))) {
                // Record might have been deleted on Guardium, try POST
                isUpdate = false;
                delete g_rec['newGroupName'];
                try {
                    response = gAPI.post('datasource_group', g_rec);
                } catch (e1) {
                    errMsg = (e1.message || e1);
                }
            } else
            if (!isUpdate && (e.code || (e.message || e).contains("already exists"))) {
                // Record exists, do update
                isUpdate = true;
                g_rec = this.transform(gr_grp, isUpdate);
                try {
                    response = gAPI.put('datasource_group', g_rec);
                } catch (e2) {
                    errMsg = (e2.message || e2);
                }
            } else {
                errMsg = (e.message || e);
            }
        }

        if (response && response.data) {
            // Success
            var grp_id = response.data['ID']; // if success ID=0 returned
            var doUpdate = false;
            if (!gr_grp.getValue(GuardiumAPI.GRP_COL_CM)) {
                // update ServiceNow record with sync info
                gr_grp.setValue(GuardiumAPI.GRP_COL_CM, gAPI.cm.sys_id);
                doUpdate = true;
            }
            if (gr_grp.getValue(GuardiumAPI.GRP_COL_NAME_ORIG) !=
                gr_grp.getValue(GuardiumAPI.GRP_COL_NAME)) {
                gr_grp.setValue(GuardiumAPI.GRP_COL_NAME_ORIG, gr_grp.getValue(GuardiumAPI.GRP_COL_NAME));
                doUpdate = true;
            }
            // update ServiceNow record with new group name
            if (doUpdate) {
                gr_grp.setWorkflow(false);
                gr_grp.update();
            }
            // handle membership
            this.synchronizeMembers(gAPI, g_rec, grp_sys_id);
            // done!
            return true;
        } else {
            // Error from Guardium
            throw GuardiumExportDatasourceGroup.PREFIX +
                gr_grp.getValue('name') +
                "\n" + (errMsg || (response ? response.body : ''));
        }
    },

    transform: function(gr_grp, isUpdate) {
        var rec = {
            appTypeCriteria: gr_grp.getValue(GuardiumAPI.GRP_COL_APP_TYPE) || "Security Assessment",
            groupType: gr_grp.getValue(GuardiumAPI.GRP_COL_GRP_TYPE || 'STATIC'),

            groupName: gr_grp.getValue(GuardiumAPI.GRP_COL_NAME_ORIG) ||
                gr_grp.getValue(GuardiumAPI.GRP_COL_NAME)
        };
        if ("STATIC" != rec.groupType) {
            rec.dbTypeCriteria = gr_grp.getDisplayValue(GuardiumAPI.GRP_COL_DB_TYPE);
        }
        if (isUpdate) {
            rec['newGroupName'] = gr_grp.getValue(GuardiumAPI.GRP_COL_NAME);
        }

        return rec;
    },

    getStaticMembers: function(grp_sys_id) {
        var members_sn = {};
        var sn_map = new GlideRecord(GuardiumAPI.TABLE_GRP_MEMBER);
        sn_map.addQuery('group', '=', grp_sys_id);
        sn_map.query();
        while (sn_map.next()) {
            var db_sys_id = sn_map.getValue('datasource');
            if (db_sys_id) {
                var sn_db = new GlideRecord(GuardiumAPI.TABLE_DB_GRD);
                if (sn_db.get(db_sys_id)) {
                    members_sn[sn_db.getValue('name')] = db_sys_id;
                }
            }
        }
        return members_sn;
    },

    singleMemberUpdate: function(gAPI, groupSysID, datasourceName, isDelete) {
        var gr_grp = new GlideRecord(GuardiumAPI.TABLE_GRP);
        if (gr_grp.get(groupSysID)) {
            if ('STATIC' != gr_grp.getValue(GuardiumAPI.GRP_COL_GRP_TYPE)) {
                // if group is dynamic and it is updated to STATIC, workflow will sync all members
                gr_grp.setValue(GuardiumAPI.GRP_COL_GRP_TYPE, 'STATIC');
                gr_grp.setWorkflow(true);
                return gr_grp.update();
            }

            var eventType = isDelete ? 'remove' : 'add';
            gAPI.post('datasource_group_' + eventType, {
                groupName: gr_grp.getValue('name'),
                datasourceName: datasourceName
            });

        }
    },

    synchronizeMembers: function(gAPI, g_rec, grp_sys_id) {
        if ('STATIC' != g_rec.groupType) return;

        // get the members from Guardium
        var members_gdp = this.fetchGuardiumGroupMembers(gAPI, g_rec.groupName);
        var members_sn = this.getStaticMembers(grp_sys_id);
        var grpName = g_rec.groupName;
        var dbName;

        // ServiceNow has the latest copy, insert members on Guardium 
        for (dbName in members_sn) {
            if (!members_gdp[dbName]) {
                // insert a new group member in Guardium 
                this.singleMemberUpdate(gAPI, grp_sys_id, dbName, false);
            }
            // mark processed
            members_gdp[dbName] = false;
        }

        // If the database is no longer in ServiceNow group, remove from Guardium group
        for (dbName in members_gdp) {
            if (members_gdp[dbName]) {
                // delete the group member from Guardium Group
                this.singleMemberUpdate(gAPI, grp_sys_id, dbName, true);
            }
            // mark processed
            members_gdp[dbName] = false;
        }
    },

    fetchGuardiumGroupMembers: function(gAPI, groupName) {
        var members_gdp = {};
        try {
            var response = gAPI.get('datasource_group', {
                groupName: groupName
            });
            if (response && response.data && response.data.length) {
                for (var i = 0; i < response.data.length; i++) {
                    members_gdp[response.data[i].name] = true;
                }
            }
        } catch (e) {}
        return members_gdp;
    },

    _connectToCM: function(cm_sys_id) {
		var gAPI;
        try {
			if (!cm_sys_id) {
				// get first active CM
				var gr_cm = GuardiumAPI.getFirstActiveCM();
				if (gr_cm) {
					cm_sys_id = gr_cm.getUniqueValue();
				}
			}
			if (!cm_sys_id) {
				gs.error(GuardiumExportDatasourceGroup.PREFIX +
					"- no active Central Manager defined"
				);
				return null;
			}
            // establish connection to the chosen CM
            gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm_sys_id, true));
            gAPI.authenticate();
            return gAPI;
        } catch (errAuth) {
            gs.error(GuardiumExportDatasourceGroup.PREFIX +
                "- unable to authenticate" + (gAPI ? ' with ' + gAPI.cm.fqdn : '')
            );
            return null;
        }
    },

    type: 'GuardiumExportDatasourceGroup'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-09 21:09:15</sys_created_on>
        <sys_id>4cf1990287a98150387c64280cbb35c9</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>GuardiumExportDatasourceGroup</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_guard">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_4cf1990287a98150387c64280cbb35c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-06-16 13:43:07</sys_updated_on>
    </sys_script_include>
</record_update>
