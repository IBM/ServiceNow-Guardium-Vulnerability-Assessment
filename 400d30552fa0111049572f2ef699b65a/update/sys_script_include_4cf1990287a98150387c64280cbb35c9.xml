<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumExportDatasourceGroup</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GuardiumExportDatasourceGroup</name>
        <script><![CDATA[var GuardiumExportDatasourceGroup = Class.create();
GuardiumExportDatasourceGroup.PREFIX = "Export to Guardium group: ";

GuardiumExportDatasourceGroup.prototype = {
    initialize: function() {},

    run: function() {
        var exported = 0;
        var gAPI = this._connectToCM();
        if (!gAPI) return exported;

        var gr_grp = new GlideRecord(GuardiumAPI.TABLE_GRP);
        gr_grp.query();

        // process the list of entries
        while (gr_grp.next()) {
            if (this.exportRecord(gAPI, gr_grp)) {
                exported++;
            }
        }
        return exported;
    },

    runOnce: function(gr_grp, cm_sys_id, isDelete) {
        var gAPI = this._connectToCM(cm_sys_id);
        if (!gAPI) return;
        if (isDelete) {
            return this.deleteRecord(gAPI, gr_grp);
        }
        return this.exportRecord(gAPI, gr_grp);
    },

    deleteRecord: function(gAPI, gr_grp) {
        // Delete the record
        // ** if no exception, then the delete was successful
        var resp = gAPI.del('datasource_group', {
            groupName: gr_grp.getValue('name')
        });

        // delete all associated group members
        var gr_memb = new GlideRecord(GuardiumAPI.TABLE_GRP_MEMBER);
        gr_memb.addQuery('group', '=', grp_sys_id);
        gr_memb.query();
        while (gr_memb.next()) {
            gr_memb.setWorkflow(false);
            gr_memb.deleteRecord();
        }

        // delete group
        gr_grp.setWorkflow(false);
        gr_grp.deleteRecord();
        return true;
    },

    exportRecord: function(gAPI, gr_grp) {
        // check for presence of CM reference
        var isUpdate =
            (gr_grp.getValue('group_name') != gr_grp.getValue('name')) &&
            (gr_grp.getValue('group_name') != "");

        var grp_resp = this.transform(gr_grp, isUpdate);
        if (!grp_resp || !grp_resp.group) {
            throw new Error(
                "Could not parse Data Source Group object: " +
                gr_grp.getValue('name')
            );
        }

        var grp_sys_id = gr_grp.getValue('sys_id');
        var response = null;
        var err = null;

        GuardiumLog.debug(
            (isUpdate ? 'Update' : 'Create') +
            ' group "' + (grp_resp.group['groupName'] || grp_resp.group['newGroupName']) + '" on ' + gAPI.cm.name,
            this.type, grp_resp.group
        );

        try {
            response = isUpdate ?
                gAPI.put('datasource_group', grp_resp.group) : gAPI.post('datasource_group', grp_resp.group);
        } catch (e) {
            if (isUpdate && e.code && (e.message || e).includes("doesn't exist")) {
                // Record might have been deleted on Guardium, try POST
                isUpdate = false;
                delete grp_resp.group['newGroupName'];
                GuardiumLog.debug(
                    'Error: ' + e.message + '\nTry: ' +
                    (isUpdate ? 'Update' : 'Create') +
                    ' group "' + (grp_resp.group['groupName'] || grp_resp.group['newGroupName']) + '" on ' + gAPI.cm.name,
                    this.type, grp_resp.group
                );
                try {
                    response = gAPI.post('datasource_group', grp_resp.group);
                } catch (e1) {
                    err = e1;
                }
            } else
            if (!isUpdate && e.code && (e.message || e).includes("already exists")) {
                // Record exists, do update
                isUpdate = true;
                grp_resp = this.transform(gr_grp, isUpdate);
                GuardiumLog.debug(
                    'Error: ' + e.message + '\nTry: ' +
                    (isUpdate ? 'Update' : 'Create') +
                    ' group "' + (grp_resp.group['groupName'] || grp_resp.group['newGroupName']) + '" on ' + gAPI.cm.name,
                    this.type, grp_resp.groupt
                );
                try {
                    response = gAPI.put('datasource_group', grp_resp.group);
                } catch (e2) {
                    err = e2;
                }
            } else {
                err = e;
            }
        }

        if (response && response.data) {
            // Success
            var grp_id = response.data['ID']; // if success ID=0 returned
            if (!gr_grp.getValue('fqdn_cm')) {
                // update ServiceNow record with sync info
                gr_grp.setValue('fqdn_cm', gAPI.cm.sys_id);
            }
            if (gr_grp.getValue('group_name') != gr_grp.getValue('name')) {
                gr_grp.setValue('group_name', gr_grp.getValue('name'));
            }

            // update ServiceNow record 
            gr_grp.setValue('action', 'synchronized');
            gr_grp.setWorkflow(false);
            gr_grp.update();

            // update custom properties
			try {
				this.synchronizeCustomFields(gAPI, grp_resp.group.name, grp_resp.customFields);
			} catch (e1) {
				GuardiumLog.error('Synchronize Custom Fields', this.type, e1);
			}

            // handle membership
			try {
				this.synchronizeMembers(gAPI, grp_resp.group, grp_sys_id);
			} catch (e2) {
				GuardiumLog.error('Synchronize Members', this.type, e2);
			}

            // done!
            return true;
        } else {
            // Error from Guardium
            var errMsg = "Could not synchronize Data Source Group: " + gr_grp.getValue('name');
            GuardiumLog.error(errMsg, this.type, err || (response ? response.body : ''));
            throw new Error(errMsg);
        }
    },

    transform: function(gr_grp, isUpdate) {
        var response = {customFields:''};
        var rec = {
            appTypeCriteria: gr_grp.getValue('application_type') || "Security Assessment",
            groupType: gr_grp.getValue('type') || 'STATIC',
            groupName: gr_grp.getValue('group_name') || gr_grp.getValue('name')
        };
        if ("DYNAMIC" == rec.groupType) {
            if (gr_grp.getValue('type')) {
                rec.dbTypeCriteria = gr_grp.getDisplayValue('type');
            }
            if (gr_grp.getValue('severity')) {
                rec.severityCriteria = gr_grp.getValue('severity');
            }
            if (gr_grp.getValue('custom_properties')) {
                response['customFields'] = gr_grp.getValue('custom_properties');
            }
        }
        if (isUpdate) {
            rec['newGroupName'] = gr_grp.getValue('name');
        }

        response['group'] = rec;
        return response;
    },

    getStaticMembers: function(cm, grp_sys_id) {
        var members_sn = {};
        var sn_map = new GlideRecord(GuardiumAPI.TABLE_GRP_MEMBER);
        sn_map.addQuery('fqdn_cm', '=', cm.sys_id);
        sn_map.addQuery('group', '=', grp_sys_id);
        sn_map.query();
        while (sn_map.next()) {
            var db_sys_id = sn_map.getValue('datasource');
            if (db_sys_id) {
                var sn_db = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                if (sn_db.get(db_sys_id)) {
                    members_sn[sn_db.getValue('name')] = db_sys_id;
                }
            }
        }
        return members_sn;
    },

    singleMemberUpdate: function(gAPI, gr_group, datasourceName, isDelete) {
            if ('STATIC' != gr_group.getValue('type')) {
                // if group is dynamic and it is updated to STATIC, workflow will sync all members
                gr_group.setValue('type', 'STATIC');
                gr_group.setWorkflow(true);
                return gr_group.update();
            }

            var eventType = isDelete ? 'remove' : 'add';
			GuardiumLog.debug(
				gr_group.getDisplayValue() + " [" + eventType + "] " + datasourceName, 
				this.type 
			);
            gAPI.post('datasource_group_' + eventType, {
                groupName: gr_group.getValue('name'),
                datasourceName: datasourceName
            });
    },

    synchronizeMembers: function(gAPI, g_rec, grp_sys_id) {
        if ('STATIC' != g_rec.groupType) return;

        // get the members from Guardium
        var members_gdp = this.fetchGuardiumGroupMembers(gAPI, g_rec.groupName);
        var members_sn = this.getStaticMembers(gAPI.cm, grp_sys_id);
        var grpName = g_rec.groupName;
        var dbName;

        var gr_group = new GlideRecord(GuardiumAPI.TABLE_GRP);
        if (!gr_group.get(grp_sys_id)) {
			// cannot process
			GuardiumLog.warn("Invalid Group sys_id: " + grp_sys_id, this.type);
			return;
		}

        // ServiceNow has the latest copy, insert members on Guardium 
        for (dbName in members_sn) {
            if (!members_gdp[dbName]) {
                // insert a new group member in Guardium 
                this.singleMemberUpdate(gAPI, gr_group, dbName, false);
            }
            // mark processed
            members_gdp[dbName] = false;
        }

        // If the database is no longer in ServiceNow group, remove from Guardium group
        for (dbName in members_gdp) {
            if (members_gdp[dbName]) {
                // delete the group member from Guardium Group
                this.singleMemberUpdate(gAPI, gr_group, dbName, true);
            }
            // mark processed
            members_gdp[dbName] = false;
        }
    },

    synchronizeCustomFields: function(gAPI, group_name, custom_fields) {
		if (!custom_fields) return;
		if (custom_fields) return;  // not supported yet
        try {
            gAPI.post('datasource_group_custom_prop_add', {
                name: group_name,
                customProps: custom_fields
            });
        } catch (e) {
            GuardiumLog.error('Synchronize Custom Fields', this.type, e);
        }
    },

    fetchGuardiumGroupMembers: function(gAPI, groupName) {
        var members_gdp = {};
        try {
            var response = gAPI.get('datasource_group', {
                groupName: groupName
            });
            if (response && response.data && response.data.length) {
                for (var i = 0; i < response.data.length; i++) {
                    members_gdp[response.data[i].name] = true;
                }
            }
        } catch (e) {}
        return members_gdp;
    },

    _connectToCM: function(cm_sys_id) {
        var gAPI;
        try {
            if (!cm_sys_id) {
                // get first active CM
                var gr_cm = GuardiumAPI.getFirstActiveCM();
                if (gr_cm) {
                    cm_sys_id = gr_cm.getUniqueValue();
                }
            }
            if (!cm_sys_id) {
                GuardiumLog.error("No active Central Manager defined", this.type);
                return null;
            }
            // establish connection to the chosen CM
            gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm_sys_id, true));
            gAPI.authenticate();
            return gAPI;
        } catch (errAuth) {
            throw new Error(
                "Unable to authenticate with " + (gAPI ? gAPI.cm.name : cm_sys_id) + '\n' + errAuth.message
            );
        }
    },

    type: 'GuardiumExportDatasourceGroup'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-09 21:09:15</sys_created_on>
        <sys_id>4cf1990287a98150387c64280cbb35c9</sys_id>
        <sys_mod_count>55</sys_mod_count>
        <sys_name>GuardiumExportDatasourceGroup</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_4cf1990287a98150387c64280cbb35c9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-02-10 14:48:55</sys_updated_on>
    </sys_script_include>
</record_update>
