<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_guard.GuardiumIntegrationBase</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GuardiumIntegrationBase</name>
        <script><![CDATA[var GuardiumIntegrationBase = Class.create();
/**
 * GuardiumIntegrationBase serves as a base class for synchronizing IBM Guardium data with ServiceNow
 * These data types are two-way synch'd
 * - databases
 * - database groups
 * - test exceptions
 * In order to achieve two-way synch, ServiceNow code watches the onDelete event and attempts to delete the Guardium record.  If that fails, a log entry marks the Guardium data for deletion.
 */
GuardiumIntegrationBase.prototype =
    Object.extendsObject(sn_vul.VulnerabilityIntegrationBase, {

        initialize: function() {
            // initialize preferences
            this.preferences = GuardiumAPI.getPreferences();
            this.log_level = this.preferences.getValue('log_level') - 0;
            this.num_of_days = this.preferences.getValue('number_of_days') - 0 || 30;
        },

        retrieveData: function() {
            if (this.log_level <= 0) {
                gs.info(this.type + " - retrieveData");
            }

            var contents = [];
            var gr_cm;

            try {
                // get ref to integrationRun
                var util = new sn_vul.VulnerabilityIntegrationUtils();
                this.integrationRunGr = util.getIntegrationRunRecord(this.integrationProcessGr);
                if (this.integrationRunGr) {
                    this.integrationRunGr.setValue('source', GuardiumAPI.TITLE);
                    this.integrationRunGr.update();
                }

                // is this for a particular CM ?
                var parameters = this.integrationRunGr.getValue("parameters");
                var fqdn_cm = "";
                if (parameters) {
                    var parms = parameters.split(";");
                    for (var i = 0; i < parms.length; i++) {
                        var kvPair = parms[i].split("=");
                        if ("fqdn_cm" == kvPair[0]) {
                            fqdn_cm = kvPair[1];
                            break;
                        }
                    }
                }

                // call any pre-script code
                this.beforeRetrieveData && this.beforeRetrieveData();

                // For every Central-Manager, get data
                gr_cm = new GlideRecord(GuardiumAPI.TABLE_CM);
                gr_cm.addActiveQuery();
                gr_cm.query();
                while (gr_cm.next()) {
                    if (fqdn_cm && fqdn_cm != gr_cm.getValue("fqdn")) {
                        continue;
                    }

                    var gAPI = new GuardiumAPI(gr_cm);
                    gAPI.authenticate();

                    // determine if this is the first sync for this central manager
                    var firstSync = !!fqdn_cm || this.isFirstSync(gr_cm.getValue('fqdn'), true);

                    var response = this.retrieveGuardiumData(gAPI, gr_cm, firstSync);
                    contents.push({
                        cm: {
                            name: gr_cm.getDisplayValue(gr_cm.getDisplayName()),
                            fqdn: gr_cm.getValue('fqdn'),
                            sys_id: gr_cm.getValue('sys_id'),
                            port: gr_cm.getValue('port'),
                            is_first_sync: firstSync
                        },
                        data: response ? response.data : []
                    });
                }
            } catch (e) {
                var errMsg = "Error while retreiving data from: " +
                    (gr_cm ? gr_cm.getValue('fqdn') : 'central manager') + "\n " + (e.message || JSON.stringify(e));

                if (errMsg.indexOf('No response for ECC message') >= 0) {
                    // add some help if ECC timed out
                    errMsg += "\nAdd more time by performing these steps: " +
                        "\n * Go to sys_properties.list" +
                        "\n * Edit or create: glide.http.outbound.max_timeout=300" +
                        "\n * Edit or create: glide.http.outbound.max_timeout.enabled=false";
                }

                gs.error(this.type + " - " + errMsg);
                if (this.integrationRunGr) {
                    this.integrationRunGr.setValue('source', GuardiumAPI.TITLE);
                    this.integrationRunGr.setValue('state', "complete");
                    this.integrationRunGr.setValue('substate', "failed");
                    this.integrationRunGr.setValue('notes', errMsg);
                    this.integrationRunGr.update();
                }
                // throw the error to stop the scheduled job
                throw errMsg;
            }

            return {
                contents: contents,
                contentType: "application/json",
                extension: ""
            };
        },

        // is first time setup?
        isFirstSync: function(fqdn, checkRuns) {
            return null == this.getPreviousRun();
        },

        // find a previous integration run
        getPreviousRun: function() {
            var gr = new GlideRecord("sn_vul_integration_run");
            gr.addQuery("integration", '=', this.integrationGr.sys_id);
            gr.addQuery("state", '=', "complete");
            gr.addQuery("substate", "=", "success");
            gr.orderByDesc('sys_created_on'); // newest first
            gr.query();
            while (gr.next()) {
                return gr;
            }
            return null;
        },

        calculateQueryFrom: function() {
            var gr = this.getPreviousRun();
            if (gr) {
                var dt = gr.getValue('start_datetime');
                if (dt) {
                    var dt_now = new GlideDateTime();
                    var dt_then = new GlideDateTime(dt);

                    // subtract to get the number of milliseconds difference
                    var millis = dt_now.getNumericValue() - dt_then.getNumericValue();
                    var minutes = Math.ceil(millis / 60000);
                    var relative = "NOW -" + minutes + " MINUTE";

                    if (minutes > 120) {
                        // if greater than 2 hours, return as relative HOUR value
                        var hours = Math.ceil(minutes / 60);
                        relative = "NOW -" + hours + " HOUR";

                        if (hours > 48) {
                            // if greater than 2 days, return as relative DAY value
                            var days = Math.ceil(hours / 24);
                            relative = "NOW -" + days + " DAY";
                        }
                    }
                    // return relative time
                    return relative;
                }
            }
            return '';
        },

        getPreviousRunDateTime: function(gAPI) {
            // check for first sync of this CM
            if (this.isFirstSync(gAPI.cm.fqdn)) return '';

            // else get the previous good run info
            var gr = this.getPreviousRun();
            if (gr) {
                var dt = gr.getValue('start_datetime');
                if (dt) {
                    // Convert to Guardium time
                    var gr_dt = gAPI.adjustTimeToGuardium(dt);
                    return gr_dt.toString();
                }
            }
            return '';
        },

        type: 'GuardiumIntegrationBase'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-27 14:03:14</sys_created_on>
        <sys_id>3e4cf0318799c110387c64280cbb35e8</sys_id>
        <sys_mod_count>56</sys_mod_count>
        <sys_name>GuardiumIntegrationBase</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_guard">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_3e4cf0318799c110387c64280cbb35e8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-06-16 15:30:55</sys_updated_on>
    </sys_script_include>
</record_update>
