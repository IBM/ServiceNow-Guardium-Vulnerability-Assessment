<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumIntegrationBase</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GuardiumIntegrationBase</name>
        <script><![CDATA[var GuardiumIntegrationBase = Class.create();
/**
 * GuardiumIntegrationBase serves as a base class for synchronizing IBM Guardium data with ServiceNow
 * These data types are two-way synch'd
 * - databases
 * - database groups
 * - test exceptions
 * In order to achieve two-way synch, ServiceNow code watches the onDelete event and attempts to delete the Guardium record.  If that fails, a log entry marks the Guardium data for deletion.
 */
GuardiumIntegrationBase.prototype =
    Object.extendsObject(sn_vul.VulnerabilityIntegrationBase, {

        initialize: function() {
            // initialize preferences
            this.preferences = GuardiumAPI.getPreferences(true);
            this.num_of_days = this.preferences.getValue('number_of_days') - 0 || 7;
        },

        retrieveData: function() {
            var contents = [];
            var gr_cm;
            var cm_count = 0;
            var cm_failures = 0;
            var errors = [];

            // get ref to integrationRun
            var util = new sn_vul.VulnerabilityIntegrationUtils();
            this.integrationRunGr = util.getIntegrationRunRecord(this.integrationProcessGr);

            // is this for a particular CM ?
            var parameters = this.getParameters();
            var full_sync = '1' == parameters["full_sync"];
            var cm_sys_id = parameters["cm_sys_id"] || '';
            var cm_fqdn = parameters["fqdn_cm"] || '';
            var cm_start = parameters['cm_start'] || 1;
            var cm_token = parameters["token"] || '';
            var sync_sys_id = parameters["sync_sys_id"] || '';
            var hasDataToProcess = false;

            // Update integration run record with source and parameters
            this.integrationRunGr.setValue('source', GuardiumAPI.TITLE);
            this.integrationRunGr.update();

            // call any pre-script code
            this.beforeRetrieveData && this.beforeRetrieveData();

            // For every Central-Manager, get data
            gr_cm = new GlideRecord(GuardiumAPI.TABLE_CM);
            gr_cm.orderBy('sys_created_on');
            gr_cm.query();
            while (gr_cm.next()) {
                var cm_name = gr_cm.getDisplayValue(gr_cm.getDisplayName());

                if (true != gr_cm.getValue('active')) {
                    GuardiumLog.debug('Skip processing CM: ' + cm_name, this.type, 'CM is not active');
                    continue;
                }
                cm_count++;

                if (hasDataToProcess) {
                    // tell framework to run the next CM in a separate process
                    this.hasMoreData(true);
                    this.setNextRunParameters(
                        this.buildParameters(gr_cm, 1, true, sync_sys_id)
                    );
                    GuardiumLog.debug("Queue next CM: " + cm_name, this.type);
                    break;
                }

                if (cm_sys_id && cm_sys_id != gr_cm.getValue('sys_id')) {
                    continue; // skip
                }

                try {
                    // tell framework to process the next CM separately if not running Daily sync
                    hasDataToProcess = !sync_sys_id;

                    // process this CM
                    var gAPI = new GuardiumAPI(gr_cm);
                    gAPI.authenticate(cm_token);
                    gAPI.integrationProcessGr = this.integrationProcessGr;

                    if (!cm_sys_id) {
                        // set the CM info so that it shows up in the process info
                        this.updateParameters(
                            this.buildParameters(gr_cm, cm_start, true, sync_sys_id, cm_token)
                        );
                    }

                    // determine if this is the first sync for this central manager
                    var firstSync = full_sync || this.isFirstSync(gAPI.cm, true);

                    var response = this.retrieveGuardiumData(gAPI, gr_cm, firstSync, cm_start);
                    contents.push({
                        cm: {
                            name: cm_name,
                            fqdn: gr_cm.getValue('fqdn'),
                            sys_id: gr_cm.getUniqueValue(),
                            port: gr_cm.getValue('port'),
                            number: gr_cm.getValue('number'),
                            is_first_sync: firstSync
                        },
                        data: response ? response.data : []
                    });

                    if (response && response.error) {
                        errors.push(response.error);
                    }

                    if (response && response.hasMoreData && response.startFrom) {
                        // tell framework to run the next chunk of data in a separate process
                        this.hasMoreData(true);
                        this.setNextRunParameters(
                            this.buildParameters(gr_cm, response.startFrom, true, sync_sys_id)
                        );
                        GuardiumLog.debug('Process more data on CM: ' + cm_name, this.type);
                        break;
                    }

                    // the sub-integration may have more data
                    if (this.hasMoreData(null)) {
                        break;
                    }

                } catch (e) {
                    cm_failures++;
                    var errMsg = "Error while communicating with: " +
                        (cm_name || 'central manager');

                    var errOrig = '' + (e.message || e);
                    if (errOrig.toLowerCase().includes('no response for ecc message')) {
                        // add some help if ECC timed out
                        errMsg += "\nAdd more time by performing these steps: " +
                            "\n * Go to sys_properties.list" +
                            "\n * Edit or create: glide.http.outbound.max_timeout=60" +
                            "\n * Edit or create: glide.http.outbound.max_timeout.enabled=false";
                    }

                    // Keep track of the error and continue to the next CM
                    GuardiumLog.error(errMsg, this.type, e);
                    errors.push(errMsg);

                    if (!cm_sys_id) {
                        // set the CM info so that it shows up in the process info
                        this.updateParameters(
                            this.buildParameters(gr_cm, cm_start, true, sync_sys_id)
                        );
                    }

                    // Push empty data to ProcessorBase
                    contents.push({
                        cm: {
                            name: gr_cm.getDisplayValue(gr_cm.getDisplayName()),
                            fqdn: gr_cm.getValue('fqdn'),
                            sys_id: gr_cm.getUniqueValue(),
                            port: gr_cm.getValue('port'),
                            number: gr_cm.getValue('number'),
                            is_first_sync: firstSync
                        },
                        error: errMsg,
                        data: []
                    });

                    continue;
                }
            }

            if (0 == cm_count) {
                // throw an error so that the incremental synchronization does not consider this run
                var errNoCM = "No active Central Managers defined.\n" +
                    "Go to IBM Guardium > Configuration > Central Managers" +
                    " to connect to your IBM Guardium appliance.";

                GuardiumLog.warn(errNoCM, this.type);
                if (this.integrationProcessGr) {
                    this.integrationProcessGr.setValue('notes', errNoCM);
                    this.integrationProcessGr.update();
                }
                if (this.integrationRunGr) {
                    this.integrationRunGr.setValue('source', GuardiumAPI.TITLE);
                    this.integrationRunGr.setValue('state', "complete");
                    this.integrationRunGr.setValue('substate', "failed");
                    this.integrationRunGr.setValue('notes', errNoCM);
                    this.integrationRunGr.update();
                }
                throw new Error(errNoCM);
            }

            if (errors.length > 0) {
                var errMisc = errors.join("\n");
                GuardiumLog.error(errors.join("\n"), this.type);
                if (this.integrationProcessGr) {
                    this.integrationProcessGr.setValue('notes', errors.join("\n"));
                    this.integrationProcessGr.update();
                }
                if (this.integrationRunGr && !this.hasMoreData(null)) {
                    this.integrationRunGr.setValue('source', GuardiumAPI.TITLE);
                    this.integrationRunGr.setValue('state', "complete");
                    this.integrationRunGr.setValue('substate', "failed");
                    this.integrationRunGr.setValue('fatal_error_message', errMisc);
                    this.integrationRunGr.update();
                }

                if (cm_failures == cm_count) {
                    // Every CM failed to run.  Collect errors and throw.
                    throw new Error(errMisc);
                }
            }

            return {
                contents: contents,
                contentType: "application/json",
                hasMoreData: this.hasMoreData(null),
                extension: ""
            };
        },

        getParameters: function() {
            var oParameters = {};
            try {
                oParameters = JSON.parse(
                    this.integrationProcessGr.getValue("parameters") ||
                    this.integrationRunGr.getValue("parameters") ||
                    '{}'
                );
            } catch (e) {}

            return oParameters || {};
        },

        updateParameters: function(oParameters) {
            try {
                if (0 == Object.keys(oParameters).length) return;
                this.integrationProcessGr.setValue(
                    "parameters", JSON.stringify(oParameters)
                );
                this.integrationProcessGr.update();
            } catch (e) {
                GuardiumLog.error('Update Integration Process', this.type, e);
            }
        },

        buildParameters: function(gr, startFrom, isCM, sync_sys_id, token) {
            try {
                var oParameters = (1 == startFrom && isCM) ? {} : this.getParameters();
                oParameters[isCM ? 'cm_name' : 'mu_name'] = gr.getDisplayValue(gr.getDisplayName());
                oParameters[isCM ? 'cm_sys_id' : 'mu_sys_id'] = gr.getValue('sys_id');
                oParameters[isCM ? 'cm_start' : 'mu_start'] = startFrom;
                if (isCM) {
                    oParameters['sync_sys_id'] = sync_sys_id || '';
                    //oParameters['token'] = token || '';
                }
                return oParameters;
            } catch (e) {}
            return {};
        },

        // is first time setup?
        isFirstSync: function(cm, checkRuns) {
            // if no previous successful runs, this is first sync
            if (null == this.getPreviousRun(cm.sys_id)) {
                return true;
            }
            return false;
        },

        // find a previous integration run
        getPreviousRun: function(cm_sys_id) {
            var gr = new GlideRecord("sn_vul_integration_run");
            gr.addQuery("integration", '=', this.integrationGr.sys_id);
            gr.addQuery("state", '=', "complete");
            gr.addQuery("substate", "=", "success");
            if (cm_sys_id) {
                gr.addQuery("parameters", 'CONTAINS', cm_sys_id);
            }
            gr.orderByDesc('sys_created_on'); // newest first
            gr.setLimit(1);
            gr.query();
            if (gr.next()) {
                return gr;
            }
            return null;
        },

        calculateQueryFrom: function(cm_sys_id) {
            var gr = this.getPreviousRun(cm_sys_id);
            if (gr) {
                var dt = gr.getValue('start_datetime');
                if (dt) {
                    var dt_now = new GlideDateTime();
                    var dt_then = new GlideDateTime(dt);

                    // subtract to get the number of milliseconds difference
                    var millis = dt_now.getNumericValue() - dt_then.getNumericValue();
                    var minutes = Math.ceil(millis / 60000);
                    var relative = "NOW -" + minutes + " MINUTE";

                    if (minutes > 120) {
                        // if greater than 2 hours, return as relative HOUR value
                        var hours = Math.ceil(minutes / 60);
                        relative = "NOW -" + hours + " HOUR";

                        if (hours > 48) {
                            // if greater than 2 days, return as relative DAY value
                            var days = Math.min(this.num_of_days, Math.ceil(hours / 24));
                            relative = "NOW -" + days + " DAY";
                        }
                    }
                    // return relative time
                    return relative;
                }
            }
            return '';
        },

        defaultQueryFrom: function(gAPI) {
            if (!this._defaultQueryFrom) {
                this._defaultQueryFrom = new GlideDateTime(
                    this.integrationRunGr ? this.integrationRunGr.getValue('sys_created_on') : null
                );
                this._defaultQueryFrom.addDaysUTC(0 - this.num_of_days);
            }
            // Convert to Guardium time
            var gr_dt = gAPI.adjustTimeToGuardium(this._defaultQueryFrom);
            return gr_dt.toString();
        },

        defaultQueryTo: function(gAPI) {
            if (!this._defaultQueryTo) {
                var dtNow = new Date();
                var twoDay = 48 * 60 * 60 * 1000;
                dtNow.setTime(twoDay + dtNow.getTime());
                var strNow = dtNow.toISOString().split('T')[0];
                this._defaultQueryTo = new GlideDateTime(strNow + ' 12:00:00');
            }
            // Convert to Guardium time
            var gr_dt = gAPI.adjustTimeToGuardium(this._defaultQueryTo);
            return gr_dt.toString();
        },

        getPreviousRunDateTime: function(gAPI) {
            // check for first sync of this CM
            if (this.isFirstSync(gAPI.cm)) return '';

            // else get the previous good run info
            var gr = this.getPreviousRun(gAPI.cm.sys_id);
            if (gr) {
                var dt = gr.getValue('start_datetime');
                if (dt) {
                    // Convert to Guardium time
                    var gr_dt = gAPI.adjustTimeToGuardium(dt);
                    return gr_dt.toString();
                }
            }
            return '';
        },

        type: 'GuardiumIntegrationBase'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-27 14:03:14</sys_created_on>
        <sys_id>3e4cf0318799c110387c64280cbb35e8</sys_id>
        <sys_mod_count>113</sys_mod_count>
        <sys_name>GuardiumIntegrationBase</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_3e4cf0318799c110387c64280cbb35e8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-10 18:26:58</sys_updated_on>
    </sys_script_include>
</record_update>
