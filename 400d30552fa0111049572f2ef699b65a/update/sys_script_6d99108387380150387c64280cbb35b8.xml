<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>true</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_ibmrt_gdpva_central_manager</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>central_manager_onDelete</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {
    var cm_id = current.sys_id;
    var name = current.getDisplayValue(current.getDisplayName());
    var deleted = {
        mu: 0,
        test: 0,
        tex: 0,
        integ: 0,
        db: 0,
        grp: 0,
    };
    var g_resp;

    try {
        // if this is the last active CM, disable scheduled jobs
        var count = 0;
        g_resp = new GlideRecord(GuardiumAPI.TABLE_CM);
        g_resp.addActiveQuery();
        g_resp.query();
        while (g_resp.next()) {
            if (cm_id != g_resp.getValue('sys_id')) {
                count++;
            }
        }

        if (0 == count) {
            // ---- disable all scheduled jobs
            var sn_rec = new GlideRecord(GuardiumAPI.TABLE_VUL_INTEG);
            sn_rec.addActiveQuery();
            sn_rec.query();
			if (sn_rec.hasNext()) {
				GuardiumLog.info('Deactivating integrations');
			}
            sn_rec.setValue('active', false);
			sn_rec.updateMultiple();
        }
    } catch (e) {}

    try {
        // delete all dependent assessment tests
        g_resp = new GlideRecord(GuardiumAPI.TABLE_AT);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.test++;
        }
    } catch (e) {}

    try {
        // delete all dependent test result summary entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_TR);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
        }
    } catch (e) {}

    try {
        // delete all test exception tests
        g_resp = new GlideRecord(GuardiumAPI.TABLE_TE);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.tex++;
        }
    } catch (e) {}

    try {
        // delete all dependent "Guardium machine" entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_MU);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.mu++;
        }
    } catch (e) {}

    try {
        // delete all dependent "Data Source" entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.db++;
        }
    } catch (e) {}

    try {
        // delete all dependent "Data Source Group Member" entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_GRP_MEMBER);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
        }
    } catch (e) {}

    try {
        // delete all dependent "Data Source Group" entries
        g_resp = new GlideRecord(GuardiumAPI.TABLE_GRP);
        g_resp.addQuery('fqdn_cm', "=", cm_id);
        g_resp.query();
        while (g_resp.next()) {
            g_resp.setWorkflow(false);
            g_resp.deleteRecord();
            deleted.grp++;
        }
    } catch (e) {}

    gs.addInfoMessage(
		name +
        "<br/>Number of IBM Guardium nodes removed: " + deleted.mu +
        "<br/>Number of IBM Guardium assessments removed: " + deleted.test +
        "<br/>Number of IBM Guardium test exceptions removed: " + deleted.tex +
        "<br/>Number of IBM Guardium data sources removed: " + deleted.db +
        "<br/>Number of IBM Guardium data source groups removed: " + deleted.grp
    );

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-06 12:13:51</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6d99108387380150387c64280cbb35b8</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>central_manager_onDelete</sys_name>
        <sys_overrides/>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_6d99108387380150387c64280cbb35b8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-05 17:48:24</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=6d99108387380150387c64280cbb35b8"/>
</record_update>
