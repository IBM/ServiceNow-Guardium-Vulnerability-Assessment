<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Guardium  REST API interface</description>
        <name>GuardiumAPI</name>
        <script><![CDATA[var GuardiumAPI = Class.create();

// -----------------------------------------------------
// Constants available without instantianting the class
// -----------------------------------------------------
GuardiumAPI.TITLE = "IBM Guardium";
GuardiumAPI.FULL_TITLE = "IBM Guardium Data Protection";

GuardiumAPI.REPORT_PAGE_SIZE = 200;

GuardiumAPI.FIELDS_AUTH = {
    "client_id": false,
    "client_secret": true,
    "username": false,
    "password": true
};

GuardiumAPI.TEST_CATEGORY = {
    AUTH: "Authentication",
    CONF: "Configuration",
    OTHER: "Other",
    PRIV: "Privilege",
    VER: "Version"
};

GuardiumAPI.TEST_TYPE == {
    APAR: "(APAR) Authorized programming analysis report",
    CAS: "(CAS) Configuration Auditing System",
    CIS_AND_STIG: "CIS and STIG",
    CIS_ONLY: "(CIS) Center for Internet Security",
    CVE: "(CVE) Common Vulnerabilities and Exposures",
    GUARDIUM_TEST: "Guardium Test",
    REFERENCE_MANUAL: "Reference Manual",
    STIG_ONLY: "(STIG) Security Technical Implementation Guide"
};

GuardiumAPI.DS_EXTRA_FIELDS_GET == {
    "ApplicationType": "application",
    "awsSecretsManagerConfig": "awsSecretsManagerConfigName",
    "CompatibilityMode": "compatibilityMode",
    "cyberarkConfig": "cyberarkConfigName",
    "CyberarkObjectName": "cyberarkObjectName",
    "DbHomeDir": "dbInstanceDirectory",
    "externalPasswordType": "externalPasswordTypeName",
    "hashicorpConfig": "hashicorpConfigName",
    "HashicorpPath": "hashicorpPath",
    "HashicorpRole": "hashicorpRole",
    "ImportServerSslCertificate": "importServerSSLcert",
    "KerberosConfig": "KerberosConfigName",
    "OsUsername": "dbInstanceAccount",
    "PasswordStored": "savePassword",
    "Region": "region",
    "SecretName": "secretName",
    "Severity": "severity",
    "Shared": "shared",
    "UseExternalPassword": "useExternalPassword",
    "UseKerberos": "useKerberos",
    "UseLdap": "useLDAP",
    "UseSsl": "useSSL"
};

GuardiumAPI.DS_EXTRA_FIELDS_POST = {
    "application": "Security Assessment",
    "awsSecretsManagerConfigName": "",
    "compatibilityMode": "",
    "cyberarkConfigName": "",
    "cyberarkObjectName": "",
    "dbInstanceAccount": "",
    "dbInstanceDirectory": "",
    "externalPasswordTypeName": "",
    "hashicorpConfigName": "",
    "hashicorpPath": "",
    "hashicorpRole": "",
    "importServerSSLcert": "0",
    "KerberosConfigName": "",
    "region": "",
    "savePassword": "1",
    "secretName": "",
    "severity": "",
    "shared": "true",
    "useExternalPassword": "0",
    "useKerberos": "0",
    "useLDAP": "0",
    "useSSL": "0"
};

GuardiumAPI.DS_SENSITIVE_FIELDS = [
    'password', 'cyberarkObjectName', 'secretName'
];

GuardiumAPI.TABLE_CM = 'x_ibmrt_gdpva_central_manager'; // central manager
GuardiumAPI.TABLE_CM_SYNC = 'x_ibmrt_gdpva_central_manager_sync'; // central manager sync
GuardiumAPI.TABLE_SYNC_INTEG = 'x_ibmrt_gdpva_sync_integration';
GuardiumAPI.TABLE_SYNC_DEP = 'x_ibmrt_gdpva_sync_dependency'; // integration dependencies
GuardiumAPI.TABLE_MU = 'x_ibmrt_gdpva_server'; // managed_units
GuardiumAPI.TABLE_DB = 'cmdb_ci_db_instance'; // ServiceNow database instances
GuardiumAPI.TABLE_DC = 'cmdb_ci_db_catalog'; // ServiceNow database catalogs
GuardiumAPI.TABLE_DB_GDP = 'x_ibmrt_gdpva_datasource'; // Guardium datasources
GuardiumAPI.TABLE_DB_MAP = 'x_ibmrt_gdpva_db_instance_transform_map'; // database instance field map
GuardiumAPI.TABLE_DC_MAP = 'x_ibmrt_gdpva_db_catalog_transform_map'; // database catalog field map
GuardiumAPI.TABLE_GRP = 'x_ibmrt_gdpva_datasource_group'; // database groups
GuardiumAPI.TABLE_GRP_MEMBER = 'x_ibmrt_gdpva_datasource_group_member';
GuardiumAPI.TABLE_VUL_INTEG = 'x_ibmrt_gdpva_vul_integration'; // scheduled jobs
GuardiumAPI.TABLE_AT = 'x_ibmrt_gdpva_assessment_test'; // assessment tests
GuardiumAPI.TABLE_TA = 'sn_vul_third_party_entry'; // tests available
GuardiumAPI.TABLE_TA_BASE = 'sn_vul_entry';
GuardiumAPI.TABLE_TE = 'x_ibmrt_gdpva_test_exception'; // test exceptions
GuardiumAPI.TABLE_TF = 'sn_vul_vulnerable_item'; // test failures
GuardiumAPI.TABLE_TR = 'x_ibmrt_gdpva_test_result_summary'; // test result summary
GuardiumAPI.TABLE_TRD = 'sn_vul_detection'; // test result detail
GuardiumAPI.TABLE_PREF = 'x_ibmrt_gdpva_preference';
GuardiumAPI.TABLE_EXP_TARGET = 'x_ibmrt_gdpva_database_export_target';

GuardiumAPI.EVENT_DEL_TEST = 'x_ibmrt_gdpva.DeleteAssessmentTest';
GuardiumAPI.EVENT_RUN_TEST = 'x_ibmrt_gdpva.RunTest';
GuardiumAPI.EVENT_RUN_INTEG = 'x_ibmrt_gdpva.RunIntegration';
GuardiumAPI.EVENT_EXPORT_DB = 'x_ibmrt_gdpva.ExportMatchingDatabase';
GuardiumAPI.EVENT_SYNC_DB = 'x_ibmrt_gdpva.ChangeDatabase';
GuardiumAPI.EVENT_SYNC_DC = 'x_ibmrt_gdpva.ChangeCatalog';
GuardiumAPI.EVENT_SYNC_DS = 'x_ibmrt_gdpva.ChangeDatasource';
GuardiumAPI.EVENT_SYNC_GRP = 'x_ibmrt_gdpva.ChangeDatasourceGroup';
GuardiumAPI.EVENT_SYNC_GRP_MEM = 'x_ibmrt_gdpva.ChangeDatasourceMembe';
GuardiumAPI.EVENT_SYNC_TE = 'x_ibmrt_gdpva.ChangeTestException';
GuardiumAPI.EVENT_SYNC_CM = 'x_ibmrt_gdpva.SyncBegin';
GuardiumAPI.EVENT_SYNC_CM_END = 'x_ibmrt_gdpva.SyncComplete';
GuardiumAPI.EVENT_DATA_IMP = 'x_ibmrt_gdpva.QueueDataImport';
GuardiumAPI.EVENT_DATA_EXP = 'x_ibmrt_gdpva.QueueDataExport';

GuardiumAPI.CMDB_COL_CM = 'fqdn_cm';
GuardiumAPI.CMDB_COL_DB_ID = 'datasource_id';
GuardiumAPI.CMDB_COL_DB_TYPE = 'datasource_type';

GuardiumAPI.GRP_COL_CM = 'fqdn_cm';
GuardiumAPI.GRP_COL_APP_TYPE = 'application_type';
GuardiumAPI.GRP_COL_DB_TYPE = 'datasource_type';
GuardiumAPI.GRP_COL_GRP_TYPE = 'type';
GuardiumAPI.GRP_COL_NAME = 'name'; // display name
GuardiumAPI.GRP_COL_NAME_ORIG = 'group_name'; // original name


// Find the CM
GuardiumAPI.getGlideRecordCM = function(fqdn_cm, isSysId) {
    if (!fqdn_cm) {
        throw new Error("Invalid central manager reference");
    }
    var g_resp = new GlideRecord(GuardiumAPI.TABLE_CM);
    if (isSysId) {
        g_resp.addQuery("sys_id", '=', fqdn_cm);
    } else {
        g_resp.addQuery("name", '=', fqdn_cm);
    }
    g_resp.setLimit(1);
    g_resp.query();
    if (g_resp.next()) {
        // found a record!
        return g_resp;
    }
    return null;
};

GuardiumAPI.getFirstActiveCM = function() {
    var gr_cm = new GlideRecord(GuardiumAPI.TABLE_CM);
    gr_cm.addActiveQuery();
    gr_cm.query();
    while (gr_cm.next()) {
        return gr_cm;
    }
    return null;
};

GuardiumAPI.getPreferences = function(createIfNull) {
    // return first active preference record
    var gr_pref = new GlideRecord(GuardiumAPI.TABLE_PREF);
    gr_pref.addActiveQuery();
    gr_pref.setLimit(1);
    gr_pref.query();
    if (gr_pref.next()) {
        return gr_pref;
    }

    // no pref record, create one
    gr_pref.initialize();

    if (createIfNull) {
        // create record
        gr_pref.insert();
        return gr_pref;
    }

    // else, return a temporary object
    return gr_pref;
};


// -----------------------------------------------------
// Instantiate the GuardiumAPI to use the prototype code
// -----------------------------------------------------
GuardiumAPI.prototype = {
    cm: {
        port: "8443"
    },
    midServerName: null,
    baseUrl: "",

    type: 'GuardiumAPI',

    // pass fqdn_ceAntral_manager and (optional) the machine you want to connect to
    initialize: function(cm_name_or_gr, fqdn_mu) {
        if (!cm_name_or_gr) {
            throw new Error("Central manager parameter cannot be empty");
        }

        // initialize preferences
        this.preferences = GuardiumAPI.getPreferences(true);
        this.log_level = this.preferences.getValue('log_level') - 0;
        this.page_size = this.preferences.getValue('page_size') || GuardiumAPI.REPORT_PAGE_SIZE;

        // Fields to scrape off of the CM record
        var ALL_FIELDS = [GuardiumAPI.FIELDS_AUTH, {
            "name": false,
            "tz_offset": false,
            "fqdn": false,
            "port": false,
            "sys_updated_on": false,
            "sys_id": false
        }];

        var gr_cm = ("object" == typeof(cm_name_or_gr)) ?
            cm_name_or_gr :
            GuardiumAPI.getGlideRecordCM(cm_name_or_gr);

        if (gr_cm) {
            for (var i = 0; i < ALL_FIELDS.length; i++) {
                for (var field in ALL_FIELDS[i]) {
                    var encrypted = ALL_FIELDS[i][field];

                    // extract value
                    this.cm[field] = encrypted ?
                        gr_cm.getElement(field).getDecryptedValue() : gr_cm.getValue(field);
                }
            }

            // get the MID server name from the reference value
            this.midServerName = gr_cm.getDisplayValue("mid_server");
            this.midServerRef = gr_cm.getValue("mid_server");

            // check status
            var gr_mid = new GlideRecord('ecc_agent');
            if (!gr_mid.get(this.midServerRef) || 'Up' != gr_mid.getValue('status')) {
                throw new Error(
                    'MID Server "' + this.midServerName + '" needs attention.' +
                    '\nStatus: ' + gr_mid.getValue('status')
                );
            }
        }
        if (!this.cm.fqdn) {
            throw new Error("Invalid central manager parameter");
        }

        // prepare baseUrl for all REST-API calls
        var host = this.cm.fqdn;
        var port = this.cm.port;
        if (fqdn_mu) {
            if ("object" == typeof(fqdn_mu)) {
                host = fqdn_mu.fqdn || host;
            } else {
                host = fqdn_mu || host;
            }
        }
        this.baseUrl = "https://" + host + ":" + port;
    },

    // returns oauth token
    authenticate: function() {
        if (!this.cm.fqdn) {
            throw new Error("Invalid central manager parameter");
        }

        var req, resp = null;
        var method = "POST";

        // Instantiate new REST Message
        req = new sn_ws.RESTMessageV2();
        req.setHttpMethod(method);
        req.setEndpoint(this.baseUrl + "/oauth/token");
        req.setRequestHeader("content-type", "application/x-www-form-urlencoded");

        // Set authData as form-urlencoded for the request
        var authData = [];
        authData.push("grant_type=password");
        for (var field in GuardiumAPI.FIELDS_AUTH) {
            authData.push(field + "=" + encodeURIComponent(this.cm[field]));
        }
        req.setRequestBody(authData.join("&"));

        // Execute and get response
        resp = this.executeRESTMessage(req, true, method);

        // Get token and other info
        if (resp.data) {
            this.oauthToken = resp.data.access_token;
            this.canRead = (resp.data.scope || '').toLowerCase().includes("read");
            this.canWrite = (resp.data.scope || '').toLowerCase().includes("write");

            var now = (new Date()).getTime(); // num of ms since 1970
            this.expires = now + (resp.data.expires_in || 10000);
        }

        return this.oauthToken;
    },

    // run a GET API
    get: function(resource, params) {
        return this.execute("GET", resource, params);
    },

    // run a POST API
    post: function(resource, params) {
        return this.execute("POST", resource, params);
    },

    // run a PUT API
    put: function(resource, params) {
        return this.execute("PUT", resource, params);
    },

    // run a DELETE API
    del: function(resource, params) {
        return this.execute("DELETE", resource, params);
    },

    execute: function(method, resource, params) {
        if (!this.oauthToken) {
            throw new Error("Invalid oauth token");
        }

        var req = null;

        // Instantiate new REST Message
        req = new sn_ws.RESTMessageV2();
        req.setRequestHeader("Authorization", "Bearer " + this.oauthToken);
        req.setRequestHeader("Content-Type", "application/json");

        // Configure 
        req.setHttpMethod(method);
        req.setEndpoint(this.baseUrl + "/restAPI/" + resource);

        if ("GET" == method || "DELETE" == method) {
            for (var p in params) {
                req.setQueryParameter(p, params[p]);
            }
        } else {
            req.setRequestBody(JSON.stringify(params));
        }

        try {
            // Execute and get response
            return this.executeRESTMessage(req, true, method);
        } catch (e) {
            // If this is OAuth timeout, renew token
            if (401 == e.status && 'invalid_token' == e.errorMessage) {
                // OAuth timeout
                GuardiumLog.debug('Invalid token: ' + this.oauthToken, this.type);
                var args = [method, resource, params];
                this.authenticate();
                // Retry 
                GuardiumLog.debug('Retry with new token: ' + this.oauthToken, this.type);
                return this.execute.apply(this, args);
            } else {
                throw e;
            }
        }
    },

    executeReport: function(reportName, reportParameters, startFrom, sortColumn, sortDescending) {
        var method = "POST";

        if (!this.oauthToken) {
            throw new Error("Invalid oauth token");
        }

        // Instantiate new REST Message
        var req = new sn_ws.RESTMessageV2();
        req.setRequestHeader("Authorization", "Bearer " + this.oauthToken);
        req.setRequestHeader("Content-Type", "application/json");

        // Configure 
        req.setHttpMethod(method);
        req.setEndpoint(this.baseUrl + "/restAPI/online_report");

        // Set default parameters
        var params = {
            QUERY_FROM_DATE: "NOW -1 WEEK",
            QUERY_TO_DATE: "NOW +1 HOUR",
            REMOTE_SOURCE: "%",
            SHOW_ALIASES: "no",
        };

        // Set override parameters
        for (var p in reportParameters) {
            params[p] = reportParameters[p];
        }

        // Log the request once 
        var indexFrom = startFrom || "1";
        var log = "GuardiumAPI REPORT request:" +
            "\n reportName: " + reportName +
            "\n indexFrom: " + indexFrom;
        for (p in params) {
            log += '\n ' + p + ': ' + params[p];
        }
        if (1 == startFrom) {
            GuardiumLog.info(log, this.type);
        } else {
            GuardiumLog.debug(log, this.type);
        }

        // Set the POST body
        var jsonBody = {
            reportName: reportName,
            indexFrom: indexFrom,
            reportParameter: params,
            fetchSize: this.page_size
            // sortColumn: string
            // sortType: "asc" (default) || "desc"
        };
        if (sortColumn) {
            jsonBody.sortColumn = sortColumn;
            jsonBody.sortType = sortDescending ? 'desc' : 'asc';
        }
        req.setRequestBody(JSON.stringify(jsonBody));

        try {
            // Execute and get response
            return this.executeRESTMessage(req, true, method, reportName, params['REMOTE_SOURCE']);
        } catch (e) {
            // If this is OAuth timeout, renew token
            if (401 == e.status && 'invalid_token' == e.errorMessage) {
                // OAuth timeout
                GuardiumLog.debug('Invalid token: ' + this.oauthToken, this.type);
                var args = [reportName, reportParameters, startFrom, sortColumn, sortDescending];
                this.authenticate();
                // Retry 
                GuardiumLog.debug('Retry with new token: ' + this.oauthToken, this.type);
                return this.executeReport.apply(this, args);
            } else {
                throw e;
            }
        }
    },

    getReportData: function(reportName, reportParameters, startFrom, sortColumn, sortDescending) {
        var reportData = [];
        var resp;
        for (var startIndex = startFrom || 1; startIndex > 0;) {
            resp = this.executeReport(reportName, reportParameters, startIndex, sortColumn, sortDescending);

            // Continue fetching data until the response is exhausted
            if (resp && resp.data && resp.data.length) {
                reportData = reportData.concat(resp.data);
                startIndex += resp.data.length;
                if (resp.data.length < this.page_size) {
                    // no more records
                    break;
                }
            } else {
                break;
            }
        }
        return {
            data: reportData
        };
    },


    // Function to execute a RESTMessage. Handles errors. Returns response if successful
    executeRESTMessage: function(req, waitForResponse, methodName, reportName, remoteHost) {
        var response, statusCode, contentType, responseJson, reason, errMsg = null;
        var dt_start = (new Date()).getTime();

        if (this.midServerName) {
            req.setMIDServer(this.midServerName);
            req.setEccParameter('skip_sensor', 'true');
        }

        if (this.midServerName || !waitForResponse) {
            // set ECC info when call is asychronous
            req.setEccCorrelator(this.cm.fqdn);

            // Set a custom topic for query
            var segments = req.getEndpoint().split("?")[0].split("/");
            var topic = segments.length > 0 ? segments[segments.length - 1].toLowerCase() : "unknown";
            req.setEccParameter("guardium.topic", topic);
        }

        // Set max wait timeout to 5 minutes
        req.setHttpTimeout(300000);

        // Log it
        if (!req.getEndpoint().includes('online_report')) {
            GuardiumLog.info("GuardiumAPI [" + (methodName || '').toUpperCase() +
                "] request:\n " + req.getEndpoint(), this.type);
        }

        // Do it
        try {
            if (waitForResponse) {
                response = req.execute();
            } else {
                // response will go to ECC queue ... use a business-rule to monitor ECC queue
                response = req.executeAsync();
                // extend property: glide.http.outbound.max_timeout
                response.waitForResponse(300);
            }
        } catch (e) {
            errMsg = '' + (e.message || e);
            if (errMsg.toLowerCase().includes("no response for ecc message request")) {
                errMsg = "Timed out waiting on response.";
                if (this.midServerName) {
                    errMsg += "\nCheck MID Server. SSH into the virtual machine hosting '" +
                        this.midServerName + "' MID Server. Is 'ping' successful to " + this.baseUrl;
                } else {
                    errMsg += "\nCannot reach " + this.baseUrl +
                        "\nIs IBM Guardium behind a firewall?" +
                        " If so, configure a MID server to access Guardium from ServiceNow.";
                }
            } else {
                errMsg = "Failed to execute REST message. Unhandled error.\n" + (e.stack || e);
            }
            throw new Error(errMsg);
        }

        if (!response) {
            var dt_end = (new Date()).getTime();
            var seconds = (dt_end - dt_start) / 1000;
            throw new Error(
                "No response detected after " + seconds + " seconds." +
                "\nAdd more time by changing these properties: " +
                "\n - glide.http.outbound.max_timeout=300" +
                "\n - glide.http.outbound.max_timeout.enabled=false"
            );
        }

        statusCode = response.getStatusCode();
        contentType = response.getHeader("Content-Type") || "";
        if (contentType.toLowerCase().includes("json")) {
            responseJson = (new global.JSON()).decode(response.getBody());
        }

        if (statusCode == 200) {
            // check for error
            if (responseJson && responseJson['ErrorCode']) {
                var err = new Error(responseJson['ErrorMessage']);
                err.code = responseJson['ErrorCode'];
                err.status = statusCode;
                throw err;
            }

            // add success message
            var len = responseJson ? responseJson.length || 1 : 1;
            var endpoints = req.getEndpoint().split('/');
            var endpoint = endpoints[endpoints.length - 1];
            if ('online_report' == endpoint) {
                endpoint = reportName ? 'online_report=' + reportName : endpoint;
                if ('%' != remoteHost && this.cm.fqdn != remoteHost) {
                    endpoint += ', host=' + remoteHost;
                }
            }
            GuardiumLog.debug(
                "GuardiumAPI response:\n " + endpoint + ", number of response objects=" + len,
                this.type
            );

            // all good, send back response
            return {
                data: responseJson,
                body: response.getBody(),
                headers: response.getHeaders()
            };
        } else if (statusCode >= 400) {
            reason = responseJson && (responseJson.error || responseJson.message) ?
                (responseJson.error || responseJson.message) : response.getBody();
            errMsg = "Guardium API call FAILED\n Status Code: " + statusCode + "\n Reason: " + reason;
            var errAuth = new Error(errMsg);
            errAuth.status = statusCode;
            errAuth.errorMessage = responseJson && (responseJson.error || responseJson.message);
            throw errAuth;
        } else if (response.haveError()) {
            reason = response.getErrorMessage();
            var msg = "";
            if (reason.toLowerCase().includes("unknown host")) {
                msg = "The Guardium host '" + this.cm.fqdn + "' may be incorrect or inaccessible.";
            } else
            if (reason.toLowerCase().includes('session contains no certificates')) {
                msg = "The Guardium host '" + this.cm.fqdn + "' is untrusted.";
            }
            if (msg) {
                if (this.midServerName) {
                    reason += "\n Check MID server '" + this.midServerName +
                        "' settings. " + msg;
                } else {
                    reason += "\n Check settings. " + msg;
                }
            }
            errMsg = "Reason: " + reason;
            throw new Error(errMsg);
        } else {
            errMsg = "Failed to call Guardium API: unknown error";
            throw new Error(errMsg);
        }
    },

    adjustTimeToGuardium: function(time, timezone) {
        // Convert ServiceNow time to Guardium time
        if (!time) return "";

        /* ** Can't use 'Packages' in a scoped application **
        	var gdt = new GlideDateTime(time);
        	var tzOffset = Packages.java.util.TimeZone.getTimeZone(this.time_zone).getRawOffset();
        	gdt.setNumericValue(gdt.getNumericValue() + tzOffSet);
        */

        /* ** Can't call GlideTimeZoneUtils from scoped application ** */

        /* ** Can't use 'setTZ' in a scoped application ** 
        	var gt = new GlideTime();
        	var UTCtoUser = gt.getTZOffset();
        	var gdt = new GlideDateTime();
        	gdt.setTZ(timezone);
        	var UTCtoTZ = gdt.getTZOffset();
        	var TZtoUser = UTCtoUser - UTCtoTZ;

        	gt.setValue(time);
        	gt.add(TZtoUser);
        	return gt;
        */

        // conver minutes to milliseconds
        var tz_offset = ((this.cm.tz_offset || 0) - 0) * 60000;

        // adjust time to Guardium local time
        var gdtt = new GlideDateTime(time);
        var gdt = new GlideDateTime(time);
        gdt.setNumericValue(gdt.getNumericValue() + tz_offset);

        return gdt.toString();
    },

    adjustTimeFromGuardium: function(time) {
        // Convert Guardium time to ServiceNow time
        if (!time) return "";

        // conver minutes to milliseconds
        var tz_offset = ((this.cm.tz_offset || 0) - 0) * 60000;

        // adjust time to UTC time
        var gdt = new GlideDateTime(time);
        gdt.setNumericValue(gdt.getNumericValue() - tz_offset);

        return gdt.toString();
    }

};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-03 21:53:35</sys_created_on>
        <sys_id>710eee8e87384d10387c64280cbb35c3</sys_id>
        <sys_name>GuardiumAPI</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_710eee8e87384d10387c64280cbb35c3</sys_update_name>
    </sys_script_include>
</record_update>
