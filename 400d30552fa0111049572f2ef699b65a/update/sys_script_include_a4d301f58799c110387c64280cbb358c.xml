<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorBase</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GuardiumProcessorBase</name>
        <script><![CDATA[var GuardiumProcessorBase = Class.create();
/**
 * GuardiumProcessorBase serves as a base class for processing incoming IBM Guardium data.
 * These data types are expected
 * - databases
 * - database groups
 * - test exceptions
 * - assessment tests
 * - test summaries (test results)
 * - test failures (detailed test results)
 * - managed units (nodes)
 */
GuardiumProcessorBase.counters = {
    inserted: 'ci_created',
    updated: 'ci_identified',
    total: 'import_ci',

    skipped: '',
    deleted: '',
    failed: '',

    inserted_vi: 'vi_created',
    updated_vi: 'vi_updated',
    duplicates_vi: 'vi_duplicates',
    total_vi: 'import_vi'
};

GuardiumProcessorBase.prototype =
    Object.extendsObject(sn_vul.VulnerabilityReportProcessorBase, {

        initialize: function() {
            // initialize counters
            for (var p in GuardiumProcessorBase.counters) {
                this[p] = 0;
            }

            // initialize preferences
            this.preferences = GuardiumAPI.getPreferences();
            this.log_level = this.preferences.getValue('log_level') - 0;

            // initialize "now"
            this.dt_now = (new GlideDateTime()).toString();
        },

        processReport: function(reportData) {
            if (this.log_level <= 0) {
                GuardiumLog.info("processReport", this.type);
            }

            try {
                // get ref to integrationRun
                var util = new sn_vul.VulnerabilityIntegrationUtils();
                this.integrationRunGr = util.getIntegrationRunRecord(this.integrationProcessGr);

                // Handle any setup before processing the data
                this.beforeProcessReport && this.beforeProcessReport(reportData);

                // create a map using cm_sys_id:db.id as a key
                var entry_map = {};

                for (var n = 0; n < reportData.contents.length; n++) {
                    var cm = reportData.contents[n].cm;
                    var data = reportData.contents[n].data;
                    var firstSync = reportData.contents[n].cm.is_first_sync;

                    // Handle any setup before each Central-Manager 
                    this.beforeCM && this.beforeCM(cm, data);

                    // Process data
                    var total = data.length;
                    for (var i = 0; i < total; i++) {
                        var key = this.processEntry(data[i], cm, firstSync);
                        if (key) {
                            entry_map[key] = data[i];
                        }
                    }

                    // Handle any teardown after each Central-Manager 
                    this.afterCM && this.afterCM(cm, entry_map);
                }

                // Handle any teardown after processing the data
                this.afterProcessReport && this.afterProcessReport(reportData, entry_map);

                if (!this.total) {
                    this.total = this.inserted + this.updated;
                }

                // show total CI on main screen
                if (!this.inserted_vi) this.inserted_vi = this.inserted;
                if (!this.updated_vi) this.updated_vi = this.updated;

                if (!this.total_vi) {
                    this.total_vi = this.inserted_vi + this.updated_vi;
                }

                var stats = [];
                var p;
                for (p in GuardiumProcessorBase.counters) {
                    if (this[p]) stats.push(p + ": " + this[p]);
                }
                if (this.log_level <= 1) {
                    if (stats.length > 0) {
                        GuardiumLog.info("Entities: \n " + stats.join('\n '), this.type);
                    } else {
                        GuardiumLog.info("No records processed", this.type);
                    }
                }

                // add information to the run. 
                var asLog = [];
                if (this.integrationProcessGr) {
                    for (p in GuardiumProcessorBase.counters) {
                        // if there is a field name associated with the property, then set the value
                        if (GuardiumProcessorBase.counters[p]) {
                            asLog.push(
                                GuardiumProcessorBase.counters[p] +
                                "=" + this[p]
                            );
                            this.integrationProcessGr.setValue(GuardiumProcessorBase.counters[p], this[p]);
                        }
                    }
                    this.integrationProcessGr.setValue('source', GuardiumAPI.TITLE);
                    this.integrationProcessGr.update();
                }

            } catch (e) {
                var errPre = "Error while processing data";
                GuardiumLog.error(errPre, this.type, e);
                if (this.integrationProcessGr) {
                    this.integrationProcessGr.setValue('source', GuardiumAPI.TITLE);
                    this.integrationProcessGr.setValue('state', "complete");
                    this.integrationProcessGr.setValue('substate', "failed");
                    this.integrationProcessGr.setValue('notes', errPre + '\n' + (e.stack || e.message || e));
                    this.integrationProcessGr.update();
                }

                // throw the error to stop the scheduled job
                throw new Error(errPre + '\n' + (e.stack || e.message || e));
            }
        },

        // find a previous integration run
        getPreviousRun: function() {
            var gr = new GlideRecord("sn_vul_integration_run");
            gr.addQuery("integration", '=', this.integrationGr.sys_id);
            gr.addQuery("state", '=', "complete");
            gr.addQuery("substate", "=", "success");
            gr.orderByDesc('sys_created_on'); // newest first
            gr.query();
            while (gr.next()) {
                return gr;
            }
            return null;
        },

        getLabel: function(key) {
            if (!key) return '';
            switch (key.trim()) {
                case 'CRITICAL':
                    return 'Critical';
                case 'MAJOR':
                    return 'Major';
                case 'MINOR':
                    return 'Minor';
                case 'CAUTION':
                    return 'Caution';
                case 'INFO':
                    return 'Informational';
                case 'APAR':
                    return '(APAR) Authorized programming analysis report';
                case 'CAS':
                    return '(CAS) Configuration Auditing System';
                case 'CIS_ONLY':
                    return '(CIS) Center for Internet Security';
                case 'STIG_ONLY':
                    return '(STIG) Security Technical Implementation Guide';
                case 'CIS_AND_STIG':
                    return 'CIS and STIG';
                case 'CVE':
                    return '(CVE) Common Vulnerabilities and Exposures';
                case 'AUTH':
                    return 'Authorization';
                case 'CONF':
                    return 'Configuration';
                case 'PRIV':
                    return 'Privilege';
                case 'VER':
                    return 'Version';
                default:
                    var arr = key.trim().split('_');
                    for (var a = 0; a < arr.length; a++) {
                        if (arr[a].length > 0) {
                            arr[a] = arr[a].charAt(0).toUpperCase() + arr[a].substr(1).toLowerCase();
                        }
                    }
                    return arr.join(' ');
            }
        },

        getKey: function(label) {
            if (!label) return '';
            switch (label.trim()) {
                case 'Informational':
                    return 'INFO';
                case '(APAR) Authorized programming analysis report':
                    return 'APAR';
                case '(CAS) Configuration Auditing System':
                    return 'CAS';
                case '(CIS) Center for Internet Security':
                    return 'CIS_ONLY';
                case '(STIG) Security Technical Implementation Guide':
                    return 'STIG_ONLY';
                case '(CVE) Common Vulnerabilities and Exposures':
                    return 'CVE';
                case 'Authorization':
                    return 'AUTH';
                case 'Configuration':
                    return 'CONF';
                case 'Privilege':
                    return 'PRIV';
                case 'Version':
                    return 'VER';
                default:
                    return label.trim().toUpperCase().replaceAll(' ', '_');
            }
        },

        type: 'GuardiumProcessorBase'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-27 14:33:06</sys_created_on>
        <sys_id>a4d301f58799c110387c64280cbb358c</sys_id>
        <sys_mod_count>58</sys_mod_count>
        <sys_name>GuardiumProcessorBase</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_a4d301f58799c110387c64280cbb358c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-26 19:08:23</sys_updated_on>
    </sys_script_include>
</record_update>
