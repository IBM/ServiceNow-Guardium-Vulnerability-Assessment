<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumScanProcessor</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Processes scan results</description>
        <name>GuardiumScanProcessor</name>
        <script><![CDATA[var GuardiumScanProcessor = Class.create();
GuardiumScanProcessor.prototype = Object.extendsObject(sn_vul.VulnerabilityScanProcessorBase, {
    PLUGIN_ID: "com.snc.vulnerability.guardium",

    initialize: function() {
        // initialize preferences
        this.preferences = GuardiumAPI.getPreferences();
        var checkbox = this.preferences.getValue('rescan_auto_import') || '';
        this.autoImport = ('1' == checkbox || 'true' == checkbox || true == checkbox);
    },

    /*
     * @param data = object as {contents: rawData, contentType: mimeTypeOfData, extension: fileExtension}
     */
    process: function(data, gr_sn_vul_scan) {
        // Logic to process report data provided by "data".
        // This should create lookup result records if problems were found by the
        // vendor.
        // Additionally, the state of the lookup record should be updated if the
        // lookup is complete,
        // or encounters an error that is not cleared by subsequent calls to the
        // server.
        if (!data || !data.readyForProcessing)
            return;

		var run_sys_id = '';
		var gri_script = GuardiumRunIntegration.getInstance();
		var gr_integ = new GlideRecord('sn_vul_integration');
		var integType = 'test_result:details';
		var integDef = gri_script.integrations[integType];
		if (!integDef || !gr_integ.get(integDef.sys_id)) {
			throw new Error("Invalid integration reference: " + integType);
		}

        if (this.autoImport) {
            var aoJobs = JSON.parse(gr_sn_vul_scan.getValue('parameters') || '{}');
            var hostsCM = {};
            var hostsRM = {};
            for (var i = 0; i < aoJobs.length; i++) {
                var oJob = aoJobs[i];
                if (!hostsCM[oJob.cmHost]) hostsCM[oJob.cmHost] = true;
                if (oJob.remoteHost && !hostsRM[oJob.remoteHost]) hostsRM[oJob.remoteHost] = true;
            }

            var oRemoteTypes = {
                'Aggregator': true,
                'Collector': true
            };
            var gr_cm = new GlideRecord(GuardiumAPI.TABLE_CM);
            gr_cm.addActiveQuery();
            gr_cm.query();
            while (gr_cm.next()) {
                var cm_name = gr_cm.getValue('name');
                if (!hostsCM[cm_name]) continue;

                // Kick off all units associated with the CM in parallel
                var parameters = {
                    cm_name: cm_name,
                    cm_sys_id: gr_cm.getUniqueValue(),
                    sync_sys_id: 'fake',
                    full_sync: false
                };
                var gr_mu = new GlideRecord(GuardiumAPI.TABLE_MU);
                gr_mu.addQuery('fqdn_cm', '=', gr_cm.getUniqueValue());
                gr_cm.orderBy('sys_created_on');
                gr_mu.query();
                while (gr_mu.next()) {
                    var mu_name = gr_mu.getDisplayValue();
                    var mu_type = gr_mu.getValue('unit_type');
                    if ((mu_type in oRemoteTypes) && !hostsRM[mu_name]) continue;

                    parameters['mu_name'] = mu_name;
                    parameters['mu_sys_id'] = gr_mu.getUniqueValue();

                    // Run Test Result Details integration
                    run_sys_id = gri_script._run(gr_integ, parameters);
                }
            }
        }

        gr_sn_vul_scan.setValue('integration_instance', gr_integ.getUniqueValue());
        gr_sn_vul_scan.setValue('integration_run', run_sys_id);
        gr_sn_vul_scan.setValue('scan_end_time', new GlideDateTime().getDisplayValue());
        gr_sn_vul_scan.setValue('state', 'complete');
        gr_sn_vul_scan.setValue('status_message', 
			this.autoImport ?
            'Scan is complete. The integration run will import the results into ServiceNow.' :
			'Scan is complete. Automatic import of test results has been disabled. Wait for daily import of test results into ServiceNow.'
		);
        gr_sn_vul_scan.setValue('raw_response', data.error || '');
        gr_sn_vul_scan.update();

        return;
    },

    type: 'GuardiumScanProcessor'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-07-18 15:15:16</sys_created_on>
        <sys_id>d15962a69704bd103bea7f200153afa0</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>GuardiumScanProcessor</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_d15962a69704bd103bea7f200153afa0</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-09-21 16:06:41</sys_updated_on>
    </sys_script_include>
</record_update>
