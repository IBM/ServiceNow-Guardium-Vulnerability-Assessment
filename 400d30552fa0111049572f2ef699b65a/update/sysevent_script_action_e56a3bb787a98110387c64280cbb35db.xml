<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sysevent_script_action">
    <sysevent_script_action action="INSERT_OR_UPDATE">
        <active>true</active>
        <condition_script/>
        <description/>
        <event_name>x_ibmrt_guard.ChangeCentralManager</event_name>
        <name>EventHandler_ChangeCentralManager</name>
        <order>100</order>
        <script><![CDATA[(function executeEventHandler(event, current) {
	if (!event || !current) return;
    var gAPI, gdt_now, doUpdate = false;
    try {
        gAPI = new GuardiumAPI(current);
        gAPI.authenticate();
        gdt_now = new GlideDateTime();
		current.setValue('status', "Verified");
    } catch (e) {
        gs.error("Error: \n " + JSON.stringify(e));
        throw (e.message || e);
    }

    // ---- get time-zone offset ----
    /* {
            "User Name": "admin",
            "Login Date And Time": "2022-02-14 12:14:17",
    } */
    try {
        var resp_logins = gAPI.executeReport('Guardium Logins', {
            QUERY_FROM_DATE: "NOW -1 MINUTE",
            QUERY_TO_DATE: "NOW +1 MINUTE",
            HostnameLike: '%'
        }, 1);
        if (resp_logins.data && resp_logins.data.length) {
            var dt_last = '';
            // Last is most recent
            for (var i = resp_logins.data.length - 1; i >= 0; i--) {
                var login = resp_logins.data[i];
                if (gAPI.cm.username == login['User Name']) {
                    dt_last = login['Login Date And Time'];
                    break;
                }
            }
            if (dt_last) {
                // calculate and store offset as a float
                var gdt_local = new GlideDateTime(dt_last);
                // minutes
                var tz_offset =
                    Math.round((gdt_local.getNumericValue() - gdt_now.getNumericValue()) / 60000);

				var current_offset = current.getValue('tz_offset') - 0;
				if (current_offset != tz_offset) {
					current.setValue('tz_offset', tz_offset);
					doUpdate = true;
				}
                gs.info("IBM Guardium last login time: " + dt_last + 
						"\nNow in UTC: " + gdt_now.toString() + 
						"\nTime Zone Offset: " + tz_offset
				);
            }
        }
    } catch (errLogins) {
        current.setValue('status', "Error: " + (errLogins.message || errLogins));
        doUpdate = true;
        gs.error("Error on Guardium Logins: \n " + JSON.stringify(errLogins));
    }


    // ---- test version ----
//     try {
//         var resp_unit_data = gAPI.get('unit_data');
//         if (!resp_unit_data || !resp_unit_data.data) {
//             throw "invalid IBM Guardium version. Must be v11.4 with patch, v11.5, or greater.";
//         }
//     } catch (errAPI) {
//         var errMsg = errAPI.message || errAPI;
//         if (errMsg.contains('404')) {
//             errMsg = "invalid IBM Guardium version. Must be v11.4 with patch, v11.5, or greater.";
//         }
//         current.setValue('status', "Warning: " + errMsg);
//         doUpdate = true;

//         gs.addErrorMessage("Warning: " + errMsg);
//         gs.error("Warning: " + errMsg);
//     }


    // ---- synchronize data ----
    if ("1" == current.getValue('active') && "1" != current.getValue('synchronized')) {
        // ----
        // run asynchronous command to sync units
        var events = [
            "asset:managed_unit",
            "asset:database",
            "vulnerability:third_party_test"

			// these require the above to complete first
			//  asset:database_group is called by asset:database
			//  vulnerability:assessment is called by asset:database_group
            //  test_result is called by vulnerability:assessment
			//  vulnerable_item is called by test_result
            //  vulnerability:exception is called by vulnerable_item
		];
        gs.eventQueue(
            GuardiumAPI.EVENT_RUN_INTEG,
            current, current.fqdn,
            events.join(','),
            ""
        );

        // update the record
        current.setValue('synchronized', true);
        doUpdate = true;
    }

    if (doUpdate) {
        current.setWorkflow(false); // avoid infinite loop
        current.update();
    }

})(event, current);]]></script>
        <synchronous>false</synchronous>
        <sys_class_name>sysevent_script_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-15 19:30:07</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>e56a3bb787a98110387c64280cbb35db</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>EventHandler_ChangeCentralManager</sys_name>
        <sys_overrides/>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_guard">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sysevent_script_action_e56a3bb787a98110387c64280cbb35db</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-06-03 14:29:38</sys_updated_on>
    </sysevent_script_action>
</record_update>
