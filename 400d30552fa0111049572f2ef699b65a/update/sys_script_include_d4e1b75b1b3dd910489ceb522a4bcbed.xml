<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumRunIntegration</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Finds and runs specified integration</description>
        <name>GuardiumRunIntegration</name>
        <script><![CDATA[var GuardiumRunIntegration = {
    MAX_ATTEMPTS: 200, // 10 hours of 3 minute intervals (20 per hour)
    DELAY_INCREMENT: 3000, // used to introduce a delay between jobs
    DELAY: 180000, // initial delay is 3 minutes

    integrations: {
        "asset:managed_unit": true,
        "asset:database": true,
        "asset:database_group": true,
        "test_result": true,
        "vulnerable_item": true,
        "vulnerability:assessment": true,
        "vulnerability:exception": true,
        "vulnerability:third_party_test": false
    },

    // Find the integration specified by type:subtype and run with parameters
    byType: function(integType, params) {
        var gr_integ = GuardiumRunIntegration._lookupByType(integType);
        if (!gr_integ) {
            throw new Error("Invalid integration reference: " + integType);
        }
        var oInteg = {
            name: gr_integ.getDisplayValue(gr_integ.getDisplayName()),
            sys_id: gr_integ.getUniqueValue(),
            sync_sys_id: '',
            count: 0
        };
        GuardiumRunIntegration.queue(gr_integ, oInteg, params);
    },

    // Run the specified integration with parameters
    byRef: function(integSysId, params) {
        var gr_integ = new GlideRecord(GuardiumAPI.TABLE_VUL_INTEG);
        if (!gr_integ.get(integSysId)) {
            throw new Error("Invalid integration reference: " + integSysId);
        }
        var oInteg = {
            name: gr_integ.getDisplayValue(gr_integ.getDisplayName()),
            sys_id: gr_integ.getUniqueValue(),
            sync_sys_id: '',
            count: 0
        };
        GuardiumRunIntegration.queue(gr_integ, oInteg, params);
    },

    // Queue up integration to be run
    queue: function(gr_integ, integ_info, params) {
        var oParameters = GuardiumRunIntegration.checkParameters(params, true);
        var oInteg = GuardiumRunIntegration.checkParameters(integ_info, true);
        GuardiumLog.debug(
            'parameters <- queue',
            GuardiumRunIntegration.type, {
                integration: oInteg,
                parameters: oParameters
            }
        );

        // initialize sync_integration record
        var gr_integ_sync = GuardiumRunIntegration._getSyncChildRecord(oInteg, oParameters, true);
        //         if (!oInteg['sync_sys_id']) {
        //             oInteg['sync_sys_id'] = gr_integ_sync.getUniqueValue();
        //         }

        // can this integration run?
        if (GuardiumRunIntegration._hasOutstandingDependencies(gr_integ, oParameters)) {
            try {
                // Check number of attempts
                oInteg['count'] = 1 + (oInteg['count'] - 0 || 0);
                if (oInteg['count'] >= GuardiumRunIntegration.MAX_ATTEMPTS) {
                    throw new Error('Queue integration "' + oInteg.name + '" too many attempts. Cancelling.');
                }


                // Queue up the event for later processing
                var dtCheckLater = new GlideDateTime();
                dtCheckLater.add(GuardiumRunIntegration.DELAY); // check again in 3 minutes
                gs.eventQueueScheduled(
                    'x_ibmrt_gdpva.QueueDataImport',
                    gr_integ,
                    JSON.stringify(oInteg),
                    JSON.stringify(oParameters),
                    dtCheckLater
                );

                // Add time between runs
                GuardiumRunIntegration.DELAY += GuardiumRunIntegration.DELAY_INCREMENT;
            } catch (e) {
                GuardiumLog.error('', GuardiumRunIntegration.type, e);
                GuardiumRunIntegration._completeAndFail(gr_integ_sync, oParameters, e.message || e);
            }
            return;
        }

        // Dependencies have been resolved, run it!
        var run_sys_id = GuardiumRunIntegration._run(gr_integ, oParameters, oInteg);

        // Update sync record with run info
        if (gr_integ_sync && run_sys_id) {
            gr_integ_sync.setValue('integration_run', run_sys_id);
            gr_integ_sync.setValue('state', 'running');
            gr_integ_sync.update();
        }
    },

    _run: function(gr_integ, oParameters, oInteg) {
        var name = gr_integ.getDisplayValue(gr_integ.getDisplayName());
        var vi_run_sys_id;
        try {
            // Create a run record to cause the Integration job to kick off
            var gr_vi_run = new GlideRecord("sn_vul_integration_run");
            gr_vi_run.initialize();
            gr_vi_run.setValue('parameters', oParameters ? JSON.stringify(oParameters) : '');
            gr_vi_run.setValue('integration', gr_integ.sys_id);
            gr_vi_run.setValue('implementation', gr_integ.getValue("instance"));
            gr_vi_run.setValue('source', GuardiumAPI.TITLE);
            gr_vi_run.setValue('state', 'ready');
            vi_run_sys_id = gr_vi_run.insert();

            // business rule calls startIntegrationRun onInsert
            // var vi_process_sys_id =
            //  (new sn_vul.VulnerabilityIntegrationUtils()).startIntegrationRun(gr_vi_run);

            // Announce start
            GuardiumLog.info(
                'Running integration for "' + name + '"',
                GuardiumRunIntegration.type
            );

        } catch (e) {
            GuardiumLog.error('', GuardiumRunIntegration.type, e);
            throw e;
        }

        // return the sys_id of the integ_run
        return vi_run_sys_id;
    },

    // Does this integration have dependencies?
    _hasOutstandingDependencies: function(gr_integ, oParameters) {
        var gr_sync;
        try {
            gr_sync = GuardiumRunIntegration._getSyncRecord(oParameters);
        } catch (e) {
            GuardiumLog.error('', GuardiumRunIntegration.type, e);
            return false;
        }

        var oInfo = {
            integration: {
                name: gr_integ.getDisplayValue(gr_integ.getDisplayName()),
                sys_id: gr_integ.getUniqueValue()
            },
            full_sync: '1' == gr_sync.getValue('full_sync'),
            incomplete: [],
            completed: GuardiumRunIntegration._getSyncChildIDArray(gr_sync.getUniqueValue(), true),
        };

        // es5 allows String.includes but not Array.includes
        var completed_integrations = oInfo['completed'].join(';');

        // get all dependency records and check if they have finished
        var gr_dep = new GlideRecord(GuardiumAPI.TABLE_SYNC_DEP);
        gr_dep.addQuery('integration', '=', gr_integ.getUniqueValue());
        gr_dep.query();
        while (gr_dep.next()) {
            var dep_name = gr_dep.getDisplayValue('dependency');
            var dep_sys_id = gr_dep.getValue('dependency');
            var full_sync_only = '1' == gr_dep.getValue('full_sync_only');

            // if not doing full_sync, don't check for full_sync_only deps
            if (oInfo.full_sync || !full_sync_only) {
                if (!completed_integrations.includes(dep_sys_id)) {
                    oInfo.incomplete.push({
                        name: dep_name,
                        sys_id: dep_sys_id
                    });
                }
            }
        }

        if (oInfo.incomplete.length) {
            // Some dependencies have not yet completed
            GuardiumLog.debug(
                'Waiting on dependencies',
                GuardiumRunIntegration.type,
                oInfo
            );
            return true;
        }

        return false;
    },

    // Return integration specified by type:subtype
    _lookupByType: function(integType) {
        var types = integType.split(":");
        var gr_integ = new GlideRecord(GuardiumAPI.TABLE_VUL_INTEG);
        gr_integ.addQuery("type", "=", types[0]);
        gr_integ.addQuery("sub_type", "=", types[1] || '');
        gr_integ.addActiveQuery();
        gr_integ.setLimit(1);
        gr_integ.query();
        if (gr_integ.next()) {
            return gr_integ;
        }
        return null;
    },

    // Return the sync record referenced by the parameters
    _getSyncRecord: function(oParameters) {
        var gr_sync = new GlideRecord(GuardiumAPI.TABLE_CM_SYNC);
        if (oParameters['sync_sys_id'] && gr_sync.get(oParameters['sync_sys_id'])) {
            return gr_sync;
        }
        throw new Error("Invalid parameters:\n " + (oParameters ? JSON.stringify(oParameters) : null));
    },

    _getSyncChildRecord: function(oInteg, oParameters, createIfNull) {

        // Attempt to open the record specified in oInteg
        var gr_integ_sync = new GlideRecord(GuardiumAPI.TABLE_SYNC_INTEG);
        if (!oInteg || !oInteg['sync_sys_id'] || !gr_integ_sync.get(oInteg['sync_sys_id'])) {

            // No valid child ref passed.  Use parent to find or create child.
            if (oParameters['sync_sys_id']) {
                var integ_sys_id = oInteg['sys_id'];
                gr_integ_sync.addQuery('parent', '=', oParameters['sync_sys_id']);
                gr_integ_sync.addQuery('integration', '=', integ_sys_id);
                gr_integ_sync.setLimit(1);
                gr_integ_sync.query();
                if (!gr_integ_sync.next() && createIfNull) {
                    // Create a new child record as none exists
                    gr_integ_sync.initialize();
                    gr_integ_sync.setValue('parent', oParameters['sync_sys_id']);
                    gr_integ_sync.setValue('integration', integ_sys_id);
                    // Save reference
                    if (oInteg) {
                        oInteg['sync_sys_id'] = gr_integ_sync.insert();
                    }
                }
            }
        }
        return gr_integ_sync;
    },

    _getSyncChildIDArray: function(sync_sys_id, completed) {
        var asChildren = [];
        var gr_integ_sync = new GlideRecord(GuardiumAPI.TABLE_SYNC_INTEG);
        gr_integ_sync.addQuery('parent', '=', sync_sys_id);
        gr_integ_sync.addQuery('state', completed ? '=' : '!=', 'complete');
        gr_integ_sync.query();
        while (gr_integ_sync.next()) {
            asChildren.push(gr_integ_sync.getValue('integration'));
        }
        return asChildren;
    },

    // Called by a business rule when sn_vul_integration_run is complete
    complete: function(gr_integ_run) {
        try {
            var oInteg = {
                name: gr_integ_run.getDisplayValue('integration'),
                sys_id: gr_integ_run.getValue('integration')
            };
            var oParameters = GuardiumRunIntegration.checkParameters(
                gr_integ_run.getValue('parameters'), true
            );
            GuardiumLog.debug(
                'parameters <- complete',
                GuardiumRunIntegration.type, {
                    integration: oInteg,
                    parameters: oParameters
                }
            );

            // Complete the sync_integ record
            var gr_integ_sync = GuardiumRunIntegration._getSyncChildRecord(
                oInteg, oParameters
            );
            gr_integ_sync.setValue('successful', true);
            gr_integ_sync.setValue('state', 'complete');
            gr_integ_sync.update();

            // Check if sync is done
            GuardiumRunIntegration._checkProgress(oParameters);

        } catch (e) {
            GuardiumLog.error('', GuardiumRunIntegration.type, e);
        }
    },

    // Called by queue on error
    _completeAndFail: function(gr_integ_sync, oParameters, errMsg) {
        try {
            // Complete the sync_integ record
            gr_integ_sync.setValue('successful', false);
            gr_integ_sync.setValue('state', 'complete');
            gr_integ_sync.setValue('message',
                'Failed: ' + errMsg
            );
            gr_integ_sync.update();

            // Check if sync is done
            GuardiumRunIntegration._checkProgress(oParameters);

        } catch (e) {
            GuardiumLog.error('', GuardiumRunIntegration.type, e);
        }
    },

    _checkProgress: function(oParameters) {
        try {
            var gr_sync = GuardiumRunIntegration._getSyncRecord(oParameters);
            // Check for incomplete child processes
            var asIncomplete = GuardiumRunIntegration._getSyncChildIDArray(
                gr_sync.getUniqueValue(), false);
            if (asIncomplete.length) {
                // Not done yet
                return;
            }

            // COMPLETE! All children are complete, gather results
            var completed = 0;
            var successful = 0;
            var asMsg = [];

            var gr_integ_sync = new GlideRecord(GuardiumAPI.TABLE_SYNC_INTEG);
            gr_integ_sync.addQuery('parent', gr_sync.getUniqueValue());
            gr_integ_sync.query();
            while (gr_integ_sync.next()) {
                completed += 1;
                if ('1' == gr_integ_sync.getValue('successful')) {
                    successful += 1;
                }
                if (gr_integ_sync.getValue('message')) {
                    asMsg.push(gr_integ_sync.getValue('message'));
                }
            }

            gr_sync.setValue('state', 'complete');
            gr_sync.setValue('completed', completed);
            gr_sync.setValue('successful', successful);
            gr_sync.setValue('message', asMsg.join('\n'));

            gr_sync.update();
        } catch (e) {
            GuardiumLog.error('', GuardiumRunIntegration.type, e);
        }
    },

    getValueFromParameters: function(params, key) {
        var oParameters = GuardiumRunIntegration.checkParameters(params);
        return oParameters[key] || '';
    },

    checkParameters: function(params, errorIfNull) {
        var oParameters = {};
        if ('string' == typeof(params)) {
            try {
                oParameters = JSON.parse(params);
            } catch (e) {
                GuardiumLog.warn(
                    'Could not parse parameters "' + params + '"',
                    GuardiumRunIntegration.type
                );
            }
        } else
        if ('object' == typeof(params) && null != params) {
            oParameters = params;
        }

        if (errorIfNull && !oParameters) {
            throw new Error('Parameters are null');
        }
        return oParameters || {};
    },

    type: 'GuardiumRunIntegration'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-13 11:52:56</sys_created_on>
        <sys_id>d4e1b75b1b3dd910489ceb522a4bcbed</sys_id>
        <sys_mod_count>58</sys_mod_count>
        <sys_name>GuardiumRunIntegration</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_d4e1b75b1b3dd910489ceb522a4bcbed</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-24 18:42:02</sys_updated_on>
    </sys_script_include>
</record_update>
