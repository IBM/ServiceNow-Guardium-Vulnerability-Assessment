<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumIntegrationTestResultSummary</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium test result summary synchronization script</description>
        <name>GuardiumIntegrationTestResultSummary</name>
        <script><![CDATA[var GuardiumIntegrationTestResultSummary = Class.create();
GuardiumIntegrationTestResultSummary.prototype =
    Object.extendsObject(GuardiumIntegrationBase, {

        reportName: "Assessment summary",

        retrieveGuardiumData: function(gAPI, gr_cm, firstSync, startFrom) {
            try {
                // get report name override
                this.reportName =
                    this.preferences.getValue('report_summary') || this.reportName;
            } catch (e) {}

            var count = 0;
            var failures = 0;
            var errors = [];
            var defaultFromDate = this.defaultQueryFrom(gAPI);
            var reportParams = {
                REMOTE_SOURCE: "",
                QUERY_TO_DATE: this.defaultQueryTo(gAPI),
                QUERY_FROM_DATE: firstSync ?
                    defaultFromDate : this.calculateQueryFrom(gAPI.cm.sys_id) || defaultFromDate
            };

            var gr_mu = new GlideRecord(GuardiumAPI.TABLE_MU);
			gr_mu.addActiveQuery();
            gr_mu.addQuery('fqdn_cm', '=', gAPI.cm.sys_id);
            gr_mu.orderBy('sys_created_on');
            gr_mu.query();

            // is this run for a particular MU ?
            var parameters = this.getParameters();
            var mu_sys_id = parameters["mu_sys_id"];
            var mu_start = parameters['mu_start'] || 1;
            var sync_sys_id = parameters["sync_sys_id"];
            var hasDataToProcess = false;

            // need to loop through all machines as tests can run on any unit_type
            var mu_data = [];
            while (gr_mu.next()) {
                var mu_name = gr_mu.getDisplayValue();

                if (true != gr_mu.getValue('active')) {
                    GuardiumLog.debug('Skip processing MU: ' + mu_name, this.type, 'MU is not active');
                    continue;
                }
                count++;

                if (hasDataToProcess) {
                    // tell framework to run the next MU in a separate process
                    this.hasMoreData(true);
                    this.setNextRunParameters(
                        this.buildParameters(gr_mu, 1)
                    );
                    break;
                }

                if (mu_sys_id && mu_sys_id != gr_mu.getValue('sys_id')) {
                    continue; // skip
                }

                if (!mu_sys_id) {
                    // set the MU info so that it shows up in the process info
                    this.updateParameters(
                        this.buildParameters(gr_mu, 1)
                    );
                }

                // Ask CM to run the report on a remote machine
                var remoteHost = gr_mu.getValue('fqdn');
                if (gAPI.cm.fqdn == gr_mu.getValue('fqdn') ||
                    'Manager' == gr_mu.getValue('unit_type') ||
                    'Standalone' == gr_mu.getValue('unit_type')) {
                    // Not remote
                    remoteHost = '';
                }
                reportParams['REMOTE_SOURCE'] = remoteHost;

                try {
                    // Oldest first
                    var response = gAPI.getReportData(
                        this.reportName, reportParams, mu_start, 'Execution Date');

                    mu_data.push({
                        name: gr_mu.getDisplayValue(gr_mu.getDisplayName()),
                        fqdn: gr_mu.getValue('fqdn'),
                        sys_id: gr_mu.getValue('sys_id'),
                        remote: !!remoteHost,
                        data: response ? response.data : []
                    });

                    // tell framework to process this MU again starting from a new position
                    if (response && response.hasMoreData && response.startFrom) {
                        // tell framework to run the next chunk of data in a separate process
                        this.hasMoreData(true);
                        this.setNextRunParameters(
                            this.buildParameters(gr_mu, response.startFrom)
                        );
                        GuardiumLog.debug('Process more data on MU: ' + mu_name, this.type);
                        break;

                    } else {
                        // tell framework to process the next MU separately
                        hasDataToProcess = !sync_sys_id;
                    }

                } catch (e) {
                    failures++;
                    errors.push(
                        (reportParams['REMOTE_SOURCE'] ? '' +
                            "Error while retrieving data from: " +
                            reportParams['REMOTE_SOURCE'] + '\n' : '') +
                        (e.message || e)
                    );
                    continue;
                }
            }

            if (count == failures) {
                throw new Error(errors.join('\n'));
            }

            return {
                error: errors.join('\n'),
                data: mu_data
            };
        },

        type: 'GuardiumIntegrationTestResultSummary'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-07 12:52:48</sys_created_on>
        <sys_id>5f0ee95387784150387c64280cbb3577</sys_id>
        <sys_mod_count>71</sys_mod_count>
        <sys_name>GuardiumIntegrationTestResultSummary</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_5f0ee95387784150387c64280cbb3577</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-09-08 17:37:26</sys_updated_on>
    </sys_script_include>
</record_update>
