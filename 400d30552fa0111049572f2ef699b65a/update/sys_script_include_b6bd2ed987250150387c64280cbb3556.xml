<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumExportTestException</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GuardiumExportTestException</name>
        <script><![CDATA[var GuardiumExportTestException = Class.create();
GuardiumExportTestException.PREFIX = "Export to Guardium: ";

GuardiumExportTestException.prototype = {
    initialize: function(gr_preferences) {
        this.preferences = gr_preferences || GuardiumAPI.getPreferences();
        this.log_level = this.preferences.getValue('log_level') - 0;
    },

    runOnce: function(gr_te, cm_sys_id) {
        var gAPI = this._connectToCM(cm_sys_id);
        if (!gAPI) return;
        return this.exportRecord(gAPI, gr_te);
    },

    exportRecord: function(gAPI, gr_te) {
        // check for presence of CM reference
        var isUpdate = !!gr_te.getValue('id');

        var g_rec = this.transform(gAPI, gr_te, isUpdate);
        if (!g_rec) return;

        var response = null;
        var err = null;
        try {
            response = isUpdate ? gAPI.put('test_exception', g_rec) : gAPI.post('test_exception', g_rec);
        } catch (e) {
            if (isUpdate && (e.code || (e.message || e).contains("doesn't exist"))) {
                // Record might have been deleted on Guardium, try POST
                isUpdate = false;
                g_rec = this.transform(gAPI, gr_te, isUpdate);
                try {
                    response = gAPI.post('test_exception', g_rec);
                } catch (e1) {
                    err = e1;
                }
            } else
            if (!isUpdate && (e.code || (e.message || e).contains("already exists"))) {
                // Record exists, do update
                isUpdate = true;
                g_rec = this.transform(gAPI, gr_te, isUpdate);
                try {
                    response = gAPI.put('test_exception', g_rec);
                } catch (e2) {
                    err = e2;
                }
            } else {
                err = e;
            }
        }

        if (response && response.data) {
            // Success: test-exception create and update returns ID: 0
            var te_id = response.data['ID'];
            if (te_id) {
                if (!gr_te.getValue('id')) {
                    gr_te.setValue('id', '' + te_id);
                }
            }
            if (!gr_te.getValue('fqdn_cm')) {
                // update ServiceNow record with sync info
                gr_te.setValue('fqdn_cm', gAPI.cm.sys_id);
            }
        }

        // Log the response
        gr_te.setValue('status', response ? response.body : errMsg);
        gr_te.setWorkflow(false);
        gr_te.update();

        if (err) {
            GuardiumLog(err.messsage, this.type, err);
            throw err;
        }
        return true;

    },

    transform: function(gAPI, gr_te, isUpdate) {

        // get a valid datasource name
        var dsName = '';
        if (gr_te.getValue('database_instance_reference')) {
            dsName = gr_te.getDisplayValue('database_instance_reference');
        }

        // get a valid test ref
        var testDesc = '',
            testDsType = '';
        if (gr_te.getValue('test_reference')) {
            var gr_test = new GlideRecord(GuardiumAPI.TABLE_TA);
            if (gr_test.get(gr_te.getValue('test_reference'))) {
                testDesc = gr_test.getValue('name');
                testDsType = gr_test.getValue('product');
            } else {
                testDesc = gr_te.getDisplayValue('test_reference');
            }
        }

        // from date must be greater than "now"
        var dtNow = new GlideDateTime();
        var dtFrom = new GlideDateTime(gr_te.getValue('valid_from'));
        var minLimit = dtNow.getNumericValue() + 60000;
        if (dtFrom.getNumericValue() < minLimit) {
            dtFrom.setNumericValue(minLimit);
        }

        // to date must be greater than from
        var dtTo = new GlideDateTime(gr_te.getValue('valid_to'));
        if (dtTo.getNumericValue() < dtFrom.getNumericValue()) {
            throw new Error(
                '"Valid To" time must be greater than "Valid From" and both values must be greater than now.'
            );
        }

        var rec = {
            assessmentScope: gr_te.getValue('assessment_scope').includes('Current') ? 'CURRENT' : 'ALL',
            datasourceScope: gr_te.getValue('datasource_scope').includes('Group') ?
                'GROUP' : gr_te.getValue('datasource_scope').includes('Single') ?
                'SINGLE' : 'ALL',
            explanation: gr_te.getValue('explanation'),
            testDescription: testDesc,
            datasourceType: testDsType,
            fromDate: gAPI.adjustTimeToGuardium(dtFrom.toString()),
            toDate: gAPI.adjustTimeToGuardium(gr_te.getValue('valid_to'))
        };

        if (isUpdate) {
            rec['testExceptionId'] = gr_te.getValue('id') - 0;
        }

        if ('CURRENT' == rec['assessmentScope']) {
            rec['assessmentDesc'] = gr_te.getValue('assessment_description');
        }

        if ('GROUP' == rec['datasourceScope']) {
            rec['datasourceGroup'] = gr_te.getValue('database_group');
        } else
        if ('SINGLE' == rec['datasourceScope']) {
            rec['datasourceName'] = dsName;
        }

        return rec;
    },

    _connectToCM: function(cm_sys_id) {
        var gAPI;
        try {
            if (!cm_sys_id) {
                // get first active CM
                var gr_cm = GuardiumAPI.getFirstActiveCM();
                if (gr_cm) {
                    cm_sys_id = gr_cm.getUniqueValue();
                }
            }
            if (!cm_sys_id) {
                GuardiumLog.error("No active Central Manager defined", this.type);
                return null;
            }
            // establish connection to the chosen CM
            gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm_sys_id, true));
            gAPI.authenticate();
            return gAPI;
        } catch (errAuth) {
            GuardiumLog.error("Unable to authenticate" + (gAPI ? ' with ' + gAPI.cm.fqdn : ''), this.type);
            return null;
        }
    },

    type: 'GuardiumExportTestException'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-02-07 19:44:53</sys_created_on>
        <sys_id>b6bd2ed987250150387c64280cbb3556</sys_id>
        <sys_mod_count>25</sys_mod_count>
        <sys_name>GuardiumExportTestException</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_b6bd2ed987250150387c64280cbb3556</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-08-26 19:10:54</sys_updated_on>
    </sys_script_include>
</record_update>
