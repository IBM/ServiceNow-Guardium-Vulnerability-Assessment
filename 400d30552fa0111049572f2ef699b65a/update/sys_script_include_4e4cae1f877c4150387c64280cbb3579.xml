<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorTestException</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium test-exception processor script</description>
        <name>GuardiumProcessorTestException</name>
        <script><![CDATA[var GuardiumProcessorTestException = Class.create();
GuardiumProcessorTestException.prototype =
    Object.extendsObject(GuardiumProcessorBase, {

        beforeCM: function(cm, data) {
            this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm.sys_id, true));
            //this.gAPI.authenticate();
        },

        processEntry: function(datum, cm) {
            var exists = false;

            // parse database record into a structure with ServiceNow fields
            var grd_rec = this.transform(datum, cm);

            // find duplicate
            var sn_rec = new GlideRecord(GuardiumAPI.TABLE_TE);
            sn_rec.addQuery('id', '=', grd_rec['id']);
            sn_rec.addQuery('fqdn_cm', cm.sys_id);
            sn_rec.query();
            if (sn_rec.next()) {
                exists = true;
            }

            if (!exists) {
                sn_rec.initialize();
            } else {
                // if no change, then skip
                var skip = true;
                for (var f in grd_rec) {
                    if (grd_rec[f] != sn_rec.getValue(f)) {
                        skip = false;
                    }
                }
                if (skip) {
                    this.skipped++;
                    return;
                }
            }

            // Map incoming fields to destination fields
            for (var p in grd_rec) {
                sn_rec.setValue(p, grd_rec[p]);
            }

            // Insert or Update
            var te_sys_id = '';
            sn_rec.setWorkflow(false);
            if (!exists) {
                te_sys_id = sn_rec.insert();
                this.inserted_vi++;
            } else {
                te_sys_id = sn_rec.update();
                this.updated_vi++;
            }

            // return unique key for the entry map
            return cm.sys_id + ':' + grd_rec.id;
        },

        afterCM: function(cm, entry_map) {
            // remove any deleted trim exceptions
            var sn_rec = new GlideRecord(GuardiumAPI.TABLE_TE);
            sn_rec.addQuery('fqdn_cm', '=', cm.sys_id);
            sn_rec.query();
            while (sn_rec.next()) {
                var _id = sn_rec.getValue('id');
                var key = '';
                if (_id) {
                    key = cm.sys_id + ':' + _id;
                }
                // if the entry does not have an ID or has been removed, delete it
                if (!key || !entry_map[key]) {
                    try {
                        // entry was removed on Guardium, delete the ServiceNow record
                        sn_rec.setWorkflow(false);
                        sn_rec.deleteRecord();
                        this.deleted++;
                    } catch (errDel) {}
                }
            }
        },

        transform: function(datum, cm) {
            var rec = {
                id: datum['testExceptionsId'],
                assessment_description: datum['assessmentDesc'],
                assessment_scope: datum['assessmentScope'],
				assessment_reference: '',
                datasource_scope: datum['datasourceScope'],
                approved_by: datum['Approver'],
                explanation: datum['explanation'],
                database_group: datum['datasourceGroup'],
                database_name: datum['datasourceName'],
                test_name: datum['testDescription'],
                test_reference: '',
                valid_from: this.gAPI.adjustTimeFromGuardium(datum['fromDate']),
                valid_to: this.gAPI.adjustTimeFromGuardium(datum['toDate']),
                fqdn_cm: cm.sys_id
            };

            // handle test reference
            var testName = datum['testDescription'];
            if (testName) {
                // find it
                var sn_test = new GlideRecord('sn_vul_third_party_entry');
                sn_test.addQuery('name', '=', testName);
                sn_test.addQuery('source', GuardiumAPI.TITLE);
                sn_test.query();
                if (sn_test.next()) {
                    rec['test_reference'] = sn_test.getUniqueValue();
                }
            }

            // handle db reference
            var dbName = datum['datasourceName'];
            if (dbName) {
                // find it
                var sn_db = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                sn_db.addQuery('fqdn_cm', '=', cm.sys_id);
                sn_db.addQuery('name', '=', dbName);
                sn_db.query();
                if (sn_db.next()) {
                    rec['database_instance_reference'] = sn_db.getUniqueValue();
                }
            }

            // handle group reference
            var dbGroup = datum['datasourceGroup'];
            if (dbGroup) {
                // find it
                var sn_grp = new GlideRecord(GuardiumAPI.TABLE_GRP);
                sn_grp.addQuery('fqdn_cm', '=', cm.sys_id);
                sn_grp.addQuery('name', '=', dbGroup);
                sn_grp.query();
                if (sn_grp.next()) {
                    rec['database_group_reference'] = sn_grp.getUniqueValue();
                }
            }

            // handle assessment reference
            var scope = datum['assessmentScope'];
            if ('Current assessment' == scope) {
                // find it
                var sn_assess = new GlideRecord(GuardiumAPI.TABLE_AT);
                sn_assess.addQuery('fqdn_cm', '=', cm.sys_id);
                sn_assess.addQuery('name', '=', rec.assessment_description);
                sn_assess.query();
                if (sn_assess.next()) {
                    rec['assessment_reference'] = sn_assess.getUniqueValue();
                }
            }

			return rec;
        },

        type: 'GuardiumProcessorTestException'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-07 17:23:38</sys_created_on>
        <sys_id>4e4cae1f877c4150387c64280cbb3579</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>GuardiumProcessorTestException</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_4e4cae1f877c4150387c64280cbb3579</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-06-16 20:04:16</sys_updated_on>
    </sys_script_include>
</record_update>
