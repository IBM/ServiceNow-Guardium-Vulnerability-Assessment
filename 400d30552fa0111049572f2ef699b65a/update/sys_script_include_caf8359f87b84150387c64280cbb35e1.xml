<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_guard.GuardiumIntegrationTestResultDetail</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium test result detail synchronization script</description>
        <name>GuardiumIntegrationTestResultDetail</name>
        <script><![CDATA[var GuardiumIntegrationTestResultDetail = Class.create();
GuardiumIntegrationTestResultDetail.prototype =
    Object.extendsObject(GuardiumIntegrationBase, {

        beforeRetrieveData: function() {
			// sn_vul_detection_key_config entry is used to customize
			//  lookup keys for VulnerableItem entries
			var sys_id_integ = this.integrationGr.getValue('integration');
			var configGr = new GlideRecord('sn_vul_detection_key_config');
			configGr.addQuery('source_integration', sys_id_integ);
			configGr.query();
			if (configGr.next()) {
				// record exists, exit
				return;
			}

			// create custom config entry to avoid use of "proof" in the VIT lookup keys
			configGr.initialize();
			configGr.setValue('proof', false);
			configGr.setValue('source', GuardiumAPI.TITLE);
			configGr.setValue('source_integration', sys_id_integ);
			configGr.setValue('update_status', sn_vul.StateUtils.DETECTIONS_UPDATE_JOB_STATUS.IN_PROGRESS);
			configGr.insert();
        },

        retrieveGuardiumData: function(gAPI, gr_cm, firstSync) {
            var reportParams = {
                REMOTE_SOURCE: "",
                QUERY_FROM_DATE: (!firstSync && this.calculateQueryFrom()) ||
                    'NOW -' + this.num_of_days + ' DAY'
            };

            var gr_mu = new GlideRecord(GuardiumAPI.TABLE_MU);
            gr_mu.addQuery('fqdn_cm', '=', gAPI.cm.sys_id);
            // gr_mu.addQuery('unit_type', '=', 'Collector'); tests can run on any machine
            gr_mu.query();

            // need to loop through all machines
            var mu_data = [];
            while (gr_mu.next()) {
                if (gAPI.cm.fqdn == gr_mu.getValue('fqdn')) {
                    // Not remote
                    reportParams['REMOTE_SOURCE'] = '';
                } else {
                    // Ask CM to run the report on a remote machine
                    reportParams['REMOTE_SOURCE'] = gr_mu.getValue('fqdn');
                }

                var response = gAPI.getReportData("Security Assessment Export", reportParams);
                mu_data.push({
                    name: gr_mu.getDisplayValue(gr_mu.getDisplayName()),
                    fqdn: gr_mu.getValue('fqdn'),
                    sys_id: gr_mu.getValue('sys_id'),
                    data: response ? response.data : []
                });
            }

            return {
                data: mu_data
            };
        },

        type: 'GuardiumIntegrationTestResultDetail'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-07 13:40:20</sys_created_on>
        <sys_id>caf8359f87b84150387c64280cbb35e1</sys_id>
        <sys_mod_count>41</sys_mod_count>
        <sys_name>GuardiumIntegrationTestResultDetail</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_guard">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_caf8359f87b84150387c64280cbb35e1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-06-15 17:09:48</sys_updated_on>
    </sys_script_include>
</record_update>
