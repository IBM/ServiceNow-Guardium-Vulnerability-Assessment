<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumScanner</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Handles scan requests</description>
        <name>GuardiumScanner</name>
        <script><![CDATA[var GuardiumScanner = Class.create();
GuardiumScanner.prototype = Object.extendsObject(sn_vul.VulnerabilityScannerBase, {

	// handle scan request
	processScan: function(gr_sn_vul_scan) {
		// 1. determine which data source and test is affected
		// 2. create new assessment test
		// 3. run assessment test
		// 4. change scan "state" to: "scanning"
		// 5. sync results
		
		// 6. change scan "state" to: "complete" | "error" | "canceled"
		//    status_message: "string"

		// Get the Vulnerable Item record
		var vit_sys_id = this.getVulItemSysID(gr_sn_vul_scan.getValue('sys_id'));
		var statusMsg = '\nA future release will automatically create an assessment test for this database, run the test, and import the result. \n\nFor now, run manually by going to menu: IBM Guardium > Tests > Assessment Tests, select the appropriate assessment, and run it.';
		try {
			var gr_vit = new GlideRecord('sn_vul_vulnerable_item');
			if (gr_vit.get(vit_sys_id)) {
				// Get CMDB_CI and TEST references
				var cmdb_sys_id = gr_vit.getValue('cmdb_ci'); 
				var test_sys_id = gr_vit.getValue('vulnerability');
				
				GuardiumLog.info(
					'Scan Request\ncmdb_ci: ' + gr_vit.getDisplayValue('cmdb_ci') + ', sys_id: ' + cmdb_sys_id +
					'\ntest: ' + gr_vit.getDisplayValue('vulnerability') + ', sys_id: ' + test_sys_id, 
					this.type,
					statusMsg
				);
		
				gr_sn_vul_scan.setValue('state', 'scanning');
				gr_sn_vul_scan.update();

				// Create a new assessment test
				// Run it 
			}
		} catch (e) {
			GuardiumLog.error('Unable to query table: sn_vul_vulnerable_item', this.type, e);
		}
		
		gr_sn_vul_scan.setValue('state', 'complete');
		gr_sn_vul_scan.setValue('status_message', statusMsg);
		gr_sn_vul_scan.update();

		return;
	},
	
	getVulItemSysID: function(scan_sys_id) {
		try {
			var gr_scan_src = new GlideRecord('sn_vul_m2m_scan_source');
			gr_scan_src.addQuery('sn_vul_scan', '=', scan_sys_id);
			gr_scan_src.setLimit(1);
			gr_scan_src.query();
			if (gr_scan_src.next()) {
				return gr_scan_src.getValue('source');
			}
		} catch (e) {
			GuardiumLog.error('Unable to query table: sn_vul_m2m_scan_source', this.type, e);
		}
		return '';
	},

    type: 'GuardiumScanner'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-18 16:23:00</sys_created_on>
        <sys_id>79dc9e161b0121106c968559cc4bcb79</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>GuardiumScanner</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_79dc9e161b0121106c968559cc4bcb79</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-19 18:26:51</sys_updated_on>
    </sys_script_include>
</record_update>
