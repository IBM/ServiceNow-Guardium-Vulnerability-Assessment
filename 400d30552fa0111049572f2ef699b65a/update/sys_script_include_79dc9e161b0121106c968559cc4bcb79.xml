<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumScanner</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Handles scan requests</description>
        <name>GuardiumScanner</name>
        <script><![CDATA[var GuardiumScanner = Class.create();
GuardiumScanner.prototype = Object.extendsObject(sn_vul.VulnerabilityScannerBase, {
    MAX_TIMEOUT: 5, // In hours
    PLUGIN_ID: "com.snc.vulnerability.guardium",

    initialize: function() {
        this.gAPI = null;
        this.asTargets = [];
    },

    // Step 1: validateScan, if false, kills the scan
    validateScan: function(gr_sn_vul_scan) {
        // Get the Vulnerable Item record
        this.asTargets = new sn_vul.VulnerabilityScanUtil().getSourceItemsToScan(gr_sn_vul_scan);
        // GuardiumLog.debug('Targets: ', this.type, this.asTargets);

        return this.asTargets.length > 0;
    },

    // Step 2: sendData (initiate scan). there is no expected response
    sendData: function(gr_sn_vul_scan) {
        try {
            var error = this._createAndRunAssessment(gr_sn_vul_scan);
            this._updateScanStatus(
                gr_sn_vul_scan,
                error ? "error" : "scanning",
                error
            );

            this._checkScanForTimeout(gr_sn_vul_scan, this.MAX_TIMEOUT);

        } catch (ex) {
            this._handleError(ex, gr_sn_vul_scan);
        }
    },

    // Step 3: retrieve "Guardium Job Queue" information
    retrieveData: function(gr_sn_vul_scan) {
        // Logic to get report data from a lookup source goes here.
        // This should return the report information that will be passed to the 
        // processor script
        var error = '';
        try {
            if (this._checkJobQueueDone(gr_sn_vul_scan)) {
                return {
                    contents: {},
                    contentType: "application/json",
                    extension: "",
                    error: "",
                    readyForProcessing: true
                };
            }

            this._checkScanForTimeout(gr_sn_vul_scan, this.MAX_TIMEOUT);

        } catch (ex) {
            error = ex.message;
            this._handleException(ex, gr_sn_vul_scan);
        }

        return {
            contents: {},
            contentType: "application/json",
            extension: "",
            error: error,
            readyForProcessing: false
        };

    },

    // handle scan request
    _createAndRunAssessment: function(gr_sn_vul_scan) {
        // 1. determine which data sources and tests are requested for rescan
        // 2. create new assessment test for each data source
        // 3. run assessment tests
        var aoJobs = [];
        var asCI = [];
        var asError = [];
        try {
            if (0 == this.asTargets.length) {
                this.asTargets = new sn_vul.VulnerabilityScanUtil().getSourceItemsToScan(gr_sn_vul_scan);
            }
            var targetTable = gr_sn_vul_scan.getValue('source_table');

            // Group all TEST references with their CI reference
            var oJobs = this._getScanJobs(targetTable, this.asTargets);
            GuardiumLog.debug('Scan Job', this.type, oJobs);

            // For each CI:
            // 1. create an assessment
            // 2. add data source
            // 3. add tests
            var cm_sys_id;
            for (var ci_sys_id in oJobs) {
                asCI.push(ci_sys_id);

                // Get Guardium name for CI
                var gr_ds = new GlideRecord('x_ibmrt_gdpva_datasource');
                gr_ds.addQuery('database_instance', '=', ci_sys_id);
                gr_ds.setLimit(1);
                gr_ds.query();
                if (!gr_ds.next()) {
                    continue;
                }
                var ds_sys_id = gr_ds.getUniqueValue();
                var ds_name = gr_ds.getValue('name');
                var remote_host = gr_ds.getDisplayValue('guardium_server') || '';

                // authenticate with CM associated with the DS
                if (cm_sys_id != gr_ds.getValue('fqdn_cm')) {
                    cm_sys_id = gr_ds.getValue('fqdn_cm');
                    if (!cm_sys_id) continue;
                    try {
                        this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm_sys_id, true));
                        this.gAPI.authenticate();
                    } catch (e) {
                        GuardiumLog.error(gr_ds.getDisplayValue('fqdn_cm'), this.type, e);
                        continue;
                    }
                }

                // Sort tests so we can throw out duplicates and create a consistent assessment name
                oJobs[ci_sys_id].sort();

                // Test the data source
                var test_result = this._testConnection(ds_name, remote_host);
                if (test_result) {
                    asError.push(test_result);
                    continue;
                }

                // Create assessment
                var assessment_name = this._createAssessment(this._generateName(ci_sys_id, oJobs[ci_sys_id]));
                if (!assessment_name) {
                    asError.push('Could not create assessment for "' + ds_name + '"');
                    continue;
                }

                // Add data source
                this._appendDatasource(assessment_name, ds_name);

                // Add Vulnerability Tests
                for (var j = 0, test_id = ''; j < oJobs[ci_sys_id].length; j++) {
                    if (test_id == oJobs[ci_sys_id][j]) continue; // don't process a duplicate

                    test_id = oJobs[ci_sys_id][j];
                    if (!test_id.startsWith('Guardium')) {
                        var gr_tpe = new GlideRecord('sn_vul_third_party_entry');
                        if (gr_tpe.get(test_id)) {
                            test_id = gr_tpd.getValue('id');
                        }
                    }
                    var gr_test = new GlideRecord('x_ibmrt_gdpva_test_definition');
                    gr_test.addQuery('servicenow_id', '=', test_id);
                    gr_test.setLimit(1);
                    gr_test.query();
                    if (gr_test.next()) {
                        this._appendTest(assessment_name, gr_test.getValue('test_description'));
                    }
                }

                // Run assessment
                var now = new GlideDateTime();
                var oJob = {
                    assessmentName: assessment_name,
                    cmHost: this.gAPI.cm.name,
                    remoteHost: remote_host,
                    startTime: now.toString()
                };
                if (this._runAssessment(assessment_name, remote_host)) {
                    GuardiumLog.info(
                        'Scan request initiated for assessment', this.type, oJob
                    );
                    aoJobs.push(oJob);
                }
            }

            if (0 == aoJobs.length) {
                throw new Error(
                    this.type + ': unable to run assessment tests. ' +
                    'Check Guardium > Application Log for additional details.\n' +
                    asError.join('\n')
                );
            }
        } catch (e) {
            if (!(e.message + '').startsWith(this.type)) {
                GuardiumLog.error('', this.type, e);
            }
            return e.message;
        }

        // add cmdb_ci entries being scanned
        gr_sn_vul_scan.setValue('cmdb_ci', asCI.join(','));
        gr_sn_vul_scan.setValue('parameters', JSON.stringify(aoJobs));
        gr_sn_vul_scan.update();

        return asError.join('\n');
    },

    _createAssessment: function(assessment_name) {
        var assessment_id;
        var props = {
            assessmentDescription: assessment_name
        };
        try {
            var resultGet = this.gAPI.get('assessment', props);
            assessment_id = resultGet.data && resultGet.data.length ? resultGet.data[0].assessment_id : '';
            GuardiumLog.debug("Successfully created assessment: " + assessment_name, this.type);
        } catch (e) {}
        if (!assessment_id) {
            try {
                var resultPost = this.gAPI.post('assessment', props);
                assessment_id = resultPost.data ? resultPost.data.ID : '';
            } catch (e) {
                GuardiumLog.error('Cannot create assessment: ' + assessment_name, this.type, e);
            }
        }
        return assessment_id ? assessment_name : '';
    },

    _runAssessment: function(assessment_name, remote_host) {
        try {
            var props = {
                assessmentDescription: assessment_name,
                api_target_host: remote_host
            };
            var resultPut = this.gAPI.put('execute_assessment', props);
            GuardiumLog.debug("Successfully executed assessment: " + assessment_name, this.type);

            if (resultPut.data) {
                return true;
            }
        } catch (e) {
            GuardiumLog.error('', this.type, e);
        }
        return false;
    },

    _testConnection: function(ds_name, remote_host) {
        try {
            var props = {
                name: ds_name,
                api_target_host: remote_host
            };
            var resultPost = this.gAPI.post('test_connection', props);
            // Non zero result means success
            if (resultPost.data && "0" != resultPost.data.ID) {
                GuardiumLog.debug("Successfully connected to: " + ds_name, this.type);
                return '';
            }
            return resultPost.data.Message || 'Could not connect to "' + ds_name + '"';
        } catch (e) {
            GuardiumLog.error('', this.type, e);
            return e.message;
        }
    },

    _appendDatasource: function(assessment_name, ds_name) {
        var props = {
            assessmentDescription: assessment_name,
            datasourceName: ds_name
        };
        try {
            this.gAPI.post('assessment_datasource', props);
            GuardiumLog.debug("Successfully appended data source: " + ds_name, this.type);
        } catch (e) {
            // ignore if data source is already added
            if ('4003' != e.code) {
                throw new Error(e.message);
            }
        }
    },

    _appendTest: function(assessment_name, test_name) {
        var props = {
            assessmentDescription: assessment_name,
            testDescription: test_name
        };
        try {
            this.gAPI.post('assessment_test', props);
            GuardiumLog.debug("Successfully appended test: " + test_name, this.type);
        } catch (e) {
            // ignore if test is already added
            if ('4005' != e.code) {
                throw new Error(e.message);
            }
        }
    },

    _checkJobQueueDone: function(gr_sn_vul_scan) {
        var ready = true;
        var aoJobs = JSON.parse(gr_sn_vul_scan.getValue('parameters') || '{}');
        var oStatusValues = {
            'COMPLETED': true,
            'HALTED': true,
            // 		'RUNNING':true,
            // 		'WAITING':true,
            // 		'RESUBMITTED':true,
            // 		'STOPPING':true,
            'ERROR': true,
            'CANCELED': true
        };

        var cm_host = "";
        for (var i = 0; i < aoJobs.length; i++) {
            var oJob = aoJobs[i];
            try {
                if (cm_host != oJob.cmHost) {
                    this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(oJob.cmHost, false));
                    this.gAPI.authenticate();
                    cm_host = oJob.cmHost;
                }

                var dtStart = new GlideDateTime(oJob.startTime);
                var reportParams = {
                    REMOTE_SOURCE: oJob.remoteHost,
                    QUERY_TO_DATE: this._defaultQueryTo(),
                    QUERY_FROM_DATE: this.gAPI.adjustTimeToGuardium(dtStart),
                    JobEntityDesc: oJob.assessmentName,
                    JobType: "ASSESSMENT"
                };
                var response = this.gAPI.getReportData(
                    'Guardium Job Queue', reportParams, 1, 'Queue Time', true);
                if (response && response.data && response.data.length > 0) {
                    if (response.data[0]['Status'] in oStatusValues) {
                        continue;
                    } else {
                        return false;
                    }
                }
            } catch (e) {
                GuardiumLog.error(JSON.stringify(oJob), this.type, e);
                continue;
            }
        }

        return ready;
    },

    _defaultQueryTo: function() {
        if (!this._defaultQueryToDate) {
            var dtNow = new Date();
            var twoDay = 48 * 60 * 60 * 1000;
            dtNow.setTime(twoDay + dtNow.getTime());
            var strNow = dtNow.toISOString().split('T')[0];
            this._defaultQueryToDate = new GlideDateTime(strNow + ' 12:00:00');
        }
        // Convert to Guardium time
        var gr_dt = this.gAPI.adjustTimeToGuardium(this._defaultQueryToDate);
        return gr_dt.toString();
    },

    _getScanJobs: function(targetTable, asTargets) {
        var oJobs = {};
        var i, cmdb_sys_id, test_name, target_sys_id, gr_target;

        switch (targetTable) {
            case 'sn_vul_vulnerability':
            case 'sn_vul_vulnerable_item':
                // Target is a VIT
                gr_target = new GlideRecord('sn_vul_vulnerable_item');
                for (i = 0; i < asTargets.length; i++) {
                    target_sys_id = asTargets[i];
                    if (gr_target.get(target_sys_id)) {
                        cmdb_sys_id = gr_target.getValue('cmdb_ci');
                        test_name = gr_target.getDisplayValue('vulnerability') || gr_target.getValue('vulnerability');
                        if (!oJobs[cmdb_sys_id]) {
                            oJobs[cmdb_sys_id] = [];
                        }
                        oJobs[cmdb_sys_id].push(test_name);
                    }
                }
                return oJobs;

            case 'sn_vul_entry':
            case 'sn_vul_third_party_entry':
                // Target is a 3rd Party Test, find asscoiated VITs
                for (i = 0; i < asTargets.length; i++) {
                    target_sys_id = asTargets[i];
                    gr_target = new GlideRecord('sn_vul_vulnerable_item');
                    gr_target.addActiveQuery();
                    gr_target.addQuery('vulnerability', '=', target_sys_id);
                    gr_target.query();
                    while (gr_target.next()) {
                        cmdb_sys_id = gr_target.getValue('cmdb_ci');
                        test_name = gr_target.getDisplayValue('vulnerability') || gr_target.getValue('vulnerability');
                        if (!oJobs[cmdb_sys_id]) {
                            oJobs[cmdb_sys_id] = [];
                        }
                        oJobs[cmdb_sys_id].push(test_name);
                    }
                }
                return oJobs;

            case 'sn_sec_cmn_src_ci':
            default:
                // Target is a CI, find asscoiated VITs
                for (i = 0; i < asTargets.length; i++) {
                    cmdb_sys_id = asTargets[i];
                    gr_target = new GlideRecord('sn_vul_vulnerable_item');
                    gr_target.addActiveQuery();
                    gr_target.addQuery('cmdb_ci', '=', cmdb_sys_id);
                    gr_target.query();
                    while (gr_target.next()) {
                        test_name = gr_target.getDisplayValue('vulnerability') || gr_target.getValue('vulnerability');
                        if (!oJobs[cmdb_sys_id]) {
                            oJobs[cmdb_sys_id] = [];
                        }
                        oJobs[cmdb_sys_id].push(test_name);
                    }
                }
                return oJobs;
        }
    },

    _generateName: function(ci_sys_id, asTests) {
        var hash = 0;
        var str = ci_sys_id + asTests.join('');
        for (var i = 0; i < str.length; i++) {
            hash = ((hash << 5) - hash) + str.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return ('_sn_' + hash).replace('-', '0');
    },

    _handleError: function(e, gr_sn_vul_scan) {
        GuardiumLog.error('', this.type, e);
        this._handleException(e, gr_sn_vul_scan);
    },

    type: 'GuardiumScanner'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-02-18 16:23:00</sys_created_on>
        <sys_id>79dc9e161b0121106c968559cc4bcb79</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name>GuardiumScanner</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_79dc9e161b0121106c968559cc4bcb79</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-11-30 20:52:08</sys_updated_on>
    </sys_script_include>
</record_update>
