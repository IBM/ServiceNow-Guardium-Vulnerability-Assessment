<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorDatasource</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium data-source processor script</description>
        <name>GuardiumProcessorDatasource</name>
        <script><![CDATA[var GuardiumProcessorDatasource = Class.create();
GuardiumProcessorDatasource.prototype =
    Object.extendsObject(GuardiumProcessorBase, {

        runReconcile: false,

        beforeProcessReport: function() {
            this.GuardTransform = new GuardiumTransformMap();
            this._initializeTransformCacheDI();
            this._initializeTransformCacheDC();
            var prop = gs.getProperty('x_ibmrt_gdpva.ci_lookup_enabled', true);
            this.doCILookup = 'true' == prop || '1' == prop || true == prop;
        },

        afterProcessReport_deprecated: function(reportData) {
            // run reconciliation after all data sources are imported
            if (reportData.hasMoreData) {
                return;
            }
            try {
                GuardiumLog.debug(
                    'Queue unmatched items reconciliation',
                    this.type
                );
                // run reconciliation engine asynchronously
                gs.eventQueue(
                    'x_ibmrt_gdpva.ReconcileUnmatched',
                    null,
                    this.integrationGr.getValue('instance'),
                    'Reconcile unmatched Guardium data sources',
                    ""
                );
            } catch (e) {
                GuardiumLog.error('Queue Reconcile Engine', this.type, e);
            }
        },

        beforeCM: function(cm, data) {
            this.ds_deleted = {};
            this.ds_changed = {};
            this.ds_not_found = {};

            this.dtNow = 'Synchronization on ' + (new GlideDateTime()).getValue();

            if (!this.gAPI) {
                this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm.sys_id, true));
                this.gAPI.authenticate();
            }

            // Run the reconcile engine on full sync
            this.runReconcile |= cm.is_first_sync;
        },

        afterCM: function(cm, entry_map) {
            var sn_rec;

            // trim databases on database change event
            for (var db_name in this.ds_deleted) {
                sn_rec = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                sn_rec.addQuery(GuardiumAPI.CMDB_COL_CM, '=', cm.sys_id);
                sn_rec.addQuery('name', '=', db_name);
                sn_rec.query();
                while (sn_rec.next()) {
                    sn_rec.setWorkflow(false);
                    sn_rec.setValue('status', GuardiumAPI.STATUS.DEPRECATED);
                    sn_rec.deleteRecord();
                    this.deleted++;
                    GuardiumLog.debug(
                        'Data Source deleted: ' + db_name,
                        this.type + '.afterCM'
                    );
                }
            }
        },

        processEntry: function(datum, cm, firstSync) {
            var grd_rec = null;

            // -------------------------------------
            // proccess 'Data-Sources' report entry
            // -------------------------------------
            var isChangeReport = (datum['Modified Entity'] && datum['Object Description']);
            if (!isChangeReport) {
                // parse database record into a structure with ServiceNow fields
                grd_rec = this.transformDatasourceReport(datum, cm.sys_id);

                // process datasource entry
                return this.processDatasource(grd_rec, true);
            }

            // -------------------------------------
            // else, process 'DataSource Changes' entry
            // -------------------------------------
            var grd_change = this.transformChangeReport(datum, cm.sys_id);
            if (!grd_change) return null;

            // handle operation
            var runCILookup = true; // always run even when importing many data sources
            switch (grd_change.operation) {
                case 'LOOKUP':
                    runCILookup = true;
                    break;

                case 'INSERT':
                case 'UPDATE':
                    // if the same datasource changed many times, ignore
                    var key = grd_change.operation + '-' + grd_change.name;
                    if (this.ds_changed[key]) {
                        return null;
                    }
                    this.ds_changed[key] = true;
                    // fall into code below the switch
                    break;

                case 'DELETE':
                    // process list after all changes are process as the name could have changed
                    this.ds_deleted[grd_change.name] = true;
                    return null;
                default:
                    // unhandled operation
                    return null;
            }

            // fetch backend record
            if (!this.ds_not_found[grd_change.name] && '-1' != grd_change.datasource_id) {
                try {
                    var params = grd_change.datasource_id ? {
                        id: grd_change.datasource_id
                    } : {
                        name: grd_change.name
                    };
                    var response = this.gAPI.get("datasource", params);
                    // GRD-62463: response from Guardium REST-API should have had an error code but does not.
                    //  If there is a valid data source, it will be an arrray.
                    // var response = this.gAPI.get('datasource', {name: grd_change.name});
                    if (!response || !response.data || !response.data.length) {
                        throw new Error(response.body);
                    } else {

                        // parse database record into a structure with ServiceNow fields
                        grd_rec = this.transformDatasourceEntry(response.data[0], cm.sys_id);

                        // process datasource entry
                        return this.processDatasource(grd_rec, runCILookup);
                    }
                } catch (e) {
                    if (!this.ds_not_found[grd_change.name]) {
                        this.ds_not_found[grd_change.name] = true;
                        GuardiumLog.warn('Error fetching datasource: ' + grd_change.name, this.type, e);
                    }
                }
            }

            // create a dummy datasource
            grd_rec = this.transformDatasourceReport({
                "Datasource Description": "Placeholder for test results since data source could not be imported",
                "Status": GuardiumAPI.STATUS.DEPRECATED,
                "Datasource Id": grd_change.datasource_id || '-1',
                "Datasource Name": grd_change.name,
                "Datasource Type": datum['Datasource Type'] || 'UNKNOWN'
            }, cm.sys_id);
            return this.processDatasource(grd_rec, runCILookup);

        },

        findDatasource: function(grd_rec, method) {
            var sn_ds = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
            switch (method) {
                case 'unid':
                    if (!grd_rec['source_id']) return null;
                    sn_ds.addQuery('source_id', '=', grd_rec['source_id']);
                    break;
                case 'id':
                    if (!grd_rec['datasource_id'] || '-1' == grd_rec['datasource_id']) return null;
                    sn_ds.addQuery('datasource_id', '=', grd_rec['datasource_id']);
                    sn_ds.addQuery('fqdn_cm', '=', grd_rec['fqdn_cm']);
                    break;
                case 'name':
                default:
                    if (!grd_rec['name']) return null;
                    sn_ds.addQuery('name', '=', grd_rec['name']);
                    sn_ds.addQuery('fqdn_cm', '=', grd_rec['fqdn_cm']);
                    break;
            }
            sn_ds.orderByDesc('sys_created_on'); // newest first
            sn_ds.setLimit(1);
            sn_ds.query();
            if (sn_ds.next()) {
                return sn_ds;
            }
            return null;
        },

        processDatasource: function(grd_rec, runCILookup) {
            if (!grd_rec['datasource_type'] || 'N_A' == grd_rec['datasource_type']) {
                GuardiumLog.warn(
                    'Invalid Data Source Type - Skip Synchronization',
                    this.type,
                    this.scrubDatasource(grd_rec)
                );
                this.skipped++;
                return;
            }

            // find record associated with CM
            var exists = true;
            var sn_rec = this.findDatasource(grd_rec, 'id');
            if (!sn_rec && !grd_rec['datasource_id']) {
                sn_rec = this.findDatasource(grd_rec, 'name');
                if (!sn_rec) sn_rec = this.findDatasource(grd_rec, 'unid');
            }
            if (!sn_rec) {
                sn_rec = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                sn_rec.setWorkflow(false);
                sn_rec.newRecord(); // we want a sys_id to pass to Discovered Item
                exists = false;
            }

            // make sure there is a database map record
            var ref = this.getDatabaseTypeRef(grd_rec);

            // Find and link CMDB_CI record
            var oCILookup = {
                di_sys_id: sn_rec.getValue('discovered_item') || '',
                ci_sys_id: sn_rec.getValue('database_instance') || ''
            };

            if (GuardiumAPI.STATUS.DEPRECATED != grd_rec['status']) {
                // If not there, add it to the "Discovered Item" table.
                oCILookup = this.createOrUpdateDiscoveredItem(oCILookup, grd_rec, runCILookup);
            }

            // create reference to existing CMDB_CI record
            grd_rec['database_instance'] = oCILookup.ci_sys_id || '';
            grd_rec['discovered_item'] = oCILookup.di_sys_id || '';

            if (exists) {
                // GRD-62328: test results report contains the "name" of the database 
                //  tested not the ID. Therefore, keep multiple records of the same 
                //  database to match with old test results.
                this.handleRenamedDatasources(sn_rec, grd_rec) || '';
            }

            // Map incoming fields to destination fields
            var doUpdate = this.copyAllFields(sn_rec, grd_rec);
            if (!doUpdate) {
                GuardiumLog.debug(
                    'Data Source Skip: ',
                    this.type + '.processDatasource', {
                        datasource_id: grd_rec['datasource_id'],
                        name: grd_rec['name']
                    }
                );
                this.skipped++;
                return grd_rec.source_id;
            } else {
                GuardiumLog.debug(
                    'Data Source ' + (exists ? 'Update' : 'Insert'),
                    this.type + '.processDatasource', {
                        datasource_id: grd_rec['datasource_id'],
                        name: grd_rec['name']
                    }
                );
            }

            // Insert or Update
            sn_rec.setWorkflow(false);
            sn_rec.setValue('action', 'synchronized');
            sn_rec.update(this.dtNow);
            if (!exists) {
                this.inserted++;
            } else {
                this.updated++;
            }

            // return a unique key for the database
            return grd_rec.source_id;
        },

        getDatabaseTypeRef: function(grd_rec) {
            var dbType = grd_rec['datasource_type'];
            if (!dbType) return null;
            var ref = this.getDatabaseFieldMap(dbType).sys_id || '';
            if (!ref) {
                // need to create a new DB MAP record as it does not exist
                var gr_map = new GlideRecord(GuardiumAPI.TABLE_DB_MAP);
                gr_map.initialize();
                gr_map.setValue('database_type', grd_rec['datasource_type']);
                ref = gr_map.insert();
                GuardiumLog.debug(
                    "Inserted new transform map: " + grd_rec['datasource_type'], this.type
                );
                // make a new cache map for the updated entry
                this._initializeTransformCacheDI();
            }
            return ref;
        },

        getInstanceClass: function(dbType) {
            return (this.getDatabaseFieldMap(dbType).target_class || 'cmdb_ci_db_instance');
        },

        getDatabaseFieldMap: function(dbType) {
            // special properties for the db type and class
            return this._lookupByType[dbType.toLowerCase()] || {};
        },

        getCatalogQueryMap: function(dbType) {
            // return a list of defined database attributes that can be used to find a matching database
            var map = {};

            // if the database_name or service_name corresponding field in ServiceNow is defined, use it
            var fieldMap = this._catalogByType[dbType.toLowerCase()] || this._catalogByType['*'];
            if (fieldMap) {
                for (var fld in {
                        database_name: true,
                        service_name: true
                    }) {
                    try {
                        var v = fieldMap[fld].sn_name;
                        if (v) map[v] = true;
                    } catch (e) {
                        GuardiumLog.warn("No DB Catalog transform for type: " + dbType, this.type);
                    }
                }
            }
            return map;
        },

        createOrUpdateDiscoveredItem: function(oCILookup, grd_rec, runCILookup) {
            var ci_sys_id = oCILookup.ci_sys_id;
            var di_sys_id = oCILookup.di_sys_id;
            var rule_sys_id = oCILookup.rule_sys_id || '';
            try {
                // Create a new record in the "Discovered Items" table
                // * similar to sn_vul.ImportHost._createSrc( ... )
                //
                var sn_dis = new GlideRecord("sn_sec_cmn_src_ci");
                if (di_sys_id) {
                    sn_dis.addQuery('sys_id', '=', di_sys_id);
                } else {
                    sn_dis.addQuery('source_id', '=', grd_rec.source_id);
                    sn_dis.orderByDesc('sys_created_on'); // newest first
                }
                sn_dis.setLimit(1);
                sn_dis.query();
                if (sn_dis.next()) {
                    di_sys_id = sn_dis.getUniqueValue();
                    // ensure there is a cmdb ref
                    if (!sn_dis.getValue('cmdb_ci')) {
                        if (!ci_sys_id) {
                            var oMatch = this.createOrUpdateUnmatchedCI(grd_rec, runCILookup);
                            if (oMatch && oMatch.ci_sys_id) {
                                ci_sys_id = oMatch.ci_sys_id;
                                rule_sys_id = oMatch.rule_sys_id;
                            }
                        }
                        sn_dis.setValue('cmdb_ci', ci_sys_id);
                        sn_dis.setValue('ci_lookup_rule', rule_sys_id);
                        sn_dis.setValue('state', this.getDiscoveredItemState(ci_sys_id));
                        sn_dis.setValue('source_id', grd_rec.source_id);
                        sn_dis.update();
                        GuardiumLog.debug('Updated Discovered Item for: ' + grd_rec.name, this.type);
                    } else {
                        if (grd_rec.source_id != sn_dis.getValue('source_id')) {
                            sn_dis.setValue('source_id', grd_rec.source_id);
                            sn_dis.update();
                        }
                        ci_sys_id = sn_dis.getValue('cmdb_ci');
                    }
                } else {
                    sn_dis.initialize();

                    sn_dis.setValue('resource_name', grd_rec.name);
                    sn_dis.setValue('resource_id', grd_rec.datasource_id);

                    sn_dis.setValue('source', this.integrationGr.getValue('instance')); // Integration Instance
                    sn_dis.setValue('source_id', grd_rec.source_id);
                    sn_dis.setValue('integration_run', this.integrationRunGr.getUniqueValue());

                    if (!ci_sys_id) {
                        var oMatch = this.createOrUpdateUnmatchedCI(grd_rec, runCILookup);
                        if (oMatch && oMatch.ci_sys_id) {
                            ci_sys_id = oMatch.ci_sys_id;
                            rule_sys_id = oMatch.rule_sys_id;
                        }
                    }
                    sn_dis.setValue('cmdb_ci', ci_sys_id);
                    sn_dis.setValue('ci_lookup_rule', rule_sys_id);
                    sn_dis.setValue('state', this.getDiscoveredItemState(ci_sys_id));

                    // Give the user some hint on the data-source info
                    grd_rec['serial_number'] = grd_rec.source_id;
                    grd_rec['serial_number_type'] = 'IBM Guardium Data Source';
                    sn_dis.setValue('source_data', JSON.stringify(grd_rec));

                    sn_dis.setValue('last_scan_date',
                        new GlideDateTime(this.integrationRunGr.getValue('sys_created_on')));
                    sn_dis.setValue('last_auth_scan_date',
                        new GlideDateTime(this.integrationRunGr.getValue('sys_created_on')));

                    di_sys_id = sn_dis.insert();
                    GuardiumLog.debug('Created Discovered Item for: ' + grd_rec.name, this.type);
                }
            } catch (e) {
                GuardiumLog.error('', this.type, e);
            }
            return {
                di_sys_id: di_sys_id,
                ci_sys_id: ci_sys_id,
                rule_sys_id: rule_sys_id
            };
        },

        getDiscoveredItemState: function(ci_sys_id) {
            var gr_ci = new GlideRecord('cmdb_ci');
            if (gr_ci.get(ci_sys_id)) {
                return 'sn_sec_cmn_unmatched_ci' == gr_ci.getRecordClassName() ? 'unmatched' : 'matched';
            }
            return 'unmatched';
        },

        createOrUpdateUnmatchedCI: function(grd_rec, runCILookup) {
            var oResponse = {
                ci_sys_id: '',
                rule_sys_id: ''
            };
            try {
                // Find existing record and return it
                var gr_ci = new GlideRecord("cmdb_ci");
                gr_ci.addQuery('serial_number', '=', grd_rec.source_id);
                gr_ci.orderByDesc('sys_created_on'); // newest first
                gr_ci.setLimit(1);
                gr_ci.query();
                if (gr_ci.next()) {
                    return gr_ci.getUniqueValue();
                }

                // Search for a match using CI Lookup Rules
                var oMatch = runCILookup ? this.lookupByRuleCI(grd_rec) : null;
                if (oMatch && oMatch.ci_sys_id) {
                    return oMatch;
                }

                // Else, create a new record in the "Unmatched CI" table
                gr_ci = new GlideRecord("sn_sec_cmn_unmatched_ci");
                gr_ci.initialize();

                gr_ci.setValue('discovery_source', GuardiumAPI.TITLE);
                gr_ci.setValue('serial_number', grd_rec.source_id);

                // GRD-69589: add both ip_address and fqdn
                if (GuardiumAPI.ipv4or6.test(grd_rec.fqdn)) {
                    gr_ci.setValue('ip_address', grd_rec.fqdn);
                } else {
                    // must exist for CI identification
                    gr_ci.setValue('ip_address', '127.0.0.1');
                }
                gr_ci.setValue('fqdn', grd_rec.fqdn);
                gr_ci.setValue('category', 'Database');
                gr_ci.setValue('subcategory', grd_rec.datasource_type);
                gr_ci.setValue('short_description', grd_rec.datasource_description || GuardiumAPI.TITLE);

                // Fields that must exist in order for CI Identification to work
                // - ip_address is set above
                gr_ci.setValue('name', grd_rec.name);
                gr_ci.setValue('mac_address', 'Unknown');
                gr_ci.setValue('serial_number', grd_rec.source_id);

                // Give the user some hint on the data-source info
                grd_rec['serial_number'] = grd_rec.source_id;
                grd_rec['serial_number_type'] = 'IBM Guardium Data Source';
                gr_ci.setValue('source_data', JSON.stringify(grd_rec));

                gr_ci.setValue('last_discovered',
                    new GlideDateTime(this.integrationRunGr.getValue('sys_created_on')));

                oResponse.ci_sys_id = gr_ci.insert();
                GuardiumLog.debug('Created Unmatched CI for: ' + grd_rec.name, this.type);

            } catch (e) {
                GuardiumLog.error('', this.type, e);
            }
            return oResponse;
        },

        lookupByRuleCI: function(ds) {
            if (!this.doCILookup) return {};

            // Runs sn_sec_cmn_ci_lookup_rule
            var gr_rule = new GlideRecord('sn_sec_cmn_ci_lookup_rule');
            gr_rule.addActiveQuery();
            gr_rule.addQuery('source', '=', '24f0f5c687744d10387c64280cbb350c'); // IBM Guardium rules
            gr_rule.addQuery('method', '=', 'script');
            gr_rule.orderBy('order');
            gr_rule.query();
            while (gr_rule.next()) {
                try {
                    var evaluator = new GlideScopedEvaluator();
                    evaluator.putVariable('rule', gr_rule);
                    evaluator.putVariable('sourceValue', '');
                    evaluator.putVariable('sourcePayload', ds);
                    evaluator.putVariable('returnObj', {});
                    var ci_sys_id = evaluator.evaluateScript(gr_rule, "script", {});
                    if (ci_sys_id) {
                        return {
                            rule_sys_id: gr_rule.getUniqueValue(),
                            ci_sys_id: ci_sys_id
                        };
                    }
                } catch (e) {
                    GuardiumLog.error('', this.type, e);
                }
            }
            return {};
        },

        handleRenamedDatasources: function(sn_orig, grd_rec) {
            // GRD-62328: test results report contains the "name" of the database 
            //  tested not the ID. Therefore, keep multiple records of the same 
            //  database with different "name" values to match with old test results.
            //
            // We want the original doc to get the new DB name due to 
            //  asset_id reference in "Test Result Details" engine.
            // Otherwise, if the asset_id changes, then the Vulnerability Detection Item
            //  unique key changes.  And that causes an issue matching it with VIT.
            //
            if (grd_rec['name'] != sn_orig.getValue('name')) {
                var sys_id_orig = sn_orig.getUniqueValue();
                var found = false;

                // Find all records with same ID and make sure old names are marked "Deprecated"
                var sn_rec = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                sn_rec.addQuery('datasource_id', '=', grd_rec['datasource_id']);
                sn_rec.addQuery('fqdn_cm', '=', grd_rec['fqdn_cm']);
                sn_rec.addQuery('status', '!=', GuardiumAPI.STATUS.DEPRECATED);
                sn_rec.addQuery('name' != grd_rec['name']);
                sn_rec.orderBy('sys_created_on'); // oldest first
                sn_rec.query();
                while (sn_rec.next()) {
                    found = true;
                    GuardiumLog.info('Data Source Renamed\nOriginal: "' +
                        sn_rec.getValue('name') +
                        '"\nNew: "' + grd_rec['name'] + '"',
                        this.type
                    );
                    sn_rec.setValue('status_detail',
                        'A renamed IBM Guardium data source was detected.\n\n' +
                        'After test result details are imported and linked to appropriate' +
                        ' CMDB configuration items, it is safe to remove this data source.'
                    );


                    // Set fields
                    sn_rec.setValue('status', GuardiumAPI.STATUS.DEPRECATED);
                    sn_rec.setValue('status_date', this.dt_now);
                    sn_rec.setValue('action', 'synchronized');

                    // Save
                    sn_rec.setWorkflow(false);
                    if (sys_id_orig == sn_rec.getUniqueValue()) {
                        sn_rec.insert();
                        // restore original
                        sn_orig.get(sys_id_orig);
                    } else {
                        sn_rec.update(GuardiumAPI.STATUS.DEPRECATED);
                    }
                }
                return found ? sys_id_orig : '';
            }
        },

        copyAllFields: function(gr, json) {
            var doUpdate = false;
            for (var p in GuardiumAPI.DS_FIELD_MAP) {
                var v = json[p] || '';
                if (GuardiumAPI.DS_FIELD_MAP[p] && v && 'function' == typeof(v.substring)) {
                    v = v.substring(0, GuardiumAPI.DS_FIELD_MAP[p]); // honor max length
                }
                if (v != gr.getValue(p)) {
                    doUpdate = true;
                    gr.setValue(p, v);
                }
            }
            return doUpdate;
        },

        _getFieldName: function(fldGRD) {
            switch (fldGRD) {
                case 'attributes':
                    return 'running_process_key_parameters';
                case 'custom_fields':
                    return 'attributes';
                case 'custom_url':
                    return 'running_process_command';
                case 'datasource_description':
                    return 'description';
            }
            return fldGRD;
        },

        _initializeTransformCacheDI: function() {
            this._lookupByType = {};

            var map = this.GuardTransform.getMapDI();
            for (var db_type in map) {
                var db_type_lower = db_type.toLowerCase();
                var entry = map[db_type_lower];

                this._lookupByType[db_type_lower] = {
                    sys_id: entry['sys_id'],
                    target_class: entry['database_instance_class'],
                    target_database_name: entry['database_name'] || '',
                    target_service_name: entry['service_name'] || ''
                };
            }
        },

        _initializeTransformCacheDC: function() {
            this._catalogByType = {};

            var map = this.GuardTransform.getMapDC();
            for (var db_type in map) {
                var db_type_lower = db_type.toLowerCase();
                var entry = map[db_type_lower];

                this._catalogByType[db_type_lower] = {
                    sys_id: entry['sys_id'],
                    target_class: entry['class_name'],
                    target_database_name: entry['database_name'] || '',
                    target_service_name: entry['service_name'] || ''
                };
            }
        },

        transformChangeReport: function(datum, cm_sys_id) {
            /*
            			"Timestamp": "2022-03-14 11:15:55",
            			"User Name": "servicenow",
            			"Activity Type": "3",
            			"Modified Entity": "DATASOURCE",
            			"Object Description": "Fake Oracle 90001 Updated",
            			"Host Name": "abc04",
            			"Activity Type ID": "3",
            			"Activity Type Description": "DELETE",
            			"Count of Guardium User Activity Audits": "1"
            */
            if ('DATASOURCE' != datum['Modified Entity']) return null;
            var rec = {
                name: datum['Object Description'],
                datasource_id: datum['Object ID'] || datum['Object Id'] ||
                    datum['Datasource ID'] || datum['Datasource Id'] ||
                    datum['Key Value'] || '',
                operation: (datum['Activity Type Description'] || '').toUpperCase(),
                timestamp: datum['Timestamp'],
            };
            return rec;
        },

        transformDatasourceEntry: function(datum, cm_sys_id) {
            // strip the id from the URL
            var arr = datum['DatasourceId'].split('=');
            var ds_id = arr[arr.length - 1];

            var rec = {
                // common Database Instance properties
                name: datum['Name'],
                fqdn: datum['Host'],
                tcp_port: "0" == datum['Port'] ? "" : datum['Port'],
                attributes: datum['ConProperty'],
                discovery_source: GuardiumAPI.TITLE,

                datasource_id: ds_id,
                datasource_type: datum['DatasourceType'],
                datasource_description: datum['Description'],
                custom_fields: datum['CustomFields'] || '{}',
                custom_url: datum['CustomUrl'],
                severity: this.convertSeverity(datum['Severity']),

                database_name: datum['DbName'],
                service_name: datum['ServiceName'],

                action: 'synchronized',
                status: "1" == datum['Status'] ? 'Connection successful' : datum['Status'],
                status_date: this.gAPI.adjustTimeFromGuardium(datum['LastChecked']),
                status_detail: datum['LastCheckedMessage'],

                user_name: datum['UserName'] || '',

                fqdn_cm: cm_sys_id
            };

            var table = this.getInstanceClass(rec[GuardiumAPI.CMDB_COL_DB_TYPE]);
            rec['database_instance_class'] = table;

            // special properties for the db type
            var map = this.getDatabaseFieldMap(rec[GuardiumAPI.CMDB_COL_DB_TYPE]);
            for (var p in map) {
                rec[p] = map[p];
            }

            // add all other properties in a single "extra_fields" field
            var oJson = {};
            for (var ef in GuardiumAPI.DS_EXTRA_FIELDS_GET) {
                oJson[GuardiumAPI.DS_EXTRA_FIELDS_GET[ef]] = datum[ef] || '';
            }
            rec['extra_fields'] = JSON.stringify(oJson);

            // parse custom_fields into a list of name=value pairs
            try {
                var fields = rec.custom_fields;
                var list = [];
                for (var f in fields) {
                    list.push(f + '=' + fields[f]);
                }
                rec['custom_fields'] = list.join(',');
            } catch (e) {
                GuardiumLog.error(
                    'Error parsing data source custom fields: ' + rec.custom_fields +
                    '\nConsider installing a patch to address issue: GRD-66033',
                    this.type, e
                );
            }

            // source_id for Discovered Item
            rec['source_id'] = this.getUniqueID(rec);

            return rec;
        },

        transformDatasourceReport: function(datum, cm_sys_id) {
            /*
         			"Datasource Id": "20001",
           			"Datasource Type": "POSTGRESQL",
           			"Datasource Name": "DPS: PostgreSQL 11 on rh73mssql01",
           			"Datasource Description": "",
           			"Host": "xxxx0001.abc.com",
           			"Port": "5555",
           			"Service Name": "",
           			"Database Name": "postgres",
           			"User Name": "dbuser",
           			"Shared": "true",
           			"Connection Properties": "",
           			"Severity": "NONE",
           			"Status": "Connection successful",
           			"Last Checked": "2021-09-21 20:13:44",
           			"Last Checked Message": "Connection successful from host 'abc03'.",
           			"Last Connect": "2021-09-21 20:50:43",
           			"Owner": "guarduser",
           			"Custom": "{}"
            */
            var rec = {
                // common Database Instance properties
                name: datum['Datasource Name'] || '',
                fqdn: datum['Host'] || '',
                tcp_port: "0" == datum['Port'] ? "" : datum['Port'] || '',
                attributes: datum['Connection Properties'] || '',
                discovery_source: GuardiumAPI.TITLE,

                datasource_id: datum['Datasource Id'] || '',
                datasource_type: datum['Datasource Type'] || '',
                datasource_description: datum['Datasource Description'] || '',
                custom_fields: datum['Custom'] || '{}',
                custom_url: datum['Custom URL'] || '',
                severity: datum['Severity'] || 'NONE',

                database_name: datum['Database Name'] || '',
                service_name: datum['Service Name'] || '',

                action: 'synchronized',
                status: datum['Status'] || '',
                status_date: this.gAPI.adjustTimeFromGuardium(datum['Last Checked']),
                status_detail: datum['Last Checked Message'] || '',

                user_name: datum['User Name'] || '',

                fqdn_cm: cm_sys_id
            };

            var table = this.getInstanceClass(rec.datasource_type);
            rec['database_instance_class'] = table;

            // special properties for the db type
            var map = this.getDatabaseFieldMap(rec.datasource_type);
            for (var p in map) {
                rec[p] = map[p];
            }

            // parse custom_fields into a list of name=value pairs
            if (rec.custom_fields && rec.custom_fields.length <= 2) {
                rec.custom_fields = '';
            } else {
                try {
                    GuardiumLog.debug("About to parse Custom Fields");
                    // work-around for GRD-62463: strip out extra escape chars
                    var fields = JSON.parse(rec.custom_fields.replaceAll('\\', ''));
                    var list = [];
                    for (var f in fields) {
                        list.push(f + '=' + fields[f]);
                    }
                    rec.custom_fields = list.join(',');
                } catch (e) {
                    GuardiumLog.warn(
                        'Error parsing data source custom fields: ' + rec.custom_fields +
                        '\nConsider installing a patch to address issue: GRD-66033',
                        this.type, e
                    );
                }
            }

            // source_id for Discovered Item
            rec['source_id'] = this.getUniqueID(rec);

            return rec;
        },

        scrubDatasource: function(ds_orig) {
            // hide sensitive fields
            var ds = {};
            var sensitive = GuardiumAPI.DS_SENSITIVE_FIELDS.join(',');
            for (var p in ds_orig) {
                if (sensitive.includes(p)) {
                    // not sure if String.padStart() exists in ES5 ... use alternate solution
                    ds[p] = '****************************************'.substring(0, ds_orig[p].length);
                } else {
                    ds[p] = ds_orig[p];
                }
            }
            return ds;
        },

        convertSeverity: function(severityVal) {
            var severityNum = severityVal - 0;
            if (isNaN(severityNum)) return severityVal;
            if (severityNum > 7) return "HIGH";
            if (severityNum > 3) return "MED";
            if (severityNum > 0) return "LOW";
            return "NONE";
        },

        getUniqueID: function(rec) {
            if (rec.source_id) return rec.source_id;
            var unid = [rec.fqdn || '', rec.tcp_port || '', rec.service_name || '', rec.database_name || ''].join(':');
            if (unid == ':::') {
                // no data
                unid = [rec.fqdn_cm, rec.name].join(':');
            }
            return '' + this.generateHashCode(unid);
        },

        type: 'GuardiumProcessorDatasource'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-07 17:22:51</sys_created_on>
        <sys_id>289b665f877c4150387c64280cbb35a8</sys_id>
        <sys_mod_count>69</sys_mod_count>
        <sys_name>GuardiumProcessorDatasource</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_289b665f877c4150387c64280cbb35a8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-24 14:14:20</sys_updated_on>
    </sys_script_include>
</record_update>
