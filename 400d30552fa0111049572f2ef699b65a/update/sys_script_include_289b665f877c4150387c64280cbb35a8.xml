<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorDatasource</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium data-source processor script</description>
        <name>GuardiumProcessorDatasource</name>
        <script><![CDATA[var GuardiumProcessorDatasource = Class.create();
GuardiumProcessorDatasource.FIELD_MAP = {
    action: 40,
    attributes: 4000,
    custom_fields: 1000,
    custom_url: 1000,
    database_instance: 0,
    database_instance_class: 40,
    database_name: 255,
    datasource_description: 1000,
    datasource_id: 32,
    datasource_type: 64,
    discovered_item: 0,
    discovery_source: 255,
    fqdn: 1000,
    fqdn_cm: 0,
    name: 255,
    password: 256,
    service_name: 255,
    source_id: 1000,
    status: 64,
    status_date: 40,
    status_detail: 2000,
    tcp_port: 0,
    user_name: 256
};
GuardiumProcessorDatasource.prototype =
    Object.extendsObject(GuardiumProcessorBase, {

        beforeProcessReport: function() {
            this.GuardTransform = new GuardiumTransformMap();
            this._initializeTransformCacheDI();
            this._initializeTransformCacheDC();
            this.gr_ci_lookup_rule = this.getLookupRule('4919d5989792155022fa1c800153af56');
        },

        beforeCM: function(cm, data) {
            this.ds_deleted = {};
            this.ds_changed = {};

            this.dtNow = 'Synchronization on ' + (new GlideDateTime()).getValue();

            this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm.sys_id, true));
            this.gAPI.authenticate();
        },

        processEntry: function(datum, cm, firstSync) {
            var grd_rec = null;

            // -------------------------------------
            // proccess 'Data-Sources' report entry
            // -------------------------------------
            var isDatasourceReport = !!datum['Datasource Id'];
            if (isDatasourceReport) {
                // parse database record into a structure with ServiceNow fields
                grd_rec = this.transformDatasourceReport(datum, cm.sys_id);

                // process datasource entry
                return this.processDatasource(cm, grd_rec, datum);
            }

            // -------------------------------------
            // else, process 'DataSource Changes' entry
            // -------------------------------------
            var grd_change = this.transformChangeReport(datum, cm.sys_id);
            if (!grd_change) return null;

            // handle operation
            switch (grd_change.operation) {
                case 'INSERT':
                case 'UPDATE':
                    // if the same datasource changed many times, ignore
                    var key = grd_change.operation + '-' + grd_change.name;
                    if (this.ds_changed[key]) {
                        return null;
                    }
                    this.ds_changed[key] = true;
                    // fall into code below the switch
                    break;

                case 'DELETE':
                    // process list after all changes are process as the name could have changed
                    this.ds_deleted[grd_change.name] = true;
                    return null;
                default:
                    // unhandled operation
                    return null;
            }

            // fetch backend record
            try {
                var reportParams = {
                    DataSourceNameLike: grd_change.name,
                    QUERY_FROM_DATE: '1970-01-01 12:00:00'
                };
                var response = this.gAPI.getReportData("Data-Sources", reportParams);
                // GRD-62463: response from Guardium REST-API should have had an error code but does not.
                //  If there is a valid data source, it will be an arrray.
                // var response = this.gAPI.get('datasource', {name: grd_change.name});
                if (!response || !response.data || !response.data.length) return null;

                // parse database record into a structure with ServiceNow fields
                // grd_rec = this.transformDatasourceEntry(response.data[0], cm.sys_id);
                grd_rec = this.transformDatasourceReport(response.data[0], cm.sys_id);

                // process datasource entry
                return this.processDatasource(cm, grd_rec, response.data[0]);

            } catch (e) {
                GuardiumLog.error('Error fetching datasource: ' + grd_change.name, this.type, e);
            }
            return null;
        },

        processDatasource: function(cm, grd_rec, datum) {
            var exists = false;

            // find record associated with CM
            var sn_rec = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
            sn_rec.addQuery('source_id', '=', grd_rec['source_id']);
            sn_rec.setLimit(1);
            sn_rec.query();
            if (sn_rec.next()) {
                exists = true;
            } else {
                // just in case source_id is not populated
                sn_rec.addQuery('fqdn_cm', '=', cm.sys_id);
                sn_rec.addQuery('datasource_id', '=', grd_rec.datasource_id);
                sn_rec.setLimit(1);
                sn_rec.query();
                if (sn_rec.next()) {
                    exists = true;
                }
            }

            if (!exists) {
                sn_rec.initialize();
            }

            // make sure there is a database map record
            var ref = this.getDatabaseTypeRef(grd_rec[GuardiumAPI.CMDB_COL_DB_TYPE]);
            if (!ref) {
                // need to create a new DB MAP record as it does not exist
                var gr_map = new GlideRecord(GuardiumAPI.TABLE_DB_MAP);
                gr_map.initialize();
                gr_map.setValue('database_type', grd_rec[GuardiumAPI.CMDB_COL_DB_TYPE]);
                ref = gr_map.insert();
                GuardiumLog.debug(
                    "Inserted new transform map: " + grd_rec[GuardiumAPI.CMDB_COL_DB_TYPE], this.type
                );
                // make a new cache map for the updated entry
                this._initializeTransformCacheDI();
            }

            // Find and link CMDB_CI record
            var di_sys_id = sn_rec.getValue('discovered_item') || '';
            var ci_sys_id = sn_rec.getValue('database_instance') || '';

            if (!di_sys_id) {
                ci_sys_id = this.runLookupRule(grd_rec);
                // if this is a newly matched database, add it to the "Discovered" table
                di_sys_id = this.insertDiscoveredItem(ci_sys_id, grd_rec);
            } else {
                // get linked DB Inst or DB Cat
                var table_di = 'sn_sec_cmn_src_ci';
                try {
                    var gr_di = new GlideRecord(table_di);
                    if (gr_di.get(di_sys_id)) {
                        var cmdb_ci = gr_di.getValue('cmdb_ci');
                        // check for corrupted data
                        if (!cmdb_ci || 'null' == cmdb_ci || 'undefined' == cmdb_ci) {
                            ci_sys_id = '';
                        }
                    }
                } catch (errDI) {
                    GuardiumLog.error('Could not access table "' + table_di + '"', this.type, errDI);
                }
                if (!ci_sys_id) {
                    ci_sys_id = this.runLookupRule(grd_rec);
                }
            }

            // create reference to existing CMDB_CI record
            grd_rec['database_instance'] = ci_sys_id;
            grd_rec['discovered_item'] = di_sys_id;

            // avoid endless loop of business rule for ds_onInsert, ds_onUpdate
            grd_rec['action'] = 'synchronized';

            if (exists) {
                // GRD-62328: test results report contains the "name" of the database 
                //  tested not the ID. Therefore, keep multiple records of the same 
                //  database to match with old test results.
                this.handleRenamedDatasources(sn_rec, grd_rec) || '';
            }

            // Map incoming fields to destination fields
            this.copyAllFields(sn_rec, grd_rec);

            GuardiumLog.debug(
                'Datasource ' + (exists ? 'Update' : 'Insert'),
                this.type + '.processDatasource',
                grd_rec
            );

            // Insert or Update
            if (!exists) {
                sn_rec.insert();
                this.inserted++;
            } else {
                sn_rec.update(this.dtNow);
                this.updated++;
            }

            // return a unique key for the database
            return grd_rec.source_id;
        },

        afterCM: function(cm, entry_map) {
            var sn_rec;

            // trim databases on database change event
            for (var db_name in this.ds_deleted) {
                sn_rec = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                sn_rec.addQuery(GuardiumAPI.CMDB_COL_CM, '=', cm.sys_id);
                sn_rec.addQuery('name', '=', db_name);
                sn_rec.query();
                if (sn_rec.next()) {
                    sn_rec.setWorkflow(false);
                    sn_rec.deleteRecord();
                    this.deleted++;
                }
            }

            // trim databases if this is the first time sync
            if (cm.is_first_sync) {

                // find all ServiceNow datasource records associated with this CM
                sn_rec = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                sn_rec.addQuery(GuardiumAPI.CMDB_COL_CM, '=', cm.sys_id);
                sn_rec.query();
                while (sn_rec.next()) {
                    // build the same ID used in entry_map
                    var entry_id = this.getUniqueID(sn_rec);
                    // is this entry part of the report results?
                    if (!entry_map[entry_id]) {
                        // remove deleted datasource
                        sn_rec.setWorkflow(false);
                        sn_rec.deleteRecord();
                        this.deleted++;
                    }
                }
            }
        },

        getDatabaseTypeRef: function(dbType) {
            return (this.getDatabaseFieldMap(dbType).sys_id || '');
        },

        getInstanceClass: function(dbType) {
            return (this.getDatabaseFieldMap(dbType).target_class || GuardiumAPI.TABLE_DB);
        },

        getDatabaseFieldMap: function(dbType) {
            // special properties for the db type and class
            return this._lookupByType[dbType] || {};
        },

        getCatalogQueryMap: function(dbType) {
            // return a list of defined database attributes that can be used to find a matching database
            var map = {};

            // if the database_name or service_name corresponding field in ServiceNow is defined, use it
            var fieldMap = this._catalogByType[dbType] || this._catalogByType['*'];
            if (fieldMap) {
                for (var fld in {
                        database_name: true,
                        service_name: true
                    }) {
                    try {
                        var v = fieldMap[fld].sn_name;
                        if (v) map[v] = true;
                    } catch (e) {
                        GuardiumLog.warn("No DB Catalog transform for type: " + dbType, this.type);
                    }
                }
            }
            return map;
        },

        getLookupRule: function(sys_id) {
            try {
                var gr = new GlideRecord('sn_sec_cmn_ci_lookup_rule');
                if (gr.get(sys_id) && 'script' == gr.getValue('method')) {
                    return gr;
                } else {
                    GuardiumLog.warn('Invalid Lookup Rule', this.type, gr);
                }
            } catch (e) {
                GuardiumLog.error('Could not get sn_sec_cmn_ci_lookup_rule', this.type, e);
            }
            return null;
        },

        runLookupRule: function(ds) {
            // Runs sn_sec_cmn_ci_lookup_rule
            if (this.gr_ci_lookup_rule) {
                var returnObj = {
                    ciIds: []
                };
                try {
                    var evaluator = new GlideScopedEvaluator();
                    evaluator.putVariable('rule', null);
                    evaluator.putVariable('sourceValue', '');
                    evaluator.putVariable('sourcePayload', ds);
                    evaluator.putVariable('returnObj', returnObj);
                    var response = evaluator.evaluateScript(this.gr_ci_lookup_rule, "script", {});
                    return response || (returnObj.ciIds.length ? returnObj.ciIds[0] : '') || '';
                } catch (e) {
                    GuardiumLog.error('', this.type + '.runLookupRule', e);
                }
            } else {
                GuardiumLog.warn('CI Lookup Rule is null', this.type + '.runLookupRule');
            }
            return '';
        },

        insertDatabaseInstanceOrCatalog: function(grd_rec) {
            var table = grd_rec['target_class'];
            try {
                var sys_id = '';
                var gr_di = new GlideRecord(table);
                gr_di.addQuery('fqdn', '=', grd_rec['fqdn']);
                gr_di.addQuery('tcp_port', '=', grd_rec['tcp_port']);
                if (grd_rec['service_name'] && grd_rec['target_service_name']) {
                    gr_di.addQuery(grd_rec['target_service_name'], '=', grd_rec['service_name']);
                }
                gr_di.query();
                if (gr_di.next()) {

                    if (grd_rec['database_name']) {
                        // Database Instance exists, create a Database Catalog
                        var dbType = grd_rec[GuardiumAPI.CMDB_COL_DB_TYPE];
                        var fieldMap = this._catalogByType[dbType] || this._catalogByType['*'];
                        var gr_dc = new GlideRecord(fieldMap.target_class);
                        gr_dc.initialize();
                        gr_dc.setValue('database_instance', gr_di.getUniqueValue());
                        gr_dc.setValue('name', grd_rec['database_name']);
                        sys_id = gr_dc.insert();
                    } else {
                        sys_id = gr_di.getUniqueValue();
                    }

                } else {
                    // Create Database Instance
                    gr_di.initialize();

                    // Map incoming fields to destination fields
                    for (var f in grd_rec) {
                        var fieldName = this._getFieldName(f);
                        gr_di.setValue(fieldName, grd_rec[f]);
                    }
                    // Monitored by IBM Guardium
                    gr_di.setValue('monitor', true);

                    // Create
                    sys_id = gr_di.insert();
                }

                return sys_id;
            } catch (e) {
                GuardiumLog.error('', this.type, e);
            }
            return null;
        },

        insertDiscoveredItem: function(ci_sys_id, grd_rec) {
            try {
                // Create a new record in the "Discovered Items" table
                // * similar to sn_vul.ImportHost._createSrc( ... )
                //
                var di_sys_id = '';
                var sn_dis = new GlideRecord("sn_sec_cmn_src_ci");
                sn_dis.addQuery('source_id', '=', grd_rec.source_id);
                sn_dis.query();
                if (sn_dis.next()) {
                    di_sys_id = sn_dis.getUniqueValue();
                } else {
                    sn_dis.initialize();

                    sn_dis.setValue('source', this.integrationGr.getValue('instance')); // Integration Instance
                    sn_dis.setValue('source_id', grd_rec.source_id);
                    sn_dis.setValue('cmdb_ci', ci_sys_id + ""); // make sure this is not null
                    sn_dis.setValue('integration_run', this.integrationRunGr.getUniqueValue());

                    // Give the user some hint on the database info
                    sn_dis.setValue('initial_source_data', JSON.stringify(grd_rec));
                    sn_dis.setValue('source_data', JSON.stringify(grd_rec));

                    sn_dis.setValue('last_auth_scan_date',
                        new GlideDateTime(this.integrationRunGr.getValue('sys_created_on')));

                    di_sys_id = sn_dis.insert();
                    GuardiumLog.debug('Created Discovered Item for: ' + grd_rec.name, this.type);
                }
                return di_sys_id;
            } catch (e) {
                GuardiumLog.error('', this.type, e);
            }
            return null;
        },

        handleRenamedDatasources: function(sn_orig, grd_rec) {
            // GRD-62328: test results report contains the "name" of the database 
            //  tested not the ID. Therefore, keep multiple records of the same 
            //  database with different "name" values to match with old test results.
            //
            // We want the original doc to get the new DB name due to 
            //  asset_id reference in "Test Result Details" engine. If
            //  the asset_id changes, then the Vulnerability Detection Item
            //  unique key changes.  And that causes an issue matching it with VIT.
            //
            var dt_now = new GlideDateTime();
            if (grd_rec['name'] != sn_orig.getValue('name')) {
                var sys_id_orig = sn_orig.getUniqueValue();
                var found = false;

                // Find all records with same ID and make sure old names are marked "Deprecated"
                var sn_rec = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                sn_rec.addQuery('fqdn_cm', '=', grd_rec['fqdn_cm']);
                sn_rec.addQuery('source_id', '=', grd_rec['source_id']);
                sn_rec.orderBy('sys_created_on'); // oldest first
                sn_rec.query();
                while (sn_rec.next()) {
                    found = true;
                    if ('Deprecated' != sn_rec.getValue('status')) {
                        if (grd_rec['datasource_id'] == sn_rec.getValue('datasource_id')) {
                            GuardiumLog.info('Datasource Renamed\nOriginal: "' +
                                sn_rec.getValue('name') +
                                '"\nNew: "' + grd_rec['name'] + '"',
                                this.type
                            );
                        } else {
                            GuardiumLog.info('Datasource Duplicate\nOriginal: "' +
                                sn_rec.getValue('name') +
                                '"\nCopy: "' + grd_rec['name'] + '"',
                                this.type
                            );
                        }

                        // Set fields
                        sn_rec.setValue('status', 'Deprecated');
                        sn_rec.setValue('status_date', dt_now);
                        sn_rec.setValue('status_detail',
                            'A duplicate IBM Guardium data source was detected.\n\n' +
                            'After test result details are imported and linked to appropriate' +
                            ' CMDB configuration items, it is safe to remove this data source.'
                        );
                        sn_rec.setValue('action', 'synchronized');

                        // Save
                        if (sys_id_orig == sn_rec.getUniqueValue()) {
                            sn_rec.insert();
                            // restore original
                            sn_orig.get(sys_id_orig);
                        } else {
                            sn_rec.update('Deprecated');
                        }
                    }
                }
                return found ? sys_id_orig : '';
            }
        },

        copyAllFields: function(gr, json) {
            for (var p in GuardiumProcessorDatasource.FIELD_MAP) {
                if (GuardiumProcessorDatasource.FIELD_MAP[p]) {
                    gr.setValue(p, (json[p] || '').substring(0, GuardiumProcessorDatasource.FIELD_MAP[p]));
                } else {
                    gr.setValue(p, json[p]);
                }
            }
        },

        _getFieldName: function(fldGRD) {
            switch (fldGRD) {
				case 'attributes':
					return 'running_process_key_parameters';
                case 'custom_fields':
                    return 'attributes';
                case 'custom_url':
                    return 'running_process_command';
                case 'datasource_description':
                    return 'description';
            }
            return fldGRD;
        },

        _initializeTransformCacheDI: function() {
            this._lookupByType = {};

            var map = this.GuardTransform.getMapDI();
            for (var db_type in map) {
                var entry = map[db_type];

                this._lookupByType[db_type] = {
                    sys_id: entry['sys_id'],
                    target_class: entry['database_instance_class'],
                    target_database_name: entry['database_name'] || '',
                    target_service_name: entry['service_name'] || ''
                };
            }
        },

        _initializeTransformCacheDC: function() {
            this._catalogByType = {};

            var map = this.GuardTransform.getMapDC();
            for (var db_type in map) {
                var entry = map[db_type];

                this._catalogByType[db_type] = {
                    sys_id: entry['sys_id'],
                    target_class: entry['class_name'],
                    target_database_name: entry['database_name'] || '',
                    target_service_name: entry['service_name'] || ''
                };
            }
        },

        transformChangeReport: function(datum, cm_sys_id) {
            /*
            			"Timestamp": "2022-03-14 11:15:55",
            			"User Name": "servicenow",
            			"Activity Type": "3",
            			"Modified Entity": "DATASOURCE",
            			"Object Description": "Fake Oracle 90001 Updated",
            			"Host Name": "abc04",
            			"Activity Type ID": "3",
            			"Activity Type Description": "DELETE",
            			"Count of Guardium User Activity Audits": "1"
            */
            if ('DATASOURCE' != datum['Modified Entity']) return null;
            var rec = {
                name: datum['Object Description'],
                operation: (datum['Activity Type Description'] || '').toUpperCase(),
                timestamp: datum['Timestamp'],
            };
            return rec;
        },

        transformDatasourceEntry: function(datum, cm_sys_id) {
            // strip the id from the URL
            var arr = datum['DatasourceId'].split('=');
            var ds_id = arr[arr.length - 1];

            var rec = {
                // common Database Instance properties
                name: datum['Name'],
                fqdn: datum['Host'] || '',
                tcp_port: "0" == datum['Port'] ? "" : datum['Port'],
                attributes: datum['ConProperty'],
                discovery_source: GuardiumAPI.TITLE,

                datasource_id: ds_id,
                datasource_type: datum['DatasourceType'],
                datasource_description: datum['Description'],
                custom_fields: datum['CustomFields'],
                custom_url: datum['CustomUrl'],

                database_name: datum['DbName'],
                service_name: datum['ServiceName'],

                status: "1" == datum['Status'] ? 'Connection successful' : datum['Status'],
                status_date: this.gAPI.adjustTimeFromGuardium(datum['LastChecked']),
                status_detail: datum['LastCheckedMessage'],

                user_name: datum['UserName'] || '',
                password: datum['Password'] || '',

                fqdn_cm: cm_sys_id
            };

            // special properties for the db type
            var map = this.getDatabaseFieldMap(rec[GuardiumAPI.CMDB_COL_DB_TYPE]);
            for (var p in map) {
                rec[p] = map[p];
            }

            // source_id for Discovered Item
            rec['source_id'] = this.getUniqueID(rec);

            return rec;
        },

        transformDatasourceReport: function(datum, cm_sys_id) {
            /*
         			"Datasource Id": "20001",
           			"Datasource Type": "POSTGRESQL",
           			"Datasource Name": "DPS: PostgreSQL 11 on rh73mssql01",
           			"Datasource Description": "",
           			"Host": "xxxx0001.abc.com",
           			"Port": "5555",
           			"Service Name": "",
           			"Database Name": "postgres",
           			"User Name": "dbuser",
           			"Shared": "true",
           			"Connection Properties": "",
           			"Severity": "NONE",
           			"Status": "Connection successful",
           			"Last Checked": "2021-09-21 20:13:44",
           			"Last Checked Message": "Connection successful from host 'abc03'.",
           			"Last Connect": "2021-09-21 20:50:43",
           			"Owner": "guarduser",
           			"Custom": "{}"
            */
            var rec = {
                // common Database Instance properties
                name: datum['Datasource Name'] || '',
                fqdn: datum['Host'] || '',
                tcp_port: "0" == datum['Port'] ? "" : datum['Port'],
                attributes: datum['Connection Properties'] || '',
                discovery_source: GuardiumAPI.TITLE,

                datasource_id: datum['Datasource Id'] || '',
                datasource_type: datum['Datasource Type'] || '',
                datasource_description: datum['Datasource Description'] || '',
                custom_fields: datum['Custom'] || '',
                custom_url: datum['Custom URL'] || '',

                database_name: datum['Database Name'] || '',
                service_name: datum['Service Name'] || '',

                status: datum['Status'] || '',
                status_date: this.gAPI.adjustTimeFromGuardium(datum['Last Checked']),
                status_detail: datum['Last Checked Message'] || '',

                user_name: datum['User Name'] || '',
                password: datum['Password'] || '',

                fqdn_cm: cm_sys_id
            };

            var table = this.getInstanceClass(rec[GuardiumAPI.CMDB_COL_DB_TYPE]);
            rec['database_instance_class'] = table;

            // special properties for the db type
            var map = this.getDatabaseFieldMap(rec[GuardiumAPI.CMDB_COL_DB_TYPE]);
            for (var p in map) {
                rec[p] = map[p];
            }

            // source_id for Discovered Item
            rec['source_id'] = this.getUniqueID(rec);

            return rec;
        },

        getUniqueID: function(rec) {
            return rec.source_id || [rec.fqdn_cm, rec.fqdn,
                rec.tcp_port, rec.service_name,
                rec.database_name, rec.user_name
            ].join(':');
        },

        type: 'GuardiumProcessorDatasource'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-07 17:22:51</sys_created_on>
        <sys_id>289b665f877c4150387c64280cbb35a8</sys_id>
        <sys_mod_count>174</sys_mod_count>
        <sys_name>GuardiumProcessorDatasource</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_289b665f877c4150387c64280cbb35a8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-11-01 18:32:29</sys_updated_on>
    </sys_script_include>
</record_update>
