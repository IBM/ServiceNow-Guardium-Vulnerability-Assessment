<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorTestResultDetail</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium test result detail processor script</description>
        <name>GuardiumProcessorTestResultDetail</name>
        <script><![CDATA[var GuardiumProcessorTestResultDetail = Class.create();

GuardiumProcessorTestResultDetail.prototype =
    Object.extendsObject(GuardiumProcessorBase, {
        /* "Test Score" Enum Values */
        Score: {
            PASS_DUE_TO_EXCEPTION: '3',
            PASS_WITH_CAUTION: '2',
            PASS: '1',

            FAIL: '0',

            ERROR: '-1',
            NO_CAS_DATA: '-2',
            NO_REPORT_DATA: '-3',
            UNSUPPORTED_DB_VERSION: '-4',
            UNSUPPORTED_OS_VERSION: '-5',
            SPECIAL_ERROR: '-6',
            CAS_DATA_COLLECTION_ERROR: '-7',
            OBSOLETE_PARAMETER: '-8',
            DEPRECATED_PARAMETER: '-9',
            NOT_APPLICABLE_FOR_DB_VER: '-10',
            NO_USER_DATA: '-11',
            MODULES_NOT_PRESENT: '-12',
            PRE_TEST_CHECK_FAILED: '-13',
            EXECUTION_TEST_ROUTINE_CHECK_FAILED: '-14',
            UNSUPPORT_CVE_PATCH_DETECTED: '-15',
            UNSUPPORT_PTF_PATCH_DETECTED: '-16',
            NOT_APPLICABLE: '-17',
            DEPRECATED_TEST: '-18',
            UNSUPPORT_DATABASE_PATCH_DETECTED: '-19',
            ORACLE_JVM_COMPONENT_NOT_INSTALL: '-20',
            NO_DATABASE_FOUND_IN_LOOPING: '-21',
            NO_DATABASE_PROFILE_FOUND: '-22'
        },

        beforeProcessReport: function() {
            this.missingCMDB = {};
            this.missingTest = {};

            this.ignored_vi = 0;

            // initialize detection engine
            this.sn_vul_det = new sn_vul.Detection(
                this.integrationGr.getValue('integration'),
                this.integrationGr.getValue('instance'),
                this.integrationRunGr.getUniqueValue()
            );
            this.sn_vul_det._updateSpecificCustomFields = this._updateSpecificCustomFields.bind(this);
            this.sn_vul_det.processMetadataInfoFields = true;

            // make sure there is a sn_vul_detection_key_config
            this.checkDetectionKey();

            // initialize compliance-test engine
            try {
                this.sn_vulc_ctr = new sn_vulc.ComplianceTestResult(
                    GuardiumAPI.TITLE,
                    this.integrationGr.getValue('instance'),
                    this.integrationRunGr.getUniqueValue()
                );

                // Force Compliance engine to set new field values
                this.sn_vulc_ctr.setCustomSourceFields([
                    'first_seen', 'actual_values', 'expected_values', 'description', 'result', 'last_seen'
                ]);
                this.sn_vulc_ctr.updateCustomFields = true;

                // Use these fields to determine uniqueness of test result
                // -- actual_details might contain one detail per test result
                this.sn_vulc_ctr.setTestResultLookupKeys([
                    'integration_instance', 'cmdb_ci', 'control'
                    // 'integration_instance', 'cmdb_ci', 'control', 'actual_values'
                ]);
            } catch (ec) {}

            // preferences ... Array.prototype.includes is not part of ES6 ... use string
            this.severities = ',' + (this.preferences.getValue('test_failure_severity') || '') + ',';
            this.failed_types = ',' + (this.preferences.getValue('test_failure_type') || '') + ',';
            this.error_scores = (this.preferences.getValue('test_error_status') || '').trim().split(',');
            this.failed_scores = (this.preferences.getValue('test_failure_status') || '').trim().split(',');
            this.passed_scores = (this.preferences.getValue('test_pass_status') || '').trim().split(',');

            var ccCheckbox = this.preferences.getValue('ignore_config_compliance') || '';
            this.allowConfigCompliance = this.sn_vulc_ctr && GuardiumAPI.isTrue(ccCheckbox); // reverse logic

            // init Vulnerability script for deprecated tests
            this.x_ibm_vt = new GuardiumProcessorVulnerabilityTest();
            this.x_ibm_vt.integrationGr = this.integrationGr;
            this.x_ibm_vt.integrationRunGr = this.integrationRunGr;
            this.x_ibm_vt.dt_now = this.dt_now;
            this.x_ibm_vt.beforeProcessReport && this.x_ibm_vt.beforeProcessReport();
            this.x_ibm_vt.type = this.type + '.' + this.x_ibm_vt.type;

            // init database processor
            this.x_ibm_ds = new GuardiumProcessorDatasource();
            this.x_ibm_ds.integrationGr = this.integrationGr;
            this.x_ibm_ds.integrationRunGr = this.integrationRunGr;
            this.x_ibm_ds.dt_now = this.dt_now;
            this.x_ibm_ds.beforeProcessReport && this.x_ibm_ds.beforeProcessReport();
            this.x_ibm_ds.type = this.type + '.' + this.x_ibm_ds.type;
        },

        beforeCM: function(cm, data) {
            this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm.sys_id, true));
            this.gAPI.authenticate();

            this.assessmentTest = {};

            // init Vulnerability script for deprecated tests
            this.x_ibm_vt.gAPI = this.gAPI;
            this.x_ibm_vt.beforeCM && this.x_ibm_vt.beforeCM(cm);

            // init database processor
            this.x_ibm_ds.gAPI = this.gAPI;
            this.x_ibm_ds.beforeCM && this.x_ibm_ds.beforeCM(cm);
        },

        afterCM: function(cm) {
            this.gAPI = null;
            this.x_ibm_vt.gAPI = null;
            this.x_ibm_ds.gAPI = null;
        },

        afterProcessReport: function(cm) {
            try {
                // finalize detections
                var counts = this.sn_vul_det.finalizeDetections();
                if (counts) {
                    this.inserted_vi = counts.inserted.vis;
                    this.inserted_det = counts.inserted.dets;
                    this.updated_vi = counts.updated.vis;
                    this.updated_det = counts.updated.dets;
                    this.skipped_vi = counts.ignored.vis + this.ignored_vi;
                    this.skipped_det = counts.ignored.dets;
                }
            } catch (e) {
                GuardiumLog.error('', this.type, e);
            }
        },

        processEntry: function(datum, cm) {
            var remoteSysId = '';
            if (datum.remote) {
                remoteSysId = datum.sys_id;
                this.pushHost(datum.name);
            }

            for (var i = 0; i < datum.data.length; i++) {
                var resultJSON = datum.data[i];
                if (!resultJSON || !(resultJSON['Test Description'] || resultJSON['Test ID'])) continue;
                var testType = '';
                try {
                    var exists = false;
                    var action = '';

                    // common info for test definition
                    testType = (resultJSON['Test Description'] || '').indexOf('CVE') == 0 ||
                        (resultJSON['Test Description'] || '').indexOf('CWE') == 0 ? 'CVE' : '';
                    var testDatum = this.getTestDatum({
                        "Test ID": resultJSON['Test ID'] || '',
                        "Test Description": resultJSON['Test Description'] || '',
                        "Category Name": resultJSON['Category'] || '',
                        "Timestamp": '1970-01-02 12:00:00',
                        "Short Description": 
							resultJSON['Description'] || "Placeholder until the test definition is imported",
                        "Severity": resultJSON['Severity'] || '',
                        "Test Type": testType,
                        "Datasource Type": resultJSON['Datasource Type'] || 'EMPTY'
                    }, cm);
                    if (!testDatum['ServiceNow ID']) {
                        throw new Error('Cannot find test definition\n' + JSON.stringify(testDatum));
                    }

                    // parse database record into a structure with ServiceNow "Detection" fields
                    var vi_rec = this.transformDET(resultJSON, testDatum, cm, remoteSysId);

                    // Create detection if test_type is CVE
                    if (this.failed_types.indexOf(',' + vi_rec.grd_test_type + ',') >= 0 ||
                        !this.allowConfigCompliance) {
                        // only process failures if severity matches preferences
                        if (this.sn_vul_det.D_STATUS_OPEN == vi_rec.status ||
                            this.severities.indexOf(',' + vi_rec.grd_sev + ',') >= 0) {

                            // add a "Detection" entry
                            var detectionData = this.sn_vul_det.createDetection(vi_rec);
                            if (detectionData && detectionData.detectionSysId) {
                                // update solution if status changed from ERROR to FAIL
                                // add attachment if Result Details is too big
                                if (this.updateAttachment('sn_vul_detection', detectionData.detectionSysId, vi_rec) &&
                                    detectionData.viSysId) {
                                    this.updateAttachment('sn_vul_vulnerable_item', detectionData.viSysId, vi_rec, true);
                                }
                                var fields = {
                                    'solution': 'solution',
                                    'solution_summary': 'solution_summary',
                                    'source_status': 'source_status',
                                    'proof': 'proof'
                                };

                            }

                            if (vi_rec.updateVI) {
                                this.updated_det++;
                                action = 'updated';
                            } else if (vi_rec.viSysId) {
                                this.inserted_det++;
                                action = 'inserted';
                            } else {
                                this.skipped_det++;
                                action = 'skipped';
                            }
                        } else {
                            this.ignored_vi++;
                            action = 'ignored severity';
                        }
                        this.logEntry(vi_rec, 'sn_vul_detection', action);
                    } else {
                        // Else, create Compliance Test Result 
                        var tr = this.transformCTR(resultJSON, testDatum, vi_rec, this.sn_vulc_ctr.newTestResult(), cm);
                        var result = this.sn_vulc_ctr.createOrUpdateTestResult(tr);
                        if (result && result.sys_id) {
                            // add attachment if Result Details is too big
                            this.updateAttachment('sn_vulc_result', result.sys_id, vi_rec, true);
                        }
                        if (result.inserted) {
                            this.inserted_cc++;
                            action = 'inserted';
                        } else if (result.updated) {
                            this.updated_cc++;
                            action = 'updated';
                        } else if (result.unchanged) {
                            this.skipped_cc++;
                            action = 'skipped';
                        } else if (result.error) {
                            this.failed_cc++;
                            action = 'failed';
                        }
                        this.logEntry(vi_rec, 'sn_vulc_result', action);
                    }
                } catch (e) {
                    var oTestResult = resultJSON["Datasource Name"] ? {
                        "Datasource Name": resultJSON["Datasource Name"],
                        "Test Description": resultJSON['Test Description'],
                        "Test Score": resultJSON["Score Description"] || datum['Test Score'],
                        "Result Text": resultJSON["Result Text"],
                    } : resultJSON;

                    if ('IGNORE' == e.message) {
                        if ('CVE' == testType || !this.allowConfigCompliance) {
                            GuardiumLog.debug('sn_vul_detection: ignored score', this.type, oTestResult);
                            this.ignored_vi++;
                        } else {
                            GuardiumLog.debug('sn_vulc_result: ignored score', this.type, oTestResult);
                            this.skipped_cc++;
                        }
                    } else {
                        GuardiumLog.error('Error processing:\n ' + JSON.stringify(oTestResult), this.type, e);
                    }
                }
            }
        },

        logEntry: function(vi_rec, label, action) {
            GuardiumLog.debug(
                [label, action].join(' : ') +
                "\n[" + [vi_rec.test_name, vi_rec.source_status, vi_rec.grd_sev, vi_rec.grd_test_type].join(', ') +
                ']',
                this.type
            );
        },

        getTestDatum: function(datum, cm) {
            datum = this.x_ibm_vt.createOrUpdateDefinition(datum, cm, true);
            if (!datum['Test SysID']) {
                datum['Test SysID'] = 'INSERT';
                datum = this.x_ibm_vt.createOrUpdateDefinition(datum, cm);
            }
            return datum;
        },

        transformCTR: function(datum, testDatum, vi_rec, tr, cm) {
            var testResult = this.ccResultFromTestScore(datum['Test Score']);
            var testState = this.ccStateFromTestScore(datum['Test Score'], datum['Score Description']);

            var test_name = testDatum['Test Description'];
            var test_id = (
                testDatum['ServiceNow ID']
            ).substring(0, 512);

            var resultDetails = (datum['Result Details'] || '').trim();

            var tr_rec = tr || {};
            tr_rec.integration_instance = vi_rec.integration_instance;
            tr_rec.source = vi_rec.source;
            tr_rec.cmdb_ci = vi_rec.cmdb_ci; // DS ref
            tr_rec.src_ci = vi_rec.src_ci; // DI ref
            tr_rec.control = ''; // test ref
            tr_rec.description = (datum['Result Text'] || '').replaceAll('\n', ' ').replaceAll('  ', ' ').trim();
            tr_rec.display = test_name;
            tr_rec.first_seen = vi_rec.first_found;
            tr_rec.last_seen = vi_rec.last_found;
            tr_rec.remediation = vi_rec.solution_summary;
            tr_rec.result = testResult;
            // tr_rec.state = testState; // this.sn_vulc_ctr._setResultState() will set the state
            tr_rec.source_type = vi_rec.source_type;
            tr_rec.technology = null;
            tr_rec.actual_values = resultDetails.length <= 3000 ? resultDetails :
                'Due to size restrictions, data has been moved to an attachment.';
            tr_rec.result_details = resultDetails.length <= 3000 ? '' :
                resultDetails.replaceAll('<br>', '\n').replaceAll('<br/>', '\n');
            tr_rec.expected_values = (datum['Threshold String'] || '').replaceAll('\n', ' ').trim();

            // link test reference
            var sn_vulc_test = new GlideRecord('sn_vulc_test');
            sn_vulc_test.addQuery('source_id', '=', test_id);
            sn_vulc_test.orderByDesc('source_created'); // newest first
            sn_vulc_test.query();
            while (sn_vulc_test.next()) {
                tr_rec.control = sn_vulc_test.getUniqueValue();
                if (GuardiumAPI.TITLE == sn_vulc_test.getValue('source')) {
                    if (!sn_vulc_test.getValue('remediation') &&
                        this.sn_vul_det.D_STATUS_OPEN == vi_rec.status) {
                        sn_vulc_test.setValue('remediation', tr_rec.remediation);
                        sn_vulc_test.update();
                    }
                    break;
                }
            }

            if (!tr_rec.control) {
                // Create a dummy entry
                tr_rec.control = this.x_ibm_vt.processEntry(testDatum, cm);

                // Report the missing test just once
                if (this.sn_vul_det.D_STATUS_DECOMMISSIONED != vi_rec.status) {
                    if (!this.missingTest[tr_rec.display]) {
                        this.missingTest[tr_rec.display] = true;
                        GuardiumLog.info(
							'Created new test definition, ' + testDatum['ServiceNow ID'] + ', for: ' + test_name, 
							this.type
						);
                    }
                }
            }

            // link the technology
            if (vi_rec.grd_db_type) {
                try {
                    var gr_tech = new GlideRecord('sn_vulc_technology');
                    gr_tech.addQuery('source', '=', GuardiumAPI.TITLE);
                    gr_tech.addQuery('source_id', '=', vi_rec.grd_db_type);
                    gr_tech.setLimit(1);
                    gr_tech.query();
                    if (gr_tech.next()) {
                        tr_rec.technology = gr_tech.getUniqueValue();
                    }
                } catch (e) {}
            }

            return tr_rec;
        },

        transformDET: function(datum, testDatum, cm, remoteSysId) {
            if (!datum['Datasource Name'] || !datum['Test Description']) {
                throw new Error("Invalid data source or test description.");
            }

            // Test Score is a number but is a string in the JSON response
            var testStatus = this.detStatusFromTestScore(datum['Test Score']);
            var testDate = this.gAPI.adjustTimeFromGuardium(
                datum['Execution Date']
            );
            var firstFoundDate = datum['First Fail Datetime'] ?
                this.gAPI.adjustTimeFromGuardium(datum['First Fail Datetime']) : null;

            var test_name = testDatum['Test Description'];
            var test_id = (
                testDatum['ServiceNow ID']
            ).substring(0, 255);

            var severityValue =
                (datum['Severity'] || testDatum['Severity'] || testDatum['STIG Severity'] || '').trim();

            var resultDetails = (datum['Result Details'] || '').trim();
            var proofArr = [];
            if (datum['Result Text']) proofArr.push(
                '<h3>Result Text</h3>' +
                datum['Result Text'].trim().replaceAll('\n', '<br/>')
            );
            if (datum['Threshold String']) proofArr.push(
                '<h3>Threshold String</h3>' +
                datum['Threshold String'].trim().replaceAll('\n', '<br/>')
            );
            if (resultDetails) proofArr.push(
                '<h3>Result Details</h3>' +
                (resultDetails.length <= 3000 ?
                    resultDetails.replaceAll('\n', '<br/>') :
                    'Due to size restrictions, data has been moved to an attachment')
            );

            var rec = {
                cmdb_ci: null,
                confirmed: true,
                dns: null,
                first_found: firstFoundDate,
                integration_instance: this.integrationGr.getValue('instance'),
                integration_run: this.integrationRunGr.getUniqueValue(),
                ip_address: null,
                is_disabled: false,
                is_ignored: false,
                last_found: testDate,
                last_opened: null,
                netbios: null,
                port: null,
                priority: this.x_ibm_vt.convertSeverity(severityValue),
                proof: proofArr.join('<br/><br/>'),
                protocol: null,
                result_details: resultDetails.length <= 3000 ? '' : resultDetails.replaceAll('<br>', '\n').replaceAll('<br/>', '\n'),
                severity: this.getLabel(severityValue),
                solution_summary: (datum['Recommendation'] || '').replaceAll('\r\n', String.fromCharCode(10)).trim(),
                source: GuardiumAPI.TITLE,
                source_status: datum['Score Description'] || datum['Test Score'] || '',
                source_result: this.detResultFromTestScore(datum['Test Score']),
                source_type: this.getLabel(datum['Category'] || testDatum['Category Name']),
                src_ci: null,
                src_vuln_id: null,
                ssl: null,
                status: testStatus,
                test_name: test_name,
                times_found: 1,
                grd_cat: (datum['Category'] || testDatum['Category Name'] || '').trim(),
                grd_sev: severityValue,
                grd_test_type: testDatum['Test Type']
            };

            // link CI reference
            var ds = {
                name: datum['Datasource Name'],
                fqdn_cm: cm.sys_id,
                fqdn: '',
                source_id: '',
                datasource_id: datum['Datasource Id'] || datum['Datasource ID'] ||
                    datum['Datasource Original Id'] || datum['Datasource Original ID'],
                datasource_type: datum['Datasource Type']
            };
            var cmdb = this.findOrCreateCMDB(cm, ds, test_id, remoteSysId);
            for (var c in cmdb) {
                rec[c] = cmdb[c];
            }

            // link test def reference
            var sn_vul_entry = new GlideRecord('sn_vul_entry');
            sn_vul_entry.addQuery('id', '=', test_id);
            sn_vul_entry.orderByDesc('date_published'); // newest first
            sn_vul_entry.query();
            while (sn_vul_entry.next()) {
                rec['vulnerability'] = sn_vul_entry.getUniqueValue();
                if (GuardiumAPI.TITLE == sn_vul_entry.getValue('source')) {
                    break;
                }
            }

            if (!rec.vulnerability && ('CVE' == rec.grd_test_type || !this.allowConfigCompliance)) {
                // Create a dummy entry
                rec.vulnerability = this.x_ibm_vt.processEntry(testDatum, cm);
                if (this.sn_vul_det.D_STATUS_DECOMMISSIONED != rec.status) {
                    // Report the missing test just once
                    if (!this.missingTest[rec.test_name]) {
                        this.missingTest[rec.test_name] = true;
                        GuardiumLog.info(
							'Created new test definition, ' + testDatum['ServiceNow ID'] + ', for: ' + test_name, 
							this.type
						);
                    }
                }
            }

            // link to parent summary
            var addParentLink = false;
            if (addParentLink && datum['Assessment Description'] && rec.last_found) {
                if (!this.assessmentTest[datum['Assessment Description']]) {
                    var sn_tr = new GlideRecord(GuardiumAPI.TABLE_TR);
                    sn_tr.addQuery('name', '=', datum['Assessment Description']);
                    sn_tr.addQuery('last_scan_date', '=', rec.last_found);
                    sn_tr.addQuery('fqdn_cm', cm.sys_id);
                    sn_tr.setLimit(1);
                    sn_tr.query();
                    if (sn_tr.next()) {
                        this.assessmentTest[datum['Assessment Description']] = sn_tr.getUniqueValue();
                    }
                }
                rec['parent'] = this.assessmentTest[datum['Assessment Description']];
            }

            // link sn_vul_solution
            if (this.sn_vul_det.D_STATUS_OPEN == rec.status) {
                rec.solution = this.createOrUpdateSolution(rec, datum, testDatum);
            }

            return rec;
        },

        findOrCreateCMDB: function(cm, ds, test_id, remoteSysId) {
            if ('-1' == ds.datasource_id) {
                throw new Error("Deleted data source.");
            }

            var rec = {};
            var sn_ds = this.x_ibm_ds.findDatasource(ds, 'id');
            if (!sn_ds) sn_ds = this.x_ibm_ds.findDatasource(ds, 'name');
            if (!sn_ds) {
                // Fetch info from Guardium and let GuardiumProcessorDatasource create the entry
                var cmdbDef = {
                    "Timestamp": "1970-01-02 12:00:00",
                    "Modified Entity": "DATASOURCE",
                    "Object Description": ds.name,
                    "Object ID": ds.datasource_id,
                    "Datasource Type": ds.datasource_type,
                    "Activity Type Description": "LOOKUP"
                };

                ds['source_id'] = this.x_ibm_ds.processEntry(cmdbDef, cm);
                if (ds.source_id) {
                    sn_ds = this.x_ibm_ds.findDatasource(ds, 'unid');
                } else {
                    if (!this.missingCMDB[ds.name]) {
                        this.missingCMDB[ds.name] = true;
                        GuardiumLog.warn('Could not find data source: ' + ds.name, this.type, "Test ID: " + test_id);
                    }
                }
            }

            if (sn_ds) {
                if (remoteSysId && remoteSysId != sn_ds.getValue('guardium_server')) {
                    sn_ds.setValue('guardium_server', remoteSysId);
                    sn_ds.update();
                }
                if (!ds.source_id) ds.source_id = sn_ds.getValue('source_id');
                if (!ds.fqdn) ds.fqdn = sn_ds.getValue('fqdn');

                // Find and link CMDB_CI record
                var oCILookup = {
                    di_sys_id: sn_ds.getValue('discovered_item') || '',
                    ci_sys_id: sn_ds.getValue('database_instance') || ''
                };
                oCILookup = this.x_ibm_ds.createOrUpdateDiscoveredItem(oCILookup, ds, false);

                rec['cmdb_ci'] = oCILookup.ci_sys_id;
                rec['src_ci'] = oCILookup.di_sys_id;
                rec['asset_id'] = ds.source_id; // asset_id is used for "detection" unique key
                rec['grd_db_type'] = ds.datasource_type || sn_ds.getValue('datasource_type') || 'UNKNOWN';
            }

            if (!rec['cmdb_ci'] || !rec['src_ci']) {
                throw new Error("Invalid data source: " + ds.name);
            }

            return rec;
        },

        createOrUpdateSolution: function(vt_entry, datum, testDatum) {
            if (!vt_entry.vulnerability) return '';

            var sid = [
                testDatum['ServiceNow ID'],
                datum['Test Score'],
                datum['Datasource Type'] || 'UNKNOWN'
            ].join(':').substring(0, 255);
            var gr = new GlideRecord('sn_vul_solution');
            gr.addQuery('source', '=', GuardiumAPI.TITLE);
            gr.addQuery('source_id', '=', sid);
            gr.setLimit(1);
            gr.query();
            if (!gr.next()) {
                var dbver = (datum['Full Version Info'] || '');
                gr.initialize();
                gr.setValue('source', GuardiumAPI.TITLE);
                gr.setValue('source_id', sid);
                gr.setValue('category', 'SOLUTION');
                gr.setValue('solution_type',
                    this.Score.FAIL == datum['Test Score'] ? 'PATCH' : '');
                gr.setValue('summary', [
                    datum['Test Description'],
                    datum['Score Description'] || datum['Test Score']
                ].join(': ').substring(0, 255));
                gr.setValue('description', [
                    '<h3>Database</h3><ul>' +
                    '<li>Name: ' + datum['Datasource Name'] + '</li>' +
                    '<li>Type: ' + (datum['Datasource Type'] || 'EMPTY') + '</li>' +
                    '<li>Version: ' + dbver.replaceAll('\n', ' ').replaceAll('\t', ' ').trim() + '</li></ul>',
                    '<h3>Score</h3><ul><li>' +
                    (datum['Score Description'] || datum['Test Score'] || '').trim() + '</li></ul>',
                    '<h3>Summary</h3><ul><li>' +
                    (datum['Result Text'] || '').replaceAll('\n', ' ').trim() + '</li></ul>',
                    '<h3>Recommendation</h3>' + (datum['Recommendation'] || '').trim().replaceAll('\n', '<br/>')
                ].join('<br/><br/>'));

                // dates and vul notes are from vulnerability record
                var gr_vul = new GlideRecord('sn_vul_entry');
                if (gr_vul.get(vt_entry.vulnerability)) {
                    gr.setValue('date_published', gr_vul.getValue('date_published'));
                    gr.setValue('last_modified', gr_vul.getValue('last_modified'));
                    gr.setValue('vulnerability_notes',
                        '<h3>' + gr_vul.getValue('id') + '</h3>' + gr_vul.getValue('summary'));
                }
                gr.insert();
            }
            return gr.getUniqueValue();
        },

        _updateSpecificCustomFields: function(viPlaceholder, detections) {
            // get the array of detections
            var aoDetections = detections.viDetections[detections.viSysId];
            var oDetection = aoDetections[aoDetections.length - 1];

            // copy source_status from the last detection
            var resultStatus = "Error";
            if (oDetection.source_status.toLowerCase().startsWith('pass')) {
                resultStatus = "Passed";
            } else
            if (oDetection.source_status.toLowerCase().startsWith('fail')) {
                resultStatus = "Failed";
            }
            viPlaceholder.setValue('status', resultStatus);

            // copy preferred solution from the last detection
            viPlaceholder.setValue('preferred_solution', oDetection.solution);
        },

        updateAttachment: function(tableName, tableSysId, vi_rec, onlyAttachment) {
            var doUpdate = false;
            var fields = {
                'solution': 'solution',
                'solution_summary': 'solution_summary',
                'source_status': 'source_status',
                'proof': 'proof'
            };
            try {
                var gr = new GlideRecord(tableName);
                if (gr.get(tableSysId)) {
                    if (!onlyAttachment) {
                        for (var f in fields) {
                            var prop = fields[f];
                            if (vi_rec[prop] != gr.getValue(f)) {
                                gr.setValue(f, vi_rec[prop]);
                                doUpdate = true;
                            }
                        }
                    }
                    if (doUpdate) {
                        vi_rec.updateVI = true;
                        gr.update();
                    }

                    // add attachment if Result Details is too big
                    var attachment = new GlideSysAttachment();
                    var attach = !!vi_rec.result_details;
                    var gr_att = new GlideRecord('sys_attachment');
                    gr_att.addQuery('table_name', '=', tableName);
                    gr_att.addQuery('table_sys_id', '=', tableSysId);
                    gr_att.addQuery('file_name', '=', 'result_details.txt');
                    gr_att.query();
                    if (gr_att.next()) {
                        if (attach && vi_rec.result_details == attachment.getContent(gr_att)) {
                            attach = false;
                        } else {
                            attachment.deleteAttachment(gr_att.getUniqueValue());
                        }
                    }
                    if (attach) {
                        attachment.write(gr, 'result_details.txt', 'text/plain', vi_rec.result_details);
                    }

                }
            } catch (e) {}
            return doUpdate;
        },

        ccResultFromTestScore: function(testScore) {
            var scoreNum = (testScore || '-1') - 0;
            if (scoreNum > 0) {
                return 'passed';
            } else
            if (scoreNum == 0) {
                return 'failed';
            }
            return 'error';
        },

        ccStateFromTestScore: function(testScore) {
            // let customer determine what is marked as error
            for (var i = 0; i < this.error_scores.length; i++) {
                if (testScore == this.Score[this.error_scores[i]]) {
                    return 1;
                }
            }

            // let customer determine what is marked as failure
            for (var f = 0; f < this.failed_scores.length; f++) {
                if (testScore == this.Score[this.failed_scores[f]]) {
                    return 1;
                }
            }

            // let customer determine what is marked as passed
            for (var p = 0; p < this.passed_scores.length; p++) {
                if (testScore == this.Score[this.passed_scores[p]]) {
                    return 3;
                }
            }

            // return default status
            switch (testScore) {
                case this.Score.PASS:
                case this.Score.PASS_WITH_CAUTION:
                case this.Score.PASS_DUE_TO_EXCEPTION:
                    return 3;

                case this.Score.FAIL:
                    return 1;

                default:
                    throw new Error('IGNORE');
            }
        },

        detResultFromTestScore: function(testScore) {
            var scoreNum = (testScore || '-1') - 0;
            if (scoreNum > 0) {
                return 'Passed';
            } else
            if (scoreNum == 0) {
                return 'Failed';
            }
            return 'Error';
        },

        detStatusFromTestScore: function(testScore) {
            // let customer determine what is marked as failure
            for (var i = 0; i < this.error_scores.length; i++) {
                if (testScore == this.Score[this.error_scores[i]]) {
                    return this.sn_vul_det.D_STATUS_OPEN;
                }
            }

            // let customer determine what is marked as failure
            for (var f = 0; f < this.failed_scores.length; f++) {
                if (testScore == this.Score[this.failed_scores[f]]) {
                    return this.sn_vul_det.D_STATUS_OPEN;
                }
            }

            // let customer determine what is marked as passed
            for (var p = 0; p < this.passed_scores.length; p++) {
                if (testScore == this.Score[this.passed_scores[p]]) {
                    return this.sn_vul_det.D_STATUS_CLOSED;
                }
            }

            // else return default status
            switch (testScore) {
                case this.Score.PASS:
                case this.Score.PASS_WITH_CAUTION:
                case this.Score.PASS_DUE_TO_EXCEPTION:
                    return this.sn_vul_det.D_STATUS_CLOSED;

                case this.Score.FAIL:
                    return this.sn_vul_det.D_STATUS_OPEN;

                default:
                    throw new Error('IGNORE');
            }
        },

        checkDetectionKey: function() {
            var guardium_sys_id = this.integrationGr.getValue('integration');
            var gr = new GlideRecord('sn_vul_detection_key_config');
            gr.addQuery('source_integration', '=', guardium_sys_id);
            gr.setLimit(1);
            gr.query();
            if (!gr.next()) {
                // create it
                gr.initialize();
                gr.setValue('source_integration', guardium_sys_id);
                gr.setValue('source', GuardiumAPI.TITLE);
                gr.setValue('asset_id', true);
                gr.setValue('port', false);
                gr.setValue('proof', false);
                gr.setValue('protocol', false);
                gr.setValue('vulnerability', true);
                // detection_key is updated by a business rule
                // gr.setValue('detection_key', '["vulnerability","port","protocol","asset_id"]');
                gr.insert();
            } else {
                if ("1" == gr.getValue('proof')) {
                    gr.setValue('asset_id', true);
                    gr.setValue('port', false);
                    gr.setValue('proof', false);
                    gr.setValue('protocol', false);
                    gr.setValue('vulnerability', true);
                    gr.update();
                }
            }

            try {
                var keys = ['vulnerability', 'asset_id'];
                this.sn_vul_det._detectionKeysForIdLegacy = this.sn_vul_det._detectionKeysForId =
                    this.sn_vul_det._viLookupKeys = keys;

                // proof contains the test result detail value
                this.sn_vul_det.useProofForVIKey = false;
            } catch (e) {}
        },

        type: 'GuardiumProcessorTestResultDetail'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-07 17:24:52</sys_created_on>
        <sys_id>dd9cea9f877c4150387c64280cbb352f</sys_id>
        <sys_mod_count>201</sys_mod_count>
        <sys_name>GuardiumProcessorTestResultDetail</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_dd9cea9f877c4150387c64280cbb352f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-10 14:34:02</sys_updated_on>
    </sys_script_include>
</record_update>
