<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_guard.GuardiumProcessorTestResultDetail</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium test result detail processor script</description>
        <name>GuardiumProcessorTestResultDetail</name>
        <script><![CDATA[var GuardiumProcessorTestResultDetail = Class.create();

/* "Test Score" Enum Values */
GuardiumProcessorTestResultDetail.PASS = '1';
GuardiumProcessorTestResultDetail.PASS_WITH_CAUTION = '2';
GuardiumProcessorTestResultDetail.FAIL = '0';
GuardiumProcessorTestResultDetail.ERROR = '-1';
GuardiumProcessorTestResultDetail.NO_CAS_DATA = '-2';
GuardiumProcessorTestResultDetail.NO_REPORT_DATA = '-3';
GuardiumProcessorTestResultDetail.UNSUPPORTED_DB_VERSION = '-4';
GuardiumProcessorTestResultDetail.UNSUPPORTED_OS_VERSION = '-5';
GuardiumProcessorTestResultDetail.SPECIAL_ERROR = '-6';
GuardiumProcessorTestResultDetail.CAS_DATA_COLLECTION_ERROR = '-7';
GuardiumProcessorTestResultDetail.OBSOLETE_PARAMETER = '-8';
GuardiumProcessorTestResultDetail.DEPRECATED_PARAMETER = '-9';
GuardiumProcessorTestResultDetail.NOT_APPLICABLE_FOR_DB_VER = '-10';
GuardiumProcessorTestResultDetail.NO_USER_DATA = '-11';
GuardiumProcessorTestResultDetail.MODULES_NOT_PRESENT = '-12';
GuardiumProcessorTestResultDetail.PRE_TEST_CHECK_FAILED = '-13';
GuardiumProcessorTestResultDetail.EXECUTION_TEST_ROUTINE_CHECK_FAILED = '-14';
GuardiumProcessorTestResultDetail.UNSUPPORT_CVE_PATCH_DETECTED = '-15';
GuardiumProcessorTestResultDetail.UNSUPPORT_PTF_PATCH_DETECTED = '-16';
GuardiumProcessorTestResultDetail.NOT_APPLICABLE = '-17';
GuardiumProcessorTestResultDetail.DEPRECATED_TEST = '-18';
GuardiumProcessorTestResultDetail.UNSUPPORT_DATABASE_PATCH_DETECTED = '-19';
GuardiumProcessorTestResultDetail.ORACLE_JVM_COMPONENT_NOT_INSTALL = '-20';
GuardiumProcessorTestResultDetail.NO_DATABASE_FOUND_IN_LOOPING = '-21';
GuardiumProcessorTestResultDetail.NO_DATABASE_PROFILE_FOUND = '-22';

GuardiumProcessorTestResultDetail.prototype =
    Object.extendsObject(GuardiumProcessorBase, {

        beforeProcessReport: function() {
            // initialize detection engine
            this.vul_detect = new sn_vul.Detection(
                this.integrationGr.getValue('integration'),
                this.integrationGr.getValue('instance'),
                this.integrationRunGr.getValue('sys_id')
            );

            // initialize compliance-test engine
            try {
                this.compliance = new sn_vulc.ComplianceTestResult(
                    GuardiumAPI.TITLE,
                    this.integrationGr.getValue('instance'),
                    this.integrationRunGr.getValue('sys_id')
                );
            } catch (ec) {}

            // preferences ... Array.prototype.includes is not part of ES6 ... use string
            this.severities = ',' + (this.preferences.getValue('test_failure_severity') || '') + ',';
            this.test_types = ',' + (this.preferences.getValue('test_failure_type') || '') + ',';
        },

        beforeCM: function(cm, data) {
            this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm.sys_id, true));
            //this.gAPI.authenticate();
        },

        afterProcessReport: function(cm) {
            // finalize detections
            this.vul_detect.finalizeDetections();
        },

        /*
            datum = {
            	name: gr_mu.getDisplayName(),
            	fqdn: gr_mu.getValue('fqdn'),
            	sys_id: gr_mu.getValue('sys_id'),
            	data: reportData
            }
		*/

        processEntry: function(datum, cm) {
            for (var i = 0; i < datum.data.length; i++) {
                var exists = false;

                // parse database record into a structure with ServiceNow "Detection" fields
                var vi_rec = this.transform(datum.data[i], cm);

                // Create detection if test_type is CVE
                if (this.test_types.includes(',' + vi_rec.test_type + ',') || !this.compliance) {
                    // only process failures if severity matches preferences
                    if (1 == vi_rec.statusNum || this.severities.includes(',' + vi_rec.severity + ',')) {
                        // add a "Detection" entry
                        this.vul_detect.createDetection(vi_rec);
                        this.logEntry(vi_rec, 'detection');
                        this.inserted_vi++;
                    } else {
                        this.logEntry(vi_rec, 'skipped');
                        this.skipped++;
                    }
                } else {
                    // Else, create Compliance Test Result 
                    var tr = this.transformCTR(datum.data[i], vi_rec, this.compliance.newTestResult());
                    var result = this.compliance.createOrUpdateTestResult(tr);
                    this.logEntry(vi_rec, 'compliance');
                    if (result.inserted) this.inserted_vi++;
                    else if (result.updated) this.updated_vi++;
                    else if (result.unchanged) this.skipped++;
                    else if (result.error) this.failed++;
                }
            }
        },

        logEntry: function(vi_rec, label, force) {
            if (force || this.log_level <= 0) {
                gs.info(
                    this.type +
                    ' - ' + label + ' [' + [vi_rec.severity, vi_rec.category, vi_rec.test_type, vi_rec.test_name].join(', ') +
                    ']'
                );
            }
        },

        /*	
        {
        "Datasource Name": "PostgreSQL 9.5 on becalmed1.my-domain.com",
        "Datasource Type": "POSTGRESQL",
        "DB Name": "postgres",
        "Version Level": "9.5",
        "Patch Level": "25",
        "Full Version Info": "9.5.25",
        "Description": "",
        "Host": "becalmed1.my-domain.com",
        "Test Description": "Audit records must be generated when categorized information (e.g., classification levels or security levels) is deleted.",
        "Test Score": "1",
        "Score Description": "Pass",
        "Result Text": "Test passed, based on following exceptions:\n \nException approved by: admin effective from 2022-01-26 10:56:00.0 to 2022-01-27 05:00:00.0 with justification 'Temporary exception to see if it appears in REST-API results'. \n",
        "Recommendation": "Document referenced: PostgreSQL 9.x Security Technical Implementation Guide V2 R2, PostgreSQL 9.X Supplemental Procedures V2 R2\r\nThe following instructions use the PGDATA and PGVER environment variables. See supplementary content APPENDIX-F for instructions on configuring PGDATA and APPENDIX-H for PGVER.\r\n\r\nConfigure PostgreSQL to produce audit records when unsuccessful attempts to modify categories of information. \r\n\r\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\nUsing pgaudit PostgreSQL can be configured to audit these requests. See supplementary content APPENDIX-B for documentation on installing pgaudit. \r\n\r\nWith pgaudit installed the following configurations can be made: \r\n\r\n$ sudo su - postgres \r\n$ vi ${PGDATA?}/postgresql.conf \r\n\r\nAdd the following parameters (or edit existing parameters): \r\n\r\npgaudit.log='ddl, role, read, write' \r\n\r\nNow, as the system administrator, reload the server with the new configuration: \r\n\r\n# SYSTEMD SERVER ONLY \r\n$ sudo systemctl reload postgresql-${PGVER?}",
        "Severity": "MAJOR",
        "Category": "CONF",
        "Execution Date": "2022-01-26 10:57:59",
        "Assessment Description": "Willie - PostgreSQL 9.5"
        },
        {
        "Datasource Name": "w2k12std-va01.my-domain.com sql2014 pass",
        "Datasource Type": "MS SQL SERVER",
        "DB Name": "master",
        "Version Level": "12.0",
        "Patch Level": "5223",
        "Full Version Info": "Microsoft SQL Server 2014 (SP2-GDR) (KB4505217) - 12.0.5223.6 (X64) \n\tMay 26 2019 20:36:50 \n\tCopyright (c) Microsoft Corporation\n\tEnterprise Edition (64-bit) on Windows NT 6.3 <X64> (Build 9600: ) (Hypervisor)\n",
        "Description": "",
        "Host": "w2k12std-va01.my-domain.com",
        "Test Description": "CVE-2001-0509",
        "Test Score": "-10",
        "Score Description": "Not/Applicable for the DB version",
        "Result Text": "CVE-2001-0509 vulnerability was not reported for MS SQL SERVER 12.0.",
        "Recommendation": "This test is not applicable for this Database Version",
        "Severity": "MAJOR",
        "Category": "CONF",
        "Execution Date": "2021-12-28 10:31:55",
        "Assessment Description": "jeff mssqlcve"
        },
	*/

        transformCTR: function(datum, vi_rec, tr) {
            var tr_rec = tr || {};
            tr_rec.integration_instance = vi_rec.integration_instance;
            tr_rec.source = vi_rec.source;
            tr_rec.cmdb_ci = vi_rec.cmdb_ci; // DS ref
            tr_rec.src_ci = vi_rec.src_ci; // DI ref
            tr_rec.control = vi_rec.vulnerability; // test ref
            tr_rec.description = vi_rec.proof;
            tr_rec.display = datum['Test Description'] || "";
            tr_rec.last_seen = vi_rec.last_found;
            tr_rec.remediation = vi_rec.solution_summary;
            tr_rec.result = ('pass' == (datum['Score Description'] || '').toLowerCase() ? 'passed' : datum['Score Description']) || '';
            tr_rec.state = 1;
            tr_rec.source_type = vi_rec.source_type;

            // link test reference
            if (tr_rec.display && 'deprecated test' != tr_rec.result.toLowerCase()) {
                var sn_ta = new GlideRecord('sn_vulc_test');
                sn_ta.addQuery('short_description', '=', tr_rec.display.substring(0, 512));
                sn_ta.query();
                while (sn_ta.next()) {
                    tr_rec.control = sn_ta.getValue('sys_id');
                    if (GuardiumAPI.TITLE == sn_ta.getValue('source')) {
                        break;
                    }
                }

                if (!tr_rec.control) {
                    gs.warn(this.type + ' - Could not find test - ' + tr_rec.display);
                }
            }

            return tr_rec;
        },

        transform: function(datum, cm) {
            // Test Score is a number but is a string in the JSON response
            var testStatus = this.getStatusFromTestScore(datum['Test Score']);

            var rec = {
                cmdb_ci: null,
                confirmed: true,
                dns: null,
                first_found: null,
                integration_instance: this.integrationGr.getValue('instance'),
                integration_run: this.integrationRunGr.getValue('sys_id'),
                ip_address: null,
                is_disabled: false,
                is_ignored: false,
                last_found: this.gAPI.adjustTimeFromGuardium(datum['Execution Date']),
                last_opened: null,
                netbios: null,
                port: null,
                proof: datum['Result Text'].replaceAll('\n', '<br/>'),
                protocol: null,
                severity: (datum['Severity'] || '').trim(),
                solution: null,
                solution_summary: datum['Recommendation'].replaceAll('\r\n', String.fromCharCode(10)),
                source: GuardiumAPI.TITLE,
                source_status: datum['Score Description'] || '',
                source_type: datum['Category'],
                src_ci: null,
                src_vuln_id: null,
                ssl: null,
                status: testStatus,
                test_name: datum['Test Description'],
                times_found: 1,
            };


            // link CI reference
            if (datum['Datasource Name']) {
                var sn_ds = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                sn_ds.addQuery(GuardiumAPI.CMDB_COL_CM, '=', cm.sys_id);
                sn_ds.addQuery('name', '=', datum['Datasource Name']);
                sn_ds.query();
                if (sn_ds.next()) {
                    rec['cmdb_ci'] = sn_ds.getValue('database_instance');
                    rec['src_ci'] = sn_ds.getValue('discovered_item');
					// asset_id is used for "detection" unique key
					rec['asset_id'] = sn_ds.getUniqueValue();
                } else {
                    gs.warn(this.type + ' - Could not find data source - ' + datum['Datasource Name']);
                }
            }

            // link CVE reference
            if (rec.test_name && 'deprecated test' != rec.source_status.toLowerCase()) {
                var sn_ta = new GlideRecord(GuardiumAPI.TABLE_TA_BASE);
                sn_ta.addQuery('id', '=', rec.test_name.substring(0, 255));
                sn_ta.query();
                while (sn_ta.next()) {
                    rec['vulnerability'] = sn_ta.getValue('sys_id');
                    rec['test_type'] = (sn_ta.getValue('classification') || '').trim();
                    rec['category'] = (sn_ta.getValue('category') || '').trim();
                    if (GuardiumAPI.TITLE == sn_ta.getValue('source')) {
                        break;
                    }
                }
                if (!rec.vulnerability) {
                    gs.warn(this.type + ' - Could not find test - ' + rec.test_name);
                }
            }

            // link to parent summary
            if (datum['Assessment Description'] && rec.last_found) {
                var sn_tr = new GlideRecord(GuardiumAPI.TABLE_TR);
                sn_tr.addQuery('name', '=', datum['Assessment Description']);
                sn_tr.addQuery('last_scan_date', '=', rec.last_found);
                sn_tr.addQuery('fqdn_cm', cm.sys_id);
                sn_tr.query();
                if (sn_tr.next()) {
                    rec['parent'] = sn_tr.getValue('sys_id');
                }
            }

            return rec;
        },

        getStatusFromTestScore: function(testScore) {
            switch (testScore) {
                case GuardiumProcessorTestResultDetail.PASS:
                case GuardiumProcessorTestResultDetail.PASS_WITH_CAUTION:
                    return this.vul_detect.D_STATUS_CLOSED;

                case GuardiumProcessorTestResultDetail.FAIL:
                    return this.vul_detect.D_STATUS_OPEN;

                case GuardiumProcessorTestResultDetail.DEPRECATED_TEST:
                case GuardiumProcessorTestResultDetail.DEPRECATED_PARAMETER:
                    return this.vul_detect.D_STATUS_DECOMMISSIONED;

                case GuardiumProcessorTestResultDetail.ERROR:
                case GuardiumProcessorTestResultDetail.NO_CAS_DATA:
                case GuardiumProcessorTestResultDetail.NO_REPORT_DATA:
                case GuardiumProcessorTestResultDetail.UNSUPPORTED_DB_VERSION:
                case GuardiumProcessorTestResultDetail.UNSUPPORTED_OS_VERSION:
                case GuardiumProcessorTestResultDetail.SPECIAL_ERROR:
                case GuardiumProcessorTestResultDetail.CAS_DATA_COLLECTION_ERROR:
                case GuardiumProcessorTestResultDetail.OBSOLETE_PARAMETER:
                case GuardiumProcessorTestResultDetail.NOT_APPLICABLE_FOR_DB_VER:
                case GuardiumProcessorTestResultDetail.NO_USER_DATA:
                case GuardiumProcessorTestResultDetail.MODULES_NOT_PRESENT:
                case GuardiumProcessorTestResultDetail.PRE_TEST_CHECK_FAILED:
                case GuardiumProcessorTestResultDetail.EXECUTION_TEST_ROUTINE_CHECK_FAILED:
                case GuardiumProcessorTestResultDetail.UNSUPPORT_CVE_PATCH_DETECTED:
                case GuardiumProcessorTestResultDetail.UNSUPPORT_PTF_PATCH_DETECTED:
                case GuardiumProcessorTestResultDetail.NOT_APPLICABLE:
                case GuardiumProcessorTestResultDetail.UNSUPPORT_DATABASE_PATCH_DETECTED:
                case GuardiumProcessorTestResultDetail.ORACLE_JVM_COMPONENT_NOT_INSTALL:
                case GuardiumProcessorTestResultDetail.NO_DATABASE_FOUND_IN_LOOPING:
                case GuardiumProcessorTestResultDetail.NO_DATABASE_PROFILE_FOUND:
                default:
                    return this.vul_detect.D_STATUS_CLOSED; // D_STATUS_INVALID does not work
            }
        },

        type: 'GuardiumProcessorTestResultDetail'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-07 17:24:52</sys_created_on>
        <sys_id>dd9cea9f877c4150387c64280cbb352f</sys_id>
        <sys_mod_count>64</sys_mod_count>
        <sys_name>GuardiumProcessorTestResultDetail</sys_name>
        <sys_package display_value="IBM Guardium Vulnerability Assessment" source="x_ibmrt_guard">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Vulnerability Assessment">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_dd9cea9f877c4150387c64280cbb352f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-06-23 16:03:12</sys_updated_on>
    </sys_script_include>
</record_update>
