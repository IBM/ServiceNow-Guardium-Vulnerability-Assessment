<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_ibmrt_gdpva.GuardiumProcessorTestResultDetail</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>IBM Guardium test result detail processor script</description>
        <name>GuardiumProcessorTestResultDetail</name>
        <script><![CDATA[var GuardiumProcessorTestResultDetail = Class.create();

GuardiumProcessorTestResultDetail.prototype =
    Object.extendsObject(GuardiumProcessorBase, {
        /* "Test Score" Enum Values */
        Score: {
            PASS: '1',
            PASS_WITH_CAUTION: '2',
            FAIL: '0',
            ERROR: '-1',
            NO_CAS_DATA: '-2',
            NO_REPORT_DATA: '-3',
            UNSUPPORTED_DB_VERSION: '-4',
            UNSUPPORTED_OS_VERSION: '-5',
            SPECIAL_ERROR: '-6',
            CAS_DATA_COLLECTION_ERROR: '-7',
            OBSOLETE_PARAMETER: '-8',
            DEPRECATED_PARAMETER: '-9',
            NOT_APPLICABLE_FOR_DB_VER: '-10',
            NO_USER_DATA: '-11',
            MODULES_NOT_PRESENT: '-12',
            PRE_TEST_CHECK_FAILED: '-13',
            EXECUTION_TEST_ROUTINE_CHECK_FAILED: '-14',
            UNSUPPORT_CVE_PATCH_DETECTED: '-15',
            UNSUPPORT_PTF_PATCH_DETECTED: '-16',
            NOT_APPLICABLE: '-17',
            DEPRECATED_TEST: '-18',
            UNSUPPORT_DATABASE_PATCH_DETECTED: '-19',
            ORACLE_JVM_COMPONENT_NOT_INSTALL: '-20',
            NO_DATABASE_FOUND_IN_LOOPING: '-21',
            NO_DATABASE_PROFILE_FOUND: '-22'
        },

        beforeProcessReport: function() {
            this.missingCMDB = {};
            this.missingTest = {};

            // initialize detection engine
            this.sn_vul_det = new sn_vul.Detection(
                this.integrationGr.getValue('integration'),
                this.integrationGr.getValue('instance'),
                this.integrationRunGr.getUniqueValue()
            );

            // make sure there is a sn_vul_detection_key_config
            this.checkDetectionKey();

            // initialize compliance-test engine
            try {
                this.sn_vulc_ctr = new sn_vulc.ComplianceTestResult(
                    GuardiumAPI.TITLE,
                    this.integrationGr.getValue('instance'),
                    this.integrationRunGr.getUniqueValue()
                );
            } catch (ec) {}

            // preferences ... Array.prototype.includes is not part of ES6 ... use string
            this.severities = ',' + (this.preferences.getValue('test_failure_severity') || '') + ',';
            this.failed_types = ',' + (this.preferences.getValue('test_failure_type') || '') + ',';
            this.failed_scores = (this.preferences.getValue('test_failure_status') || '').trim().split(',');

            // init Vulnerability script for deprecated tests
            this.x_ibm_vt = new GuardiumProcessorVulnerabilityTest();
            this.x_ibm_vt.integrationGr = this.integrationGr;
            this.x_ibm_vt.integrationRunGr = this.integrationRunGr;
            this.x_ibm_vt.dt_now = this.dt_now;
            this.x_ibm_vt.beforeProcessReport();

            // init database processor
            this.x_ibm_ds = new GuardiumProcessorDatasource();
            this.x_ibm_ds.integrationGr = this.integrationGr;
            this.x_ibm_ds.integrationRunGr = this.integrationRunGr;
            this.x_ibm_ds.dt_now = this.dt_now;
            this.x_ibm_ds.beforeProcessReport();
        },

        beforeCM: function(cm, data) {
            this.gAPI = new GuardiumAPI(GuardiumAPI.getGlideRecordCM(cm.sys_id, true));
            this.assessmentTest = {};

            // init Vulnerability script for deprecated tests
            this.x_ibm_vt.gAPI = this.gAPI;
            // init database processor
            this.x_ibm_ds.gAPI = this.gAPI;
        },

        afterProcessReport: function(cm) {
            try {
                // finalize detections
                var counts = this.sn_vul_det.finalizeDetections();
                if (counts) {
                    this.inserted_vi = counts.inserted.vis;
                    this.inserted_det = counts.inserted.dets;
                    this.updated_vi = counts.updated.vis;
                    this.updated_det = counts.updated.dets;
                    this.skipped_vi = counts.ignored.vis;
                    this.skipped_det = counts.ignored.dets;
                }
            } catch (e) {
                GuardiumLog.error('', this.type, e);
            }
        },

        processEntry: function(datum, cm) {
            for (var i = 0; i < datum.data.length; i++) {
                var resultJSON = datum.data[i];
                try {
                    var exists = false;
                    var action = '';

                    // parse database record into a structure with ServiceNow "Detection" fields
                    var vi_rec = this.transformDET(resultJSON, cm);

                    // Create detection if test_type is CVE
                    if (this.failed_types.indexOf(',' + vi_rec.grd_test_type + ',') >= 0 ||
                        !this.sn_vulc_ctr) {
                        // only process failures if severity matches preferences
                        if (this.sn_vul_det.D_STATUS_OPEN == vi_rec.status ||
                            this.severities.indexOf(',' + vi_rec.grd_sev + ',') >= 0) {
                            // add a "Detection" entry
                            this.sn_vul_det.createDetection(vi_rec);
                            if (vi_rec.updateVI) {
                                this.updated_det++;
                                action = 'updated';
                            } else if (vi_rec.viSysId) {
                                this.inserted_det++;
                                action = 'unknown';
                            } else {
                                this.skipped_det++;
                                action = 'skipped';
                            }
                        } else {
                            this.skipped_det++;
                            action = 'skipped';
                        }
                        this.logEntry(vi_rec, 'sn_vul_detection', action);
                    } else {
                        // Else, create Compliance Test Result 
                        var tr = this.transformCTR(resultJSON, vi_rec, this.sn_vulc_ctr.newTestResult(), cm);
                        var result = this.sn_vulc_ctr.createOrUpdateTestResult(tr);
                        if (result.inserted) {
                            this.inserted_cc++;
                            action = 'inserted';
                        } else if (result.updated) {
                            this.updated_cc++;
                            action = 'updated';
                        } else if (result.unchanged) {
                            this.skipped_cc++;
                            action = 'skipped';
                        } else if (result.error) {
                            this.failed_cc++;
                            action = 'failed';
                        }
                        this.logEntry(vi_rec, 'sn_vulc_result', action);
                    }
                } catch (e) {
                    GuardiumLog.error('Error processing:\n ' + JSON.stringify(resultJSON), this.type, e);
                }
            }
        },

        logEntry: function(vi_rec, label, action) {
            GuardiumLog.debug(
                [label, action].join(' : ') + "\n[" + [vi_rec.test_name, vi_rec.source_status, vi_rec.grd_sev, vi_rec.grd_test_type].join(', ') +
                ']',
                this.type
            );
        },

        getTestDatum: function(datum) {
            return this.x_ibm_vt.createOrUpdateDefinition(datum, true);
        },

        transformCTR: function(datum, vi_rec, tr, cm) {
            var testResult = this.getResultFromTestScore(datum['Test Score'], datum['Score Description']);

            var testType = (datum['Test Description'] || '').indexOf('CVE') == 0 ||
                (datum['Test Description'] || '').indexOf('CWE') == 0 ? 'CVE' : '';
            var testDatum = this.getTestDatum({
                "Test ID": datum['Test ID'] || '',
                "Test Description": datum['Test Description'] || '',
                "Timestamp": '1970-01-02 12:00:00',
                "Short Description": "Placeholder until the test definition is imported",
                "Test Type": testType,
                "Datasource Type": datum['Datasource Type'] || 'EMPTY'
            });

            var test_name = testDatum['Test Description'];
            var test_id = (
                test_name.indexOf('CVE-') >= 0 || test_name.indexOf('CWE-') >= 0 ?
                test_name : 'Guardium-' + testDatum['Test ID']
            ).substring(0, 512);

            var tr_rec = tr || {};
            tr_rec.integration_instance = vi_rec.integration_instance;
            tr_rec.source = vi_rec.source;
            tr_rec.cmdb_ci = vi_rec.cmdb_ci; // DS ref
            tr_rec.src_ci = vi_rec.src_ci; // DI ref
            tr_rec.control = ''; // test ref
            tr_rec.description = vi_rec.proof;
            tr_rec.display = test_name;
            tr_rec.first_seen = vi_rec.first_found;
            tr_rec.last_seen = vi_rec.last_found;
            tr_rec.remediation = vi_rec.solution_summary;
            tr_rec.result = testResult;
            tr_rec.state = 1;
            tr_rec.source_type = vi_rec.source_type;
            tr_rec.technology = null;
			tr_rec.actual_values = datum['Result Details'] || '';
			tr_rec.expected_values = datum['Threshold String'] || '';

            // link test reference
            var sn_vulc_test = new GlideRecord('sn_vulc_test');
            sn_vulc_test.addQuery('source_id', '=', test_id);
            sn_vulc_test.orderByDesc('source_created'); // newest first
            sn_vulc_test.query();
            while (sn_vulc_test.next()) {
                tr_rec.control = sn_vulc_test.getUniqueValue();
                if (GuardiumAPI.TITLE == sn_vulc_test.getValue('source')) {
                    if (!sn_vulc_test.getValue('remediation') &&
                        this.sn_vul_det.D_STATUS_OPEN == vi_rec.status) {
                        sn_vulc_test.setValue('remediation', tr_rec.remediation);
                        sn_vulc_test.update();
                    }
                    break;
                }
            }

            if (!tr_rec.control) {
                // Create a dummy entry
                tr_rec.control = this.x_ibm_vt.processEntry(testDatum, cm);

                // Report the missing test just once
                if (this.sn_vul_det.D_STATUS_DECOMMISSIONED != vi_rec.status) {
                    if (!this.missingTest[tr_rec.display]) {
                        this.missingTest[tr_rec.display] = true;
                        GuardiumLog.warn('Could not find test definition for: ' + test_name, this.type);
                    }
                }
            }

            // link the technology
            if (vi_rec.grd_db_type) {
                try {
                    var gr_tech = new GlideRecord('sn_vulc_technology');
                    gr_tech.addQuery('source', '=', GuardiumAPI.TITLE);
                    gr_tech.addQuery('source_id', '=', vi_rec.grd_db_type);
                    gr_tech.setLimit(1);
                    gr_tech.query();
                    if (gr_tech.next()) {
                        tr_rec.technology = gr_tech.getUniqueValue();
                    }
                } catch (e) {}
            }

            return tr_rec;
        },

        transformDET: function(datum, cm) {
            if (!datum['Datasource Name'] || !datum['Test Description']) {
                throw new Error("Invalid data source or test description.");
            }

            // Test Score is a number but is a string in the JSON response
            var testStatus = this.getStatusFromTestScore(datum['Test Score']);
            var testDate = this.gAPI.adjustTimeFromGuardium(
				datum['Execution Date']
			);
            var firstFoundDate = this.gAPI.adjustTimeFromGuardium(
				datum['First Fail Datetime'] || datum['Execution Date']
			);

            var testType = (datum['Test Description'] || '').indexOf('CVE') == 0 ||
                (datum['Test Description'] || '').indexOf('CWE') == 0 ? 'CVE' : '';
            var testDatum = this.getTestDatum({
                "Test ID": datum['Test ID'] || '',
                "Test Description": datum['Test Description'] || '',
                "Timestamp": '1970-01-02 12:00:00',
                "Short Description": "Placeholder until the test definition is imported",
                "Test Type": testType,
                "Datasource Type": datum['Datasource Type'] || 'EMPTY'
            });

            var test_name = testDatum['Test Description'];
            var test_id = (
                test_name.indexOf('CVE-') >= 0 || test_name.indexOf('CWE-') >= 0 ?
                test_name : 'Guardium-' + testDatum['Test ID']
            ).substring(0, 255);

            var rec = {
                cmdb_ci: null,
                confirmed: true,
                dns: null,
                first_found: firstFoundDate,
                integration_instance: this.integrationGr.getValue('instance'),
                integration_run: this.integrationRunGr.getUniqueValue(),
                ip_address: null,
                is_disabled: false,
                is_ignored: false,
                last_found: testDate,
                last_opened: null,
                netbios: null,
                port: null,
                proof: [
					'<h4>Result Text</h4>' + 
					(datum['Result Text'] || '').trim().replaceAll('\n', '<br/>'),
					'<h4>Result Details</h4>' + 
					(datum['Result Details'] || '').trim().replaceAll('\n', '<br/>'),
					'<h4>Threshold String</h4>' + 
					(datum['Threshold String'] || '').trim().replaceAll('\n', '<br/>')
				].join('<br/><br/>'),
                protocol: null,
                severity: this.getLabel(datum['Severity']),
                solution: null, // see below
                solution_summary: datum['Recommendation'].replaceAll('\r\n', String.fromCharCode(10)),
                source: GuardiumAPI.TITLE,
                source_status: datum['Score Description'] || '',
                source_type: this.getLabel(datum['Category']),
                src_ci: null,
                src_vuln_id: null,
                ssl: null,
                status: testStatus,
                test_name: test_name,
                times_found: 1,
                grd_cat: (datum['Category'] || '').trim(),
                grd_sev: (datum['Severity'] || '').trim(),
                grd_test_type: testType
            };

            // link CI reference
            var cmdb = this.findOrCreateCMDB(cm, datum['Datasource Name']);
            for (var c in cmdb) {
                rec[c] = cmdb[c];
            }

            // link test def reference
            var sn_vul_entry = new GlideRecord('sn_vul_entry');
            sn_vul_entry.addQuery('id', '=', test_id);
            sn_vul_entry.orderByDesc('date_published'); // newest first
            sn_vul_entry.query();
            while (sn_vul_entry.next()) {
                rec['vulnerability'] = sn_vul_entry.getUniqueValue();
                if (GuardiumAPI.TITLE == sn_vul_entry.getValue('source')) {
                    var x_entry = new GlideRecord('sn_vul_third_party_entry');
                    if (x_entry.get(rec.vulnerability)) {
                        var asLabels = (x_entry.getValue('category') || '').split(' | ');
                        rec['grd_cat'] = rec['grd_cat'] || this.getKey(asLabels[0]);
                        rec['grd_test_type'] = rec['grd_test_type'] || this.getKey(asLabels[1]);
                        break;
                    }
                }
            }

            if (!rec.vulnerability && ('CVE' == rec.grd_test_type) || !this.sn_vulc_ctr) {
                // Create a dummy entry
                rec.vulnerability = this.x_ibm_vt.processEntry(testDatum, cm);
                if (this.sn_vul_det.D_STATUS_DECOMMISSIONED != rec.status) {
                    // Report the missing test just once
                    if (!this.missingTest[rec.test_name]) {
                        this.missingTest[rec.test_name] = true;
                        GuardiumLog.warn('Could not find test definition for: ' + test_name, this.type);
                    }
                }
            }

            // link to parent summary
            if (datum['Assessment Description'] && rec.last_found) {
                if (!this.assessmentTest[datum['Assessment Description']]) {
                    var sn_tr = new GlideRecord(GuardiumAPI.TABLE_TR);
                    sn_tr.addQuery('name', '=', datum['Assessment Description']);
                    sn_tr.addQuery('last_scan_date', '=', rec.last_found);
                    sn_tr.addQuery('fqdn_cm', cm.sys_id);
                    sn_tr.setLimit(1);
                    sn_tr.query();
                    if (sn_tr.next()) {
                        this.assessmentTest[datum['Assessment Description']] = sn_tr.getUniqueValue();
                    }
                }
                rec['parent'] = this.assessmentTest[datum['Assessment Description']];
            }

            // link sn_vul_solution
            rec.solution = this.createOrUpdateSolution(rec, datum);

            return rec;
        },

        findOrCreateCMDB: function(cm, ds_name) {
            var rec = {};
            var sn_ds = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
            sn_ds.addQuery('fqdn_cm', '=', cm.sys_id);
            sn_ds.addQuery('name', '=', ds_name);
            sn_ds.setLimit(1);
            sn_ds.query();
            if (sn_ds.next()) {
                rec['cmdb_ci'] = sn_ds.getValue('database_instance');
                rec['src_ci'] = sn_ds.getValue('discovered_item');
                // asset_id is used for "detection" unique key
                rec['asset_id'] = sn_ds.getUniqueValue();
                rec['grd_db_type'] = sn_ds.getValue('datasource_type');

            } else {
                if (!this.missingCMDB[ds_name]) {
                    this.missingCMDB[ds_name] = true;
                    GuardiumLog.warn('Could not find data source - ' + ds_name, this.type);
                }
            }

            if (!rec['cmdb_ci'] && rec['src_ci']) {
                // Get cmdb_ci from Discovered Item
                try {
                    var gr_di = new GlideRecord('sn_sec_cmn_src_ci');
                    if (gr_di.get(rec['src_ci'])) {
                        // get linked DB Inst or DB Cat
                        rec['cmdb_ci'] = gr_di.getValue('cmdb_ci');
                        // update Guardium Datasource record
                        sn_ds.setValue('database_instance', rec['cmdb_ci']);
                        sn_ds.setWorkflow(false);
                        sn_ds.update();
                    }
                } catch (errDI) {
                    GuardiumLog.error('Could not access "sn_sec_cmn_src_ci"', this.type, errDI);
                }
            }

            if (!rec['cmdb_ci']) {
                // Fetch info from Guardium and let GuardiumProcessorDatasource create the entry
                var cmdbDef = {
                    "Timestamp": "1970-01-02 12:00:00",
                    "Modified Entity": "DATASOURCE",
                    "Object Description": ds_name,
                    "Activity Type Description": "UPDATE"
                };

                var source_id = this.x_ibm_ds.processEntry(cmdbDef, cm);
                if (source_id) {
                    var sn_rec = new GlideRecord(GuardiumAPI.TABLE_DB_GDP);
                    sn_rec.addQuery('source_id', '=', grd_rec['source_id']);
                    sn_rec.orderBy('sys_created_on'); // oldest first
                    sn_rec.setLimit(1);
                    sn_rec.query();
                    if (sn_rec.next()) {
                        rec['cmdb_ci'] = sn_rec.getValue('database_instance');
                        rec['src_ci'] = sn_rec.getValue('discovered_item');
                        rec['asset_id'] = sn_rec.getUniqueValue();
                        rec['grd_db_type'] = sn_rec.getValue('datasource_type');
                    }
                }
            }

            return rec;
        },

        createOrUpdateSolution: function(vt_entry, datum) {
            if (!vt_entry.vulnerability) return '';

            var sid = ['IBM', 'GDP', vt_entry.vulnerability, datum['Test Score']].join(':').substring(0, 255);
            var gr = new GlideRecord('sn_vul_solution');
            gr.addQuery('source', '=', GuardiumAPI.TITLE);
            gr.addQuery('source_id', '=', sid);
            gr.setLimit(1);
            gr.query();
            if (!gr.next()) {
                var dbver = (datum['Full Version Info'] || '');
                gr.initialize();
                gr.setValue('source', GuardiumAPI.TITLE);
                gr.setValue('source_id', sid);
                gr.setValue('category', 'SOLUTION');
                gr.setValue('solution_type',
                    this.Score.FAIL == datum['Test Score'] ? 'VENDOR_FIX' : 'PATCH');
                gr.setValue('summary',
                    [datum['Test Description'], datum['Result Text']].join(': ').substring(0, 255));
                gr.setValue('description', [
                    '<h4>Database</h4>' + '<ul>' +
                    '<li>' + datum['Datasource Name'] + '</li>' +
                    '<li>' + (datum['Datasource Type'] || 'EMPTY') + '</li>' +
                    '<li>' + dbver.replaceAll('\n', '</li><li>').replaceAll('\t', '') + '</li>' +
                    '</ul>',
                    '<h4>Summary</h4>' + (datum['Result Text'] || '').trim().replaceAll('\n', '<br/>'),
                    '<h4>Solution</h4>' + (datum['Recommendation'] || '').trim().replaceAll('\n', '<br/>')
                ].join('<br/><br/>'));

                // dates and vul notes are from vulnerability record
                var gr_vul = new GlideRecord('sn_vul_entry');
                if (gr_vul.get(vt_entry.vulnerability)) {
                    gr.setValue('date_published', gr_vul.getValue('date_published'));
                    gr.setValue('last_modified', gr_vul.getValue('last_modified'));
                    gr.setValue('vulnerability_notes',
                        '<h4>' + gr_vul.getValue('id') + '</h4>' + gr_vul.getValue('summary'));
                }
                gr.insert();
            }
            return gr.getUniqueValue();
        },

        getResultFromTestScore: function(testScore, testScoreDesc) {
            switch (testScore) {
                case this.Score.PASS:
                case this.Score.PASS_WITH_CAUTION:
                    return 'passed';

                case this.Score.FAIL:
                    return 'failed';

                case this.Score.ERROR:
                case this.Score.SPECIAL_ERROR:
                case this.Score.CAS_DATA_COLLECTION_ERROR:
                case this.Score.NO_CAS_DATA:
                case this.Score.NO_REPORT_DATA:
                case this.Score.NO_DATABASE_FOUND_IN_LOOPING:
                case this.Score.NO_DATABASE_PROFILE_FOUND:
                case this.Score.ORACLE_JVM_COMPONENT_NOT_INSTALL:
                case this.Score.PRE_TEST_CHECK_FAILED:
                case this.Score.MODULES_NOT_PRESENT:
                case this.Score.EXECUTION_TEST_ROUTINE_CHECK_FAILED:
                    return 'error';

                case this.Score.DEPRECATED_TEST:
                case this.Score.DEPRECATED_PARAMETER:
                case this.Score.OBSOLETE_PARAMETER:
                case this.Score.UNSUPPORTED_DB_VERSION:
                case this.Score.UNSUPPORTED_OS_VERSION:
                case this.Score.UNSUPPORT_CVE_PATCH_DETECTED:
                case this.Score.UNSUPPORT_PTF_PATCH_DETECTED:
                case this.Score.UNSUPPORT_DATABASE_PATCH_DETECTED:
                case this.Score.NOT_APPLICABLE_FOR_DB_VER:
                case this.Score.NOT_APPLICABLE:
                case this.Score.NO_USER_DATA:
                default:
                    return testScoreDesc || 'unknown';
            }
        },

        getStatusFromTestScore: function(testScore) {
            // let customer determine what is marked as failure
            for (var i = 0; i < this.failed_scores.length; i++) {
                if (testScore == this.Score[this.failed_scores[i]]) {
                    return this.sn_vul_det.D_STATUS_OPEN;
                }
            }

            // else return default status
            switch (testScore) {
                case this.Score.PASS:
                case this.Score.PASS_WITH_CAUTION:
                    return this.sn_vul_det.D_STATUS_CLOSED;

                case this.Score.FAIL:
                    return this.sn_vul_det.D_STATUS_OPEN;

                case this.Score.DEPRECATED_TEST:
                case this.Score.DEPRECATED_PARAMETER:
                case this.Score.OBSOLETE_PARAMETER:
                    return this.sn_vul_det.D_STATUS_DECOMMISSIONED;

                case this.Score.ERROR:
                case this.Score.SPECIAL_ERROR:
                case this.Score.CAS_DATA_COLLECTION_ERROR:
                case this.Score.NO_CAS_DATA:
                case this.Score.NO_REPORT_DATA:
                case this.Score.NO_USER_DATA:
                case this.Score.NO_DATABASE_FOUND_IN_LOOPING:
                case this.Score.NO_DATABASE_PROFILE_FOUND:
                case this.Score.NOT_APPLICABLE_FOR_DB_VER:
                case this.Score.NOT_APPLICABLE:
                case this.Score.UNSUPPORTED_DB_VERSION:
                case this.Score.UNSUPPORTED_OS_VERSION:
                case this.Score.UNSUPPORT_CVE_PATCH_DETECTED:
                case this.Score.UNSUPPORT_PTF_PATCH_DETECTED:
                case this.Score.UNSUPPORT_DATABASE_PATCH_DETECTED:
                case this.Score.MODULES_NOT_PRESENT:
                case this.Score.PRE_TEST_CHECK_FAILED:
                case this.Score.EXECUTION_TEST_ROUTINE_CHECK_FAILED:
                case this.Score.ORACLE_JVM_COMPONENT_NOT_INSTALL:
                default:
                    return this.sn_vul_det.D_STATUS_CLOSED; // D_STATUS_INVALID does not work
            }
        },

        checkDetectionKey: function() {
            var guardium_sys_id = this.integrationGr.getValue('integration');
            var gr = new GlideRecord('sn_vul_detection_key_config');
            gr.addQuery('source_integration', '=', guardium_sys_id);
            gr.setLimit(1);
            gr.query();
            if (!gr.next()) {
                // create it
                gr.initialize();
                gr.setValue('source_integration', guardium_sys_id);
                gr.setValue('source', GuardiumAPI.TITLE);
                gr.setValue('asset_id', true);
                gr.setValue('port', true);
                gr.setValue('proof', false);
                gr.setValue('protocol', true);
                gr.setValue('vulnerability', true);
                // detection_key is updated by a business rule
                // gr.setValue('detection_key', '["vulnerability","port","protocol","asset_id"]');
                gr.insert();
            }
        },

        type: 'GuardiumProcessorTestResultDetail'
    });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-01-07 17:24:52</sys_created_on>
        <sys_id>dd9cea9f877c4150387c64280cbb352f</sys_id>
        <sys_mod_count>118</sys_mod_count>
        <sys_name>GuardiumProcessorTestResultDetail</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_script_include_dd9cea9f877c4150387c64280cbb352f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-02-28 21:10:52</sys_updated_on>
    </sys_script_include>
</record_update>
