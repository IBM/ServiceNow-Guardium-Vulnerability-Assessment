<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_metadata_link">
    <sys_metadata_link action="INSERT_OR_UPDATE">
        <directory>update</directory>
        <documentkey>ce5b53cc9797551022fa1c800153afc3</documentkey>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sn_sec_cmn_ci_lookup_rule"&gt;
    &lt;sn_sec_cmn_ci_lookup_rule action="INSERT_OR_UPDATE"&gt;
        &lt;active&gt;true&lt;/active&gt;
        &lt;condition/&gt;
        &lt;description&gt;IBM Guardium data is added to the source_data field of a Discovered Item as JSON.  This rule will find a match of the source_data with Database Instance and Database Catalog entries.  To guarantee a match, the correlation_id of any CMDB_CI item can be set to the Guardium Data source name.&lt;/description&gt;
        &lt;lookup_script/&gt;
        &lt;method&gt;script&lt;/method&gt;
        &lt;name&gt;IBM Guardium - Reference Lookup&lt;/name&gt;
        &lt;order&gt;200&lt;/order&gt;
        &lt;reapply&gt;true&lt;/reapply&gt;
        &lt;reapply_version&gt;2&lt;/reapply_version&gt;
        &lt;script&gt;&lt;![CDATA[var IBMGuardiumRefRule = Class.create();

IBMGuardiumRefRule.ipv4or6 = /((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))/;
IBMGuardiumRefRule.ipv4 = /^((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])$/;
IBMGuardiumRefRule.prefix = 'IBM Guardium: ';

IBMGuardiumRefRule.prototype = {
	initialize: function (sourceValue, sourcePayload) {
		// Ensure JSON data is passed
		try {
			if (!sourcePayload) sourcePayload = sourceValue;
			if ("string" == typeof (sourcePayload)) sourcePayload = JSON.parse(sourceValue);
			this.payload = sourcePayload;
		} catch (e) {
			var errMsg = 'Unable to parse Discovered Item payload.';
			gs.error(IBMGuardiumRefRule.prefix + errMsg, sourceValue);
		}
	},

	generateQuery: function () {
		var isFQDN = !IBMGuardiumRefRule.ipv4or6.test(this.payload['fqdn']);
		var oMetadata = {
			target_fqdn: isFQDN ? 'fqdn' : 'ip_address',
			target_service_name: this.payload['target_service_name'],
			target_database_name: this.payload['target_database_name']
		};
		var oQuery = { 
			'sys_class_name': this.payload['database_instance_class'] || this.payload['target_class'] || 'cmdb_ci_db_instance',
			'tcp_port': this.payload['tcp_port']
		};
		oQuery[oMetadata['target_fqdn']] = { value: this.payload['fqdn'], operator: isFQDN ? 'STARTSWITH' : '=' };
		if (this.payload['service_name'] &amp;&amp; this.payload['target_service_name']) {
			oQuery[this.payload['target_service_name']] = this.payload['service_name'];
		}
		if (this.payload['database_name'] &amp;&amp; this.payload['target_database_name']) {
			oQuery[this.payload['target_database_name']] = this.payload['database_name'];
		}
		oMetadata['query'] = oQuery;
		return oMetadata;
	},

	findMatchingCI: function (oQuery, asQueryProps) {
		var aoJson = [];
		var asInfo = [
			'sys_class_name=' + oQuery.sys_class_name
		];
		var gr;
		try {
			gr = new GlideRecord(oQuery.sys_class_name);
		} catch (e) {
			GuardiumLog.warn('No authorization to query table: ' + oQuery.sys_class_name);
			gr = new GlideRecord('cmdb_ci_db_instance');
		}
		if (!gr) return {};
		
		for (var i = 0; i &lt; asQueryProps.length; i++) {
			var prop = asQueryProps[i];
			var qOperator = '=';
			var qValue = oQuery[prop];
			if ("object" == typeof (oQuery[prop])) {
				qOperator = oQuery[prop].operator || '=';
				qValue = oQuery[prop].value || '';
			}
			gr.addQuery(prop, qOperator, qValue);
			asInfo.push(prop + qOperator + qValue);
		}
		gr.query();
		while (gr.next()) {
			aoJson.push({
				name: gr.getDisplayValue(),
				sys_id: gr.getUniqueValue(),
				sys_class_name: gr.getTableName()
			});
		}
		// return result
		return {
			entries: aoJson,
			query: asInfo.join(' AND ')
		};
	},

	findMatchingCatalog: function (di_sys_id, database_name) {
		// It is assumed that Discovery will create a catalog item for every database type
		if (database_name) {
			var gr_dc = new GlideRecord('cmdb_ci_db_catalog');
			if (gr_dc) {
				gr_dc.addQuery('database_instance', '=', di_sys_id);
				gr_dc.addQuery('name', '=', database_name);
				gr_dc.setLimit(1);
				gr_dc.query();
				if (gr_dc.next()) {
					return gr_dc;
				}
			}
		}
		return null;
	},

	run: function () {
		if (!this.payload) {
			gs.error(IBMGuardiumRefRule.prefix + 'Payload is empty. Exiting.' + '\n' + this.payload);
			return null;
		}

		// Check for direct matches to correlation_id
		try {
			var gr_ci = new GlideRecord('cmdb_ci');
			gr_ci.addQuery('correlation_id', '=', this.payload['name']);
			gr_ci.setLimit(1);
			gr_ci.query();
			if (gr_ci.next()) {
				return gr_ci.getUniqueValue();
			}
		} catch (e) {}
		
		// Display Query
		var oQuery = this.generateQuery();
		//gs.info(IBMGuardiumRefRule.prefix + 'Find Database Instance or Catalog:\n' + JSON.stringify(oQuery.query));

		// Check for direct matches to Database Instance
		var result = {};
		try {
			result = this.findMatchingCI(oQuery.query, [oQuery.target_fqdn, 'tcp_port', oQuery.target_service_name]);
		} catch (e) {
			gs.error(IBMGuardiumRefRule.prefix + e.message + '\n' + e.stack);
			return '';
		}

		// Final Step: find the linked catalog entry
		var aoJsonCI = result.entries;
		if (this.payload['database_name']) {
			for (var j = 0; j &lt; aoJsonCI.length; j++) {
				var gr_dc = this.findMatchingCatalog(aoJsonCI[j].sys_id, this.payload['database_name']);
				if (gr_dc) {
					var oInfo = {
						database_instance: aoJsonCI[j],
						name: this.payload['database_name'],
						sys_id: gr_dc.getUniqueValue(),
					};
					gs.info(
						IBMGuardiumRefRule.prefix + 'Matched Database Catalog\n' + JSON.stringify(oInfo)
					);
					return gr_dc.getUniqueValue();
				}
			}

			// if this point is reached, there is no matching catalog, try matching with DI catalog field
			for (var jj = 0; jj &lt; aoJsonCI.length; jj++) {
				var gr_di;
				try {
					gr = new GlideRecord(aoJsonCI[jj].sys_class_name);
				} catch (e) {
					GuardiumLog.warn('No authorization to query table: ' + aoJsonCI[jj].sys_class_name);
					return null;
				}
				if (gr_di.get(aoJsonCI[jj].sys_id)) {
					if (this.payload['database_name'] == gr_di.getValue(oQuery.target_database_name)) {
						gs.info(
							IBMGuardiumRefRule.prefix + 'Matched Database Instance\n' + JSON.stringify(aoJsonCI[jj])
						);
						return gr_di.getUniqueValue();
					}
				}
			}
		}

		// assume the first one matches FQDN, PORT, DB_TYPE, and SERVICE_NAME
		//  since there is no value for DATABASE_NAME
		if (aoJsonCI.length &gt; 0) {
			gs.info(
				IBMGuardiumRefRule.prefix + 'Possible Matched Database Instances:\n' + JSON.stringify(aoJsonCI)
			);
			return aoJsonCI[0].sys_id;
		}

		gs.warn(IBMGuardiumRefRule.prefix + 'Unmatched Database Instance or Catalog:\n' + JSON.stringify(oQuery));
		return null;
	},

	type: 'IBMGuardiumRefRule'
};

(function process(rule, sourceValue, sourcePayload) {
	/*********************************
	 * CI Lookup Rule Script
	 * 
	 * Available variables:
	 * - rule:          Reference to the lookup rule that is being evaluated
	 * - sourceValue:   The value of the source field from incoming data that is used for lookup
	 * - sourcePayload: All the fields from incoming data that can be used for matching CI 
	 *
	 * Return either:
	 * - the sysid of the CI that was matched by the rule
	 * - null if there were no CI records that matched
	 **********************************/

	var result = null;
	try {
		// Find cmdb_ci record by matching: FQDN, TCP_PORT, DB_TYPE, DB_NAME, SERVICE_NAME
		result = new IBMGuardiumRefRule(sourceValue, sourcePayload).run();
	} catch (e) {
		gs.error(IBMGuardiumRefRule.prefix + e.message + "\n" + e.stack);
	}
	return result;

})(rule, sourceValue, sourcePayload);]]&gt;&lt;/script&gt;
        &lt;source display_value="IBM Guardium Integration"&gt;24f0f5c687744d10387c64280cbb350c&lt;/source&gt;
        &lt;source_field&gt;source_data&lt;/source_field&gt;
        &lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;
        &lt;sys_created_on&gt;2022-11-16 21:16:37&lt;/sys_created_on&gt;
        &lt;sys_domain&gt;global&lt;/sys_domain&gt;
        &lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;
        &lt;sys_id&gt;ce5b53cc9797551022fa1c800153afc3&lt;/sys_id&gt;
        &lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;
        &lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;
        &lt;sys_updated_on&gt;2023-03-22 19:27:44&lt;/sys_updated_on&gt;
        &lt;table/&gt;
        &lt;target_field/&gt;
        &lt;target_table/&gt;
        &lt;type&gt;custom&lt;/type&gt;
    &lt;/sn_sec_cmn_ci_lookup_rule&gt;
&lt;/record_update&gt;
</payload>
        <sys_class_name>sys_metadata_link</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-11-16 22:59:56</sys_created_on>
        <sys_id>53f23708979b551022fa1c800153af69</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>IBM Guardium - Reference Lookup</sys_name>
        <sys_package display_value="IBM Guardium Data Protection" source="x_ibmrt_gdpva">400d30552fa0111049572f2ef699b65a</sys_package>
        <sys_policy/>
        <sys_scope display_value="IBM Guardium Data Protection">400d30552fa0111049572f2ef699b65a</sys_scope>
        <sys_update_name>sys_metadata_link_53f23708979b551022fa1c800153af69</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-22 19:27:59</sys_updated_on>
        <tablename>sn_sec_cmn_ci_lookup_rule</tablename>
    </sys_metadata_link>
</record_update>
