var IBMGuardiumSimpleRule = Class.create();

IBMGuardiumSimpleRule.ipv4or6 = /((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))/;
IBMGuardiumSimpleRule.ipv4 = /^((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])$/;
IBMGuardiumSimpleRule.prefix = 'IBM Guardium: ';

IBMGuardiumSimpleRule.prototype = {
	initialize: function (sourceValue, sourcePayload) {
		// Ensure JSON data is passed
		try {
			if (!sourcePayload) sourcePayload = sourceValue;
			if ("string" == typeof (sourcePayload)) sourcePayload = JSON.parse(sourceValue);
			this.payload = sourcePayload;
		} catch (e) {
			var errMsg = 'Unable to parse Discovered Item payload.';
			gs.error(IBMGuardiumSimpleRule.prefix + errMsg, sourceValue);
		}
	},

	generateQuery: function () {
		var isFQDN = !IBMGuardiumSimpleRule.ipv4or6.test(this.payload['fqdn']);
		var oMetadata = {
			target_fqdn: isFQDN ? 'fqdn' : 'ip_address',
			target_service_name: this.payload['target_service_name'],
			target_database_name: this.payload['target_database_name']
		};
		var oQuery = { 
			'sys_class_name': this.payload['database_instance_class'] || this.payload['target_class'] || 'cmdb_ci_db_instance',
			'tcp_port': this.payload['tcp_port']
		};
		oQuery[oMetadata['target_fqdn']] = { value: this.payload['fqdn'], operator: isFQDN ? 'STARTSWITH' : '=' };
		if (this.payload['service_name'] && this.payload['target_service_name']) {
			oQuery[this.payload['target_service_name']] = this.payload['service_name'];
		}
		if (this.payload['database_name'] && this.payload['target_database_name']) {
			oQuery[this.payload['target_database_name']] = this.payload['database_name'];
		}
		oMetadata['query'] = oQuery;
		return oMetadata;
	},

	findMatchingCI: function (oQuery, asQueryProps) {
		var aoJson = [];
		var asInfo = [
			'sys_class_name=' + oQuery.sys_class_name
		];
		var gr = new GlideRecord(oQuery.sys_class_name);
		for (var i = 0; i < asQueryProps.length; i++) {
			var prop = asQueryProps[i];
			var qOperator = '=';
			var qValue = oQuery[prop];
			if ("object" == typeof (oQuery[prop])) {
				qOperator = oQuery[prop].operator || '=';
				qValue = oQuery[prop].value || '';
			}
			gr.addQuery(prop, qOperator, qValue);
			asInfo.push(prop + qOperator + qValue);
		}
		gr.query();
		while (gr.next()) {
			aoJson.push({
				name: gr.getDisplayValue(),
				sys_id: gr.getUniqueValue(),
				sys_class_name: gr.getTableName()
			});
		}
		// return result
		return {
			entries: aoJson,
			query: asInfo.join(' AND ')
		};
	},

	findMatchingCatalog: function (di_sys_id, database_name) {
		// It is assumed that Discovery will create a catalog item for every database type
		if (database_name) {
			var gr_dc = new GlideRecord('cmdb_ci_db_catalog');
			if (gr_dc) {
				gr_dc.addQuery('database_instance', '=', di_sys_id);
				gr_dc.addQuery('name', '=', database_name);
				gr_dc.setLimit(1);
				gr_dc.query();
				if (gr_dc.next()) {
					return gr_dc;
				}
			}
		}
		return null;
	},

	run: function () {
		if (!this.payload) {
			gs.error(IBMGuardiumSimpleRule.prefix + 'Payload is empty. Exiting.' + '\n' + this.payload);
			return null;
		}

		// Display Query
		var oQuery = this.generateQuery();
		//gs.info(IBMGuardiumSimpleRule.prefix + 'Find Database Instance or Catalog:\n' + JSON.stringify(oQuery.query));

		// Check for direct matchines to Database Instance
		var result = {};
		try {
			result = this.findMatchingCI(oQuery.query, [oQuery.target_fqdn, 'tcp_port', oQuery.target_service_name]);
		} catch (e) {
			gs.error(IBMGuardiumSimpleRule.prefix + e.message + '\n' + e.stack);
			return '';
		}

		// Final Step: find the linked catalog entry
		var aoJsonCI = result.entries;
		if (this.payload['database_name']) {
			for (var j = 0; j < aoJsonCI.length; j++) {
				var gr_dc = this.findMatchingCatalog(aoJsonCI[j].sys_id, this.payload['database_name']);
				if (gr_dc) {
					var oInfo = {
						database_instance: aoJsonCI[j],
						name: this.payload['database_name'],
						sys_id: gr_dc.getUniqueValue(),
					};
					gs.info(
						IBMGuardiumSimpleRule.prefix + 'Matched Database Catalog\n' + JSON.stringify(oInfo)
					);
					return gr_dc.getUniqueValue();
				}
			}

			// if this point is reached, there is no matching catalog, try matching with DI catalog field
			for (var jj = 0; jj < aoJsonCI.length; jj++) {
				var gr_di = new GlideRecord(aoJsonCI[jj].sys_class_name);
				if (gr_di.get(aoJsonCI[jj].sys_id)) {
					if (this.payload['database_name'] == gr_di.getValue(oQuery.target_database_name)) {
						gs.info(
							IBMGuardiumSimpleRule.prefix + 'Matched Database Instance\n' + JSON.stringify(aoJsonCI[jj])
						);
						return gr_di.getUniqueValue();
					}
				}
			}
		}

		// assume the first one matches FQDN, PORT, DB_TYPE, and SERVICE_NAME
		//  since there is no value for DATABASE_NAME
		if (aoJsonCI.length > 0) {
			gs.info(
				IBMGuardiumSimpleRule.prefix + 'Possible Matched Database Instances:\n' + JSON.stringify(aoJsonCI)
			);
			return aoJsonCI[0].sys_id;
		}

		gs.warn(IBMGuardiumSimpleRule.prefix + 'Unmatched Database Instance or Catalog:\n' + JSON.stringify(oQuery));
		return null;
	},

	type: 'IBMGuardiumSimpleRule'
};

(function process(rule, sourceValue, sourcePayload) {
	/*********************************
	 * CI Lookup Rule Script
	 * 
	 * Available variables:
	 * - rule:          Reference to the lookup rule that is being evaluated
	 * - sourceValue:   The value of the source field from incoming data that is used for lookup
	 * - sourcePayload: All the fields from incoming data that can be used for matching CI 
	 *
	 * Return either:
	 * - the sysid of the CI that was matched by the rule
	 * - null if there were no CI records that matched
	 **********************************/

	var result = null;
	try {
		// Find cmdb_ci record by matching: FQDN, TCP_PORT, DB_TYPE, DB_NAME, SERVICE_NAME
		result = new IBMGuardiumSimpleRule(sourceValue, sourcePayload).run();
	} catch (e) {
		gs.error(IBMGuardiumSimpleRule.prefix + e.message + "\n" + e.stack);
	}
	return result;

})(rule, sourceValue, sourcePayload);